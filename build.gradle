import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
    id "java"
    id "jacoco"
    id "org.hibernate.orm" version "${PLUGIN_HIBERNATE_VER}"
    id "io.spring.dependency-management" version "${PLUGIN_SPRING_DEPENDENCY_MANAGEMENT_VER}"
    id "org.zeroturnaround.gradle.jrebel" version "${PLUGIN_JREBEL_VER}" apply false
    id "com.github.kt3k.coveralls" version "${PLUGIN_COVERALLS_VER}"
    id "com.star-zero.gradle.githook" version "${PLUGIN_GIT_HOOK_VER}"
    id "ru.netris.commitlint" version "${PLUGIN_COMMITLINT_VER}"
    id "com.diffplug.spotless" version "${PLUGIN_SPOTLESS_VER}"
    id "com.diffplug.eclipse.apt" version "${PLUGIN_ECLIPSE_APT_VER}"
}

githook {
    failOnMissingHooksDir = false
    createHooksDirIfNotExist = false
    hooks {
        "commit-msg" {
            task = "commitlint -Dmsgfile=\$1"
        }
        "pre-commit" {
            shell = "sh ./gradle/spotless.sh"
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "com.diffplug.eclipse.apt"

    group = "cn.asany.chaos"
    version = System.getenv().getOrDefault("RELEASE_VERSION", "v0.0.0").replaceAll(/^v/, "")
    status = "integration"

    idea {
        module {
            outputDir file("$buildDir/classes/java/main")
            testOutputDir file("$buildDir/classes/java/test")
            inheritOutputDirs = false
        }
    }

    eclipse {
        jdt {
            apt {
                genSrcDir = file("build/generated/sources/annotationProcessor/java/main")
                genTestSrcDir = file("build/generated_tests")
            }
        }
        classpath {
            file.beforeMerged { cp -> cp.entries.add(new SourceFolder("build/generated/sources/annotationProcessor/java/main/", null))
            }
        }
    }

    repositories {
        maven { url "https://s01.oss.sonatype.org/content/groups/staging/" }
        maven { url "https://maven.aliyun.com/repository/central" }
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply from: "$rootDir/gradle/spotless.gradle"

    apply plugin: "io.spring.dependency-management"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    java {
        sourceCompatibility = project.property('SOURCE_COMPATIBILITY')
        targetCompatibility = project.property('TARGET_COMPATIBILITY')

        [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

        compileJava.dependsOn(processResources)
    }

    jar {
        manifest {
            attributes(
              'provider': 'gradle'
            )
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${LIB_SPRING_BOOT_VER}"
        }
    }

    dependencies {
        implementation "cn.asany.chaos:jfantasy-core:$LIB_JFAN_VER"
        implementation "cn.asany.chaos:jfantasy-graphql:$LIB_JFAN_VER"
        implementation "cn.asany.chaos:jfantasy-search:$LIB_JFAN_VER"
        implementation "jakarta.json:jakarta.json-api:${LIB_JAKARTA_VAR}"
        implementation "org.springframework:spring-web"
        implementation "com.jayway.jsonpath:json-path"
        implementation "com.fasterxml.jackson.core:jackson-databind"
        compileOnly "org.mapstruct:mapstruct:$LIB_MAPSTRUCT_VER"
        compileOnly "org.projectlombok:lombok"
        compileOnly "org.springframework.boot:spring-boot-starter-web"
        compileOnly "org.jetbrains:annotations:24.0.0"
        annotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${LIB_LOMBOK_MAPSTRUCT_BINDING_VER}"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$LIB_SPRING_BOOT_VER"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        testAnnotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok-mapstruct-binding:${LIB_LOMBOK_MAPSTRUCT_BINDING_VER}"
        testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:$LIB_GRAPHQL_VER"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.springframework.boot:spring-boot-starter-web"
    }

    plugins.withId('java') {
        project.apply plugin: 'org.zeroturnaround.gradle.jrebel'
        //noinspection ConfigurationAvoidance
        def jarTask = project.tasks.findByName('jar')
        if (jarTask) {
            jarTask.dependsOn(generateRebel)
        }
        //noinspection ConfigurationAvoidance
        def warTask = project.tasks.findByName('war')
        if (warTask) {
            warTask.dependsOn(generateRebel)
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        ignoreFailures = true
    }

    //noinspection GroovyAssignabilityCheck
    tasks.register("codeCoverageReport", JacocoReport) {
        subprojects { subproject ->
            subproject.plugins.withType(JacocoPlugin).configureEach {
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                    //noinspection GroovyAssignabilityCheck
                    sourceSets subproject.sourceSets.main
                    //noinspection GroovyAssignabilityCheck
                    executionData(testTask)
                }
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                    rootProject.tasks.codeCoverageReport.dependsOn(it)
                }
            }
        }

        reports {
            xml.enabled true
            html.enabled false
            xml.destination file("${buildDir}/reports/Coverage.xml")
        }
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath 'build/reports/Coverage.xml'
}