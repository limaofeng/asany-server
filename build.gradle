buildscript {
    repositories {
        maven { url "https://maven.thuni-h.com/repository/maven-public" }
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.4.10.Final"
    }
}

plugins {
    id 'idea'
    id "io.spring.dependency-management" version "${PLUGIN_SPRING_DEPENDENCY_MANAGEMENT_VER}"
    id "org.zeroturnaround.gradle.jrebel" version "${PLUGIN_JREBEL_VER}"
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    group = 'com.thuni.his'
    description = "演示项目"
    version = System.getenv()['CI_BUILD_TAG']
    status = 'integration'

    repositories {
        maven { url "https://maven.thuni-h.com/repository/maven-public" }
        maven { url "https://jcenter.bintray.com" }
    }

    configurations {
        apply plugin: 'java'
        apply plugin: 'idea'
        apply plugin: 'io.spring.dependency-management'
    }

    idea {
        module {
            outputDir file("$buildDir/classes/java/main")
            testOutputDir file("$buildDir/classes/java/test")
            inheritOutputDirs = false
        }
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username System.getenv()['MAVEN_USER']
                    password System.getenv()['MAVEN_PASS']
                }
                url "https://maven.thuni-h.com/repository/" + System.getenv()['MAVEN_REPO_KEY']
            }
        }

        publications {
            maven(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: 'org.hibernate.orm'

    jar {
        manifest {
            attributes 'provider': 'gradle'
        }
    }

    hibernate {
        enhance {
            enableLazyInitialization = true
            enableDirtyTracking = true
            enableAssociationManagement = true
            enableExtendedEnhancement = false
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava.dependsOn(processResources)

    plugins.withId('java') {
        project.apply plugin: 'org.zeroturnaround.gradle.jrebel'
        def jarTask = project.tasks.findByName('jar')
        if (jarTask) {
            jarTask.dependsOn(generateRebel)
        }
        def warTask = project.tasks.findByName('war')
        if (warTask) {
            warTask.dependsOn(generateRebel)
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${LIB_SPRING_BOOT_VER}")
        }
    }

    dependencies {
        compile "org.jfantasy:jfantasy-core:$LIB_JFAN_VER"
        compile "org.jfantasy:jfantasy-graphql:$LIB_JFAN_VER"
        compile "org.mapstruct:mapstruct:$LIB_MAPSTRUCT_VER"
        compileOnly "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        annotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        annotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$LIB_SPRING_BOOT_VER"
        testCompileOnly "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        testAnnotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        implementation("org.springframework:spring-web")
        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("com.jayway.jsonpath:json-path")
        testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:$LIB_GRAPHQL_VER"
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")
    }

    configurations {
        published
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    task copyDependencies(type: Sync) {
        from configurations.compileClasspath
        from configurations.compileOnly
        into 'build/dependencies'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact sourceJar
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
            xml.destination file("${buildDir}/reports/Coverage.xml")
        }
    }

    test {
        useJUnitPlatform()

        ignoreFailures = true

        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }

    }
}