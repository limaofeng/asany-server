buildscript {
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:${PLUGIN_HIBERNATE_VER}"
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id "io.spring.dependency-management" version "${PLUGIN_SPRING_DEPENDENCY_MANAGEMENT_VER}"
    id "org.zeroturnaround.gradle.jrebel" version "${PLUGIN_JREBEL_VER}" apply false
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id "com.star-zero.gradle.githook" version "1.2.0"
    id "ru.netris.commitlint" version "1.4.1"
    id "com.diffplug.spotless" version "5.14.2"
}

githook {
    failOnMissingHooksDir = false
    createHooksDirIfNotExist = false
    hooks {
        "commit-msg" {
            task = "commitlint -Dmsgfile=\$1"
        }
        "pre-commit" {
            shell = "sh ./gradle/spotless.sh"
        }
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'cn.asany.chaos'
    version = System.getenv().getOrDefault('RELEASE_VERSION', 'v0.0.0').replaceAll(/^v/, "")
    status = 'integration'

   idea {
        module {
            outputDir file("$buildDir/classes/java/main")
            testOutputDir file("$buildDir/classes/java/test")
            inheritOutputDirs = false
        }
    }

    eclipse {
        classpath {
            file.beforeMerged { cp ->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('build/generated/sources/annotationProcessor/java/main/', null) )
            }
        }
    }

    repositories {
        maven { url "https://jcenter.bintray.com" }
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply from: "$rootDir/gradle/spotless.gradle"

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava.dependsOn(processResources)

    manifest {
        attributes 'provider': 'gradle'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${LIB_SPRING_BOOT_VER}"
        }
    }

    dependencies {
        implementation "cn.asany.chaos:jfantasy-core:$LIB_JFAN_VER"
        implementation "cn.asany.chaos:jfantasy-graphql:$LIB_JFAN_VER"
        compileOnly "org.mapstruct:mapstruct:$LIB_MAPSTRUCT_VER"
        compileOnly "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        annotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        annotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$LIB_SPRING_BOOT_VER"
        testCompileOnly "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        testAnnotationProcessor "org.projectlombok:lombok:$LIB_LOMBOK_VER"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:$LIB_MAPSTRUCT_VER"
        implementation("org.springframework:spring-web")
        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("com.jayway.jsonpath:json-path")
        testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:$LIB_GRAPHQL_VER"
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")
    }

    plugins.withId('java') {
        project.apply plugin: 'org.zeroturnaround.gradle.jrebel'
        def jarTask = project.tasks.findByName('jar')
        if (jarTask) {
            jarTask.dependsOn(generateRebel)
        }
        def warTask = project.tasks.findByName('war')
        if (warTask) {
            warTask.dependsOn(generateRebel)
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()

        ignoreFailures = true
    }

    tasks.register("codeCoverageReport", JacocoReport) {
        subprojects { subproject ->
            subproject.plugins.withType(JacocoPlugin).configureEach {
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                }
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                    rootProject.tasks.codeCoverageReport.dependsOn(it)
                }
            }
        }

        reports {
            xml.enabled true
            html.enabled false
            xml.destination file("${buildDir}/reports/Coverage.xml")
        }
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath 'build/reports/Coverage.xml'
}