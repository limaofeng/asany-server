#enum ArticlePermissionKey {
#    # 查看人
#    viewer,
#    # 下载人
#    downloader,
#    # 打印人
#    printer
#}

input ArticleChannelCreateInput {
    # 栏目名称
    name: String!
    # 地址
    url: String
    # 栏目封面图
    cover: FileObject
    # 描述
    description: String
    # 上级栏目
    parent: ID
    # 排序
    index: Int
    # 组织
    organization: ID!
    # 授予权限
    #    permissions: [PermissionInput]
    # 元数据
    meta: MetaData
}

input FieldValueInput{
    name: String
    code: String
    value: String
}

input ArticleChannelUpdateInput {
    # 栏目名称
    name: String
    # 地址
    url: String
    # 栏目封面图
    cover: FileObject
    # 描述
    description: String
    # 排序
    index: Int
    # 上级栏目
    parent: ID
    # 组织
    organization: ID!
    # 授予权限
    #    permissions: [PermissionInput]
    # 元数据
    meta: MetaData
}

input ArticleFilter {
    # 频道
    channel: ID
    # 关键字
    Keyword: String
    # 标签
    tags: [ID]
    # 栏目为空 (没有栏目的文章)
    channels_isEmpty: Boolean
    # 多个栏目
    channel_in: [ID]
    # 复杂查询支持
    and: [ArticleFilter]
    # 复杂查询支持
    or: [ArticleFilter]
    #发布状态
    status: ArticleStatus
    # 发布时间
    publishedAt: String
    # 发布人
    createdBy: String
    # 文章类型
    category: ArticleCategory
    # 用户id
    viewer: ID
    # 用户创建id
    founder: ID
    # 有效期限 true 过滤以过有效期限的文章
    validity: Boolean
}

input BannerFilter {
    # ID 查询
    id_in: [ID]
    # 是否启用
    enabled: Boolean
}

type ArticleConnection {
    # 总数据条数
    totalCount: Int
    # 每页显示条数
    pageSize: Int
    # 总页数
    totalPage: Int
    # 当前页
    currentPage: Int
    edges: [ArticleEdge]
    pageInfo: PageInfo
}

type ArticleEdge {
    cursor: String
    node: Article
}

enum ContentFormat {
    html
}

enum ArticleStatus {
    draft
    published
    waitPublished
    waitAudit
    failureAudit
}

type Meta {
    file: FileObject
    url: String
    title: String
    description: String
}

type ArticleChannel {
    id: ID!
    # 编码
    code: String
    # 名称
    name: String
    # 描述
    description: String
    # 栏目封面图
    cover: FileObject
    # 全路径
    path: String
    # 排序
    index: Int
    # 上级栏目
    parent: ArticleChannel
    meta: Meta
    # 栏目 / 频道 关注
    #    starrable: Starrable
    # 展示模版
    #    displayTemplate: [FieldValue]
    # 权限设置
    #    permissions: Permission
    createdAt: Date
    updatedAt: Date
    children:[ArticleChannel]
}

# 支持层级，亦可栏目使用
type ArticleTag {
    id: ID!
    url: String
    # 名称
    name: String
    # 描述
    description: String
    # 全路径
    path: String
    # 排序
    index: Int
    meta: Meta
    createdAt: Date
    updatedAt: Date
}

# 文章类型, 比如： 图片， 文本 等。
enum ArticleCategory {
    #信息
    information,
    #圈子
    circle,
    #博客
    blog
    #课程
    section
}

# 文章
type Article {
    # 文章ID
    id: ID!
    # 链接
    url: String
    # 图片
    cover: FileObject
    # 标题
    title: String!
    # 状态
    status: ArticleStatus!
    # 摘要
    summary: String
    # 分类
    category: ArticleCategory!
    # 作者
    author: String
    # 发布时间
    publishedAt: Date
    # 内容
    content(format: ContentFormat): Content
    #查询评论
    #    comments(filter: CommentFilter, page: Int = 1, pageSize: Int = 15, orderBy: OrderBy): CommentConnection
    # 频道
    channels: [ArticleChannel]
    # 标签
    tags: [ArticleTag]
    # 推荐位
    recommend: [ArticleRecommend]
    # 有效期限 true 永久 false 短期
    validity: Boolean
    # 有效期限 开始时间
    validityStartDate: Date
    # 有效期限 结束时间
    validityEndDate: Date
    # 元数据
    meta: Meta
    # 附件
    attachments: [FileObject]
    # 统计计数
    #    starrable(starType: ArticleStarType!): Starrable!
    # 权限设置
    permissions: Permission
    createdBy: Int
    updatedBy: Int
    createdAt: Date
    updatedAt: Date
    # 文章类型
    type:ArticleType
}

# 文章内容
interface Content {
    id: ID
}

enum ContentType {
    json, link, html, file
}

# html格式内容
type HtmlContent implements Content {
    id: ID
    text: String
}

enum ArticleType{
    # 普通文章
    text
    # 链接文章
    link
    # 文件文章
    file
    # 图片
    picture
    # 视频
    video
}

type Permission {
    resourceType: String,
    id: String
}

enum  ArticleChannelStarType {
    # 关注
    follow
}

enum ArticleStarType {
    # 收藏
    favorites
    # 点击数
    clicks
    # 阅读数
    reads
    # 点赞数
    likes
}

input ArticleCreateInput {
    # 文章标题
    title: String
    # 文章正文
    content: ContentInput
    # 摘要
    summary: String
    # 文章封面
    cover: FileObject
    # 文章标签
    tags: [ID]
    # 推荐位id
    recommend: [ID]
    # 文章栏目
    channels: [ID]
    # 状态
    status: ArticleStatus!
    # 发布日期
    publishedAt: String
    # 文章类别
    category: ArticleCategory!
    # 组织
    organization: ID!
    # 授予权限
    permissions: [PermissionInput]
    # 附件
    attachments: [FileObject]
    # 文章类型
    type:ArticleType
    # 有效期限 true 永久 false 短期
    validity: Boolean
    # 有效期限 开始时间
    validityStartDate: Date
    # 有效期限 结束时间
    validityEndDate: Date
    # 元数据
    meta: MetaData
    # 作者
    author: String
}

input MetaData{
    file: FileObject
    url: String
    title: String
    description: String
}

input ContentInput {
    # type: ContentType
    html: String
    # 链接url
    link: String
    # 图片
    pictures: [ContentPictureInput]
    # 视频
    video: FileObject
}

input ContentPictureInput {
    # 图片
    picture: FileObject
    # 图片摘要
    digest: String
}

input ArticleUpdateInput {
    # 文章标题
    title: String
    # 文章URL 必须唯一
    url: String
    # 文章发布状态
    status: ArticleStatus
    # 文章正文
    content: ContentInput
    # 摘要
    summary: String
    # 文章封面
    cover: FileObject
    # 文章标签
    tags: [ID]
    # 推荐位id
    recommend: [ID]
    # 文章栏目
    channels: [ID]
    # 发布日期
    publishedAt: String
    # 组织
    organization: ID
    # 授予权限
    permissions: [PermissionInput]
    # 附件
    attachments: [FileObject]
    # 作者
    author: String
    # 文章类型
    type:ArticleType
    # 有效期限 true 永久 false 短期
    validity: Boolean
    # 有效期限 开始时间
    validityStartDate: Date
    # 有效期限 结束时间
    validityEndDate: Date
    # 元数据
    meta: MetaData
}
input ArticleTagUpdateInput{
    # 标签名称
    name: String!
    # 标签code
    code: String
    # 标签图
    cover: FileObject
    # 组织
    organization: ID!
    # 描述
    description: String
    # 排序
    index: Int
}

input ArticleTagCreateInput{
    # 标签名称
    name: String!
    # 标签code
    code: String
    # 标签图
    cover: FileObject
    # 描述
    description: String
    # 组织
    organization: ID!
    # 排序
    index: Int
}

input ArticleChannelFilter {
    #名称
    name: String
    path_startsWith: String
    # 父级
    parent: ID
    # 用户id
    viewer: ID
    # 用户创建id
    founder: ID
}

input PermissionInput {
    permission: String
    grants: [String]
}


input RecommendFilter{
    # 名称
    name: String
}
input RecommendCreateInput{
    # 名称
    name: String!
    # 描述
    description: String
    # 编码
    code: String
    # 组织
    organization: ID!
}

input RecommendUpdateInput{
    # 名称
    name: String!
    # 描述
    description: String
    # 编码
    code: String
    # 组织
    organization: ID!
}

type ArticleRecommend{
    id: ID
    # 推荐状态
    status: ArticleRecommendStatus
    # 文章
    article: Article
    # 推荐位
    recommend: Recommend
    # 推荐天数
    aging: Int
}

enum ArticleRecommendStatus{
    # 待审核
    waitAudit,
    # 显示
    display,
    # 过期
    expired
}

type Recommend{
    id: ID
    # 名称
    name: String
    # 描述
    description: String
    # 编码
    code: String
}

enum BannerBackgroundType {
    # 图片
    IMAGE
    # 视频
    VIDEO
}

type Banner {
    id: ID
    # 名称
    name: String
    # 标题
    title: String
    # 描述
    description: String
    # 媒体类型
    backgroundType: BannerBackgroundType
    # 媒介
    background: FileObject @fileObjectFormat
    # 跳转地址
    url: String
    # 跳转按钮文本
    buttonText: String
    # 是否启用
    enabled: Boolean
}

input BannerCreateInput {
    # 名称
    name: String
    # 标题
    title: String
    # 描述
    description: String
    # 媒体类型
    backgroundType: BannerBackgroundType
    # 媒介
    background: FileObject
    # 跳转地址
    url: String
    # 跳转按钮文本
    buttonText: String
    # 是否启用
    enabled: Boolean
}

input BannerUpdateInput {
    # 名称
    name: String
    # 标题
    title: String
    # 描述
    description: String
    # 媒体类型
    backgroundType: BannerBackgroundType
    # 媒介
    background: FileObject
    # 跳转地址
    url: String
    # 跳转按钮文本
    buttonText: String
    # 是否启用
    enabled: Boolean
}

extend type Query {
    # 单个文章
    article(id: ID!): Article
    # 全部文章
    articles(filter: ArticleFilter, first: Int = 0, page: Int = 1, pageSize: Int = 15, orderBy: OrderBy): ArticleConnection
    # 文章栏目
    articleChannels(filter: ArticleChannelFilter, orderBy: OrderBy): [ArticleChannel]
    # 文章标签
    articleTags(organization: ID!, filter: ArticleChannelFilter, orderBy: OrderBy): [ArticleTag]
    # 文章权限
    # articlePermissions(category: ArticleCategory!): [Permission]
    # 根据ID获取文章栏目
    articleChannel(id: ID!):ArticleChannel
    # 已加星标的文章频道
    starredArticleChannels(uid:ID!,starType: ArticleChannelStarType!): [ArticleChannel]
    # 已加星标的文章
    starredArticles(uid: ID! ,starType: ArticleStarType!, filter: ArticleFilter = {}, page: Int = 1, pageSize: Int = 15, orderBy: OrderBy): ArticleConnection
    # 查询所有推荐位
    recommends(organization: ID!,filter: RecommendFilter,orderBy: OrderBy): [Recommend]
    # 根据id查询推荐位
    recommend(id:ID!): Recommend
    # 横幅广告
    banner(id: ID!): Banner
    # 横幅广告
    banners(filter: BannerFilter, orderBy: OrderBy): [Banner]
}

extend type Mutation {
    # 新增文章
    createArticle(input: ArticleCreateInput!): Article
    # 修改文章
    updateArticle(id: ID!, merge: Boolean = true, input: ArticleUpdateInput!): Article
    # 发布文章
    publishArticle(id:ID): Boolean
    # 删除文章
    removeArticle(id: ID!): Boolean
    # 批量删除文章
    batchRemoveArticle(ids: [ID]!): Boolean
    # 添加栏目
    createChannel(input: ArticleChannelCreateInput!): ArticleChannel
    # 编辑栏目
    updateChannel(id: ID!, merge: Boolean = true, input: ArticleChannelUpdateInput!): ArticleChannel
    # 删除栏目
    removeChannel(id: ID!): Boolean
    # 添加标签
    createArticleTag(input: ArticleTagCreateInput):ArticleTag
    # 更新标签
    updateArticleTag(id: ID!, merge: Boolean = true,input: ArticleTagUpdateInput):ArticleTag
    # 删除标签
    removeArticleTag(id:ID!):Boolean
    # 新增推荐位
    createRecommend(input:RecommendCreateInput): Recommend
    # 更新推荐位
    updateRecommend(id: ID!, merge: Boolean = true, input:RecommendUpdateInput): Recommend
    # 删除推荐位
    deleteRecommend(id:ID!): Boolean
    # 创建 Banner
    createBanner(input: BannerCreateInput!): Banner
    # 更新 Banner
    updateBanner(id: ID!, input: BannerUpdateInput!, merge: Boolean = true): Banner
    # 删除 Banner
    deleteBanner(id: ID!): Boolean
}
