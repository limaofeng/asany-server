input ModelMetadataInput {
  databaseTableName: String
}

input ModelCreateInput {
  """
  编码
  """
  code: String
  """
  名称
  """
  name: String
  """
  描述
  """
  description: String
  """
  字段
  """
  fields: [ModelFieldInput]
  """
  元数据
  """
  metadata: ModelMetadataInput
  """
  特征
  """
  features: [String]
}

input ModelUpdateInput {
  """
  编码
  """
  code: String
  """
  名称
  """
  name: String
  """
  描述
  """
  description: String
  """
  字段
  """
  fields: [ModelFieldInput]
  """
  元数据
  """
  metadata: ModelMetadataInput
  """
  特征
  """
  features: [String]
}

input ModelFieldInput {
  """
  编码
  """
  code: String
  """
  名称
  """
  name: String
  """
  类型
  """
  type: String
  """
  必填
  """
  required: Boolean
  """
  是否唯一
  """
  unique: Boolean
  """
  是否为集合
  """
  list: Boolean
  """
  默认值
  """
  defaultValue: String
}

input ModelFilter {
  type: ModelType
  type_not: ModelType
  type_in: [ModelType]
  type_notIn: [ModelType]
  code: String
  code_contains: String
  name: String
  name_contains: String
  AND: [ModelFilter]
  OR: [ModelFilter]
  NOT: [ModelFilter]
}

type ModelConnection {
  # 总数据条数
  totalCount: Int
  # 每页显示条数
  pageSize: Int
  # 总页数
  totalPage: Int
  # 当前页
  currentPage: Int
  edges: [ModelEdge]
  #pageInfo: PageInfo
}
type ModelEdge {
  cursor: String
  node: Model
}

type ModuleConnection {
  """
  总数据条数
  """
  totalCount: Int!
  """
  每页显示条数
  """
  pageSize: Int!
  """
  总页数
  """
  totalPage: Int!
  """
  当前页
  """
  currentPage: Int!
  edges: [ModuleEdge!]!
}
type ModuleEdge {
  cursor: String!
  node: Module!
}

enum ModelType {
  """
  输入对象
  """
  INPUT_OBJECT
  """
  标量
  """
  SCALAR
  """
  类型
  """
  OBJECT
  """
  实体
  """
  ENTITY
  """
  枚举
  """
  ENUM
  """
  联合
  """
  UNION
  """
  接口
  """
  INTERFACE
}

type Model {
  id: ID!
  """
  编码
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  类型
  """
  type: ModelType!
  """
  描述
  """
  description: String
  """
  字段
  """
  fields: [ModelField!]!
  """
  创建人
  """
  createdBy: String!
  """
  修改人
  """
  updatedBy: String!
  """
  创建时间
  """
  createdAt: Date!
  """
  修改时间
  """
  updatedAt: Date!
}

type ModelFieldMetadata {
  """
  配置模型时，选择的字段类型
  """
  fieldType: String
}

type ModelField {
  id: ID!
  """
  编码
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  描述
  """
  description: String
  """
  类型
  """
  type: Model!
  """
  字段类型
  """
  fieldType: ModelFiledType!
  """
  必填
  """
  required: Boolean
  """
  是否主键
  """
  primaryKey: Boolean
  """
  是否唯一
  """
  unique: Boolean
  """
  存储值为列表
  """
  list: Boolean
  """
  是否为系统字段
  """
  system: Boolean
  """
  元数据
  """
  metadata: ModelFieldMetadata!
  """
  所属实体
  """
  model: Model!
}

enum ServiceIdType {
  ID
  CODE
}

type Service {
  id: ID
  # 编码
  code: String
  # 名称
  name: String
  # 描述
  description: String
  # Web 协议
  protocol: String
  # Host 地址
  host: String
  # 端口
  port: String
  # PATH 地址
  path: String
  # 地址
  url: String
}

type Consumer {
  id: ID
}

type GraphQLEndpoint {
  id: ID
}

enum GraphQLType {
  # 输入对象
  InputObject
  # 标量
  Scalar
  # 类型
  Object
  # 枚举
  Enum
  # 联合
  Union
  # 接口
  Interface
}

enum ModelGroupItemResourceType {
  # 查询
  Query
  # 突变
  Mutation
  # 标量
  Scalar
  # 模型
  Model
  # 输入
  Input
  # 枚举
  ENUM
}

type ModelGroupItemResource {
  id: ID
  name: String
  type: ModelGroupItemResourceType
  resourceId: Int
  resourceType: String
}

type ModelGroup {
  id: ID
  name: String
  description: String
  items: [ModelGroupItemResource]
}

type GraphQLSchema {
  id: ID
  name: String
  ungrouped: [ModelGroupItemResource]
  groups: [ModelGroup]
  endpoints: [ModelField]
  queries: [ModelField]
  mutations: [ModelField]
  types: [Model]
}

enum ModelIdType {
  id
  code
}

enum EndpointIdType {
  id
  code
}

type DataSetField {
  name: String
}

type DataSetFilter {
  name: String
}

type DataSet {
  """
  数据集字段
  """
  fields: [DataSetField]
  """
  数据集筛选
  """
  filters: [DataSetFilter]
  """
  数据结果
  """
  result: [JSON]
}

type Module {
  id: ID
  """
  编码
  """
  code: String
  """
  名称
  """
  name: String
  """
  描述
  """
  description: String
}

input ModuleFilter {
  id: ID
  name: String
}

enum ModelFiledTypeFamily {
  STRING
  TEXT
  INTEGER
  FLOAT
  BOOLEAN
  DATE
  DATE_TIME
  JSON
  ASSET
  COLOR
  LOCATION
  ENUMERATION
  RELATION
}

type ModelFiledType {
  id: String!
  name: String!
  description: String
  family: ModelFiledTypeFamily
  graphQLType: String!
}

extend type Query {
  """
  查询单个模块
  """
  module(id: ID!): Module
  """
  查询全部模块
  """
  modules(
    filter: ModuleFilter = {}
    page: Int = 1
    pageSize: Int = 15
    orderBy: OrderBy = "unsorted"
  ): [Module!]!
  """
  查询全部模块（分页）
  """
  modulesConnection(
    filter: ModuleFilter = {}
    page: Int = 1
    pageSize: Int = 15
    orderBy: OrderBy = "unsorted"
  ): ModuleConnection!
  # 用户列表
  models(
    filter: ModelFilter = {}
    offset: Int = 0
    limit: Int = 15
    orderBy: OrderBy = "unsorted"
  ): [Model!]!
  modelsConnection(
    filter: ModelFilter = {}
    page: Int = 1
    pageSize: Int = 15
    orderBy: OrderBy = "unsorted"
  ): ModelConnection!
  # 查询单个模型
  model(id: ID, idType: ModelIdType = id): Model
  # 查询单个接口
  endpoint(id: ID, idType: EndpointIdType = id): ModelField
  # 查询单个服务
  service(id: ID!, idType: ServiceIdType = ID): Service
  # 服务
  services: [Service!]!
  # 消费者
  consumers: [Consumer!]!
  #  GraphQL 架构图
  schema(id: ID!): GraphQLSchema
  # 查询数据集
  dataset(id: ID!, params: JSON): DataSet
  """
  查询模型支持的字段类型
  """
  modelFiledTypes: [ModelFiledType!]!
}

extend type Mutation {
  """
  新增实体
  """
  createModel(input: ModelCreateInput!): Model
  """
  添加实体字段
  """
  addModelField(
    """
    模型ID
    """
    modelId: ID!
    """
    模型字段
    """
    input: ModelFieldInput!
  ): ModelField
  """
  修改实体
  """
  updateModel(id: ID!, input: ModelUpdateInput!): Model
  """
  删除实体
  """
  deleteModel(id: [ID]!): Int
}
