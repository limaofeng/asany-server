interface ModelField {
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否唯一"
  isUnique: Boolean
  "名称"
  name: String
}

union DataSourceConfiguration = DBConfiguration | DingtalkConfiguration | EZOfficeConfiguration

union Morph = Activity | ActivityAggregator | ActivityAggregatorAvg | ActivityAggregatorMax | ActivityAggregatorMin | ActivityAggregatorSum | ActivityConnection | ActivityEdge | Amount | DataDictionary | Department | Employee | Entityuser | EntityuserAggregator | EntityuserConnection | EntityuserEdge | Exam | ExamAggregator | ExamAggregatorAvg | ExamAggregatorMax | ExamAggregatorMin | ExamAggregatorSum | ExamCondition | ExamConnection | ExamEdge | Examandpaper | ExamandpaperAggregator | ExamandpaperConnection | ExamandpaperEdge | Examcondition | ExamconditionAggregator | ExamconditionConnection | ExamconditionEdge | Examinationpaper | ExaminationpaperAggregator | ExaminationpaperConnection | ExaminationpaperEdge | Exampapertitle | ExampapertitleAggregator | ExampapertitleConnection | ExampapertitleEdge | Examreport | ExamreportAggregator | ExamreportAggregatorAvg | ExamreportAggregatorMax | ExamreportAggregatorMin | ExamreportAggregatorSum | ExamreportConnection | ExamreportEdge | Examtopic | ExamtopicAggregator | ExamtopicConnection | ExamtopicEdge | JoinConditionInfo | JoinPersons | Joincondition | JoinconditionAggregator | JoinconditionConnection | JoinconditionEdge | Meeting | MeetingAggregator | MeetingAggregatorAvg | MeetingAggregatorMax | MeetingAggregatorMin | MeetingAggregatorSum | MeetingConnection | MeetingEdge | Meetingnotice | MeetingnoticeAggregator | MeetingnoticeConnection | MeetingnoticeEdge | Meetingreserve | MeetingreserveAggregator | MeetingreserveConnection | MeetingreserveEdge | Meetingroom | MeetingroomAggregator | MeetingroomAggregatorAvg | MeetingroomAggregatorMax | MeetingroomAggregatorMin | MeetingroomAggregatorSum | MeetingroomConnection | MeetingroomEdge | MeetingsConnection | MeetingsEdge | Meetingtype | MeetingtypeAggregator | MeetingtypeConnection | MeetingtypeEdge | Meetingvote | MeetingvoteAggregator | MeetingvoteConnection | MeetingvoteEdge | Meetingvotedetail | MeetingvotedetailAggregator | MeetingvotedetailConnection | MeetingvotedetailEdge | Partybill | PartybillAggregator | PartybillAggregatorAvg | PartybillAggregatorMax | PartybillAggregatorMin | PartybillAggregatorSum | PartybillConnection | PartybillEdge | Partyexpenses | PartyexpensesAggregator | PartyexpensesAggregatorAvg | PartyexpensesAggregatorMax | PartyexpensesAggregatorMin | PartyexpensesAggregatorSum | PartyexpensesConnection | PartyexpensesEdge | Payreport | Payscale | PayscaleAggregator | PayscaleAggregatorAvg | PayscaleAggregatorMax | PayscaleAggregatorMin | PayscaleAggregatorSum | PayscaleConnection | PayscaleEdge | Paystandard | PaystandardAggregator | PaystandardAggregatorAvg | PaystandardAggregatorMax | PaystandardAggregatorMin | PaystandardAggregatorSum | PaystandardConnection | PaystandardEdge | QuestionBanks | Questionbank | QuestionbankAggregator | QuestionbankAggregatorAvg | QuestionbankAggregatorMax | QuestionbankAggregatorMin | QuestionbankAggregatorSum | QuestionbankConnection | QuestionbankEdge | Questiontopic | QuestiontopicAggregator | QuestiontopicConnection | QuestiontopicEdge | Relatedaccessory | RelatedaccessoryAggregator | RelatedaccessoryConnection | RelatedaccessoryEdge | Sheet | SheetAggregator | SheetAggregatorAvg | SheetAggregatorMax | SheetAggregatorMin | SheetAggregatorSum | SheetConnection | SheetEdge | Sheetchild | SheetchildAggregator | SheetchildConnection | SheetchildEdge | Summarybrief | SummarybriefAggregator | SummarybriefConnection | SummarybriefEdge | Topiccollect | TopiccollectAggregator | TopiccollectConnection | TopiccollectEdge | Voteoption | VoteoptionAggregator | VoteoptionConnection | VoteoptionEdge | WrongQuestiontopic | createActivityPayload | createEntityuserPayload | createExamPayload | createExamandpaperPayload | createExamconditionPayload | createExaminationpaperPayload | createExampapertitlePayload | createExamreportPayload | createExamtopicPayload | createJoinconditionPayload | createMeetingPayload | createMeetingnoticePayload | createMeetingreservePayload | createMeetingroomPayload | createMeetingtypePayload | createMeetingvotePayload | createMeetingvotedetailPayload | createPartybillPayload | createPartyexpensesPayload | createPayscalePayload | createPaystandardPayload | createQuestionbankPayload | createQuestiontopicPayload | createRelatedaccessoryPayload | createSheetPayload | createSheetchildPayload | createSummarybriefPayload | createTopiccollectPayload | createVoteoptionPayload | deleteActivityPayload | deleteEntityuserPayload | deleteExamPayload | deleteExamandpaperPayload | deleteExamconditionPayload | deleteExaminationpaperPayload | deleteExampapertitlePayload | deleteExamreportPayload | deleteExamtopicPayload | deleteJoinconditionPayload | deleteMeetingPayload | deleteMeetingnoticePayload | deleteMeetingreservePayload | deleteMeetingroomPayload | deleteMeetingtypePayload | deleteMeetingvotePayload | deleteMeetingvotedetailPayload | deletePartybillPayload | deletePartyexpensesPayload | deletePayscalePayload | deletePaystandardPayload | deleteQuestionbankPayload | deleteQuestiontopicPayload | deleteRelatedaccessoryPayload | deleteSheetPayload | deleteSheetchildPayload | deleteSummarybriefPayload | deleteTopiccollectPayload | deleteVoteoptionPayload | updateActivityPayload | updateEntityuserPayload | updateExamPayload | updateExamandpaperPayload | updateExamconditionPayload | updateExaminationpaperPayload | updateExampapertitlePayload | updateExamreportPayload | updateExamtopicPayload | updateJoinconditionPayload | updateMeetingPayload | updateMeetingnoticePayload | updateMeetingreservePayload | updateMeetingroomPayload | updateMeetingtypePayload | updateMeetingvotePayload | updateMeetingvotedetailPayload | updatePartybillPayload | updatePartyexpensesPayload | updatePayscalePayload | updatePaystandardPayload | updateQuestionbankPayload | updateQuestiontopicPayload | updateRelatedaccessoryPayload | updateSheetPayload | updateSheetchildPayload | updateSummarybriefPayload | updateTopiccollectPayload | updateVoteoptionPayload

union SecurityScopeValue = Department | Employee | EmployeeGroup | Job | Organization | Role | User

union StarValue = Application

type APackage {
  moduleId: String
  packageId: String
  packageName: String
  process: [Processes]
  processNum: String
}

type ActiveNode {
  "活动处理人"
  assignee: Employee
  "结束时间"
  endDate: Date
  "活动节点"
  id: String
  "活动名称"
  name: String
  nodeAttribute: FlowElement
  "开始时间"
  startDate: Date
  "状态"
  state: ActivityStateEnum
  "用户任务节点评论意见"
  taskComment: [FlowableComment]
  "活动类型"
  type: String
}

type Activity {
  activity_instruction: String
  activity_place: String
  apply: Boolean
  apply_number_limit: Int
  "活动处理人"
  assignee: ProcessEmployee
  attendActivitys: [Entityuser]
  briefs: [Summarybrief]
  budget_amount: Int
  checkInPersons: [Entityuser]
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  "结束时间"
  endDate: Date
  end_time: DateTime
  focus: String
  icon: String
  "活动节点"
  id: String
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  jionConditions: [Joincondition]
  meetingvotes: [Meetingvote]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  mssage_push: String
  "活动名称"
  name: String
  nodeAttribute(processDefin: ID): FlowElement
  orgid: String
  presenters: [Entityuser]
  relateAccessorys: [Relatedaccessory]
  remind: String
  sign_time_require: String
  sign_way: String
  "开始时间"
  startDate: Date
  start_time: DateTime
  "状态"
  state: ActivityStateEnum
  "用户任务节点评论意见"
  taskComment: [FlowableComment]
  "活动类型"
  type: String
  updated_at: DateTime!
}

"活动场次签到表"
type ActivityActSignin {
  employeeId: Int
  placeId: Int
  signinTime(
    format: String, 
    "入参"
    input: String
  ): Date
}

"活动场次签到表"
type ActivityActSigninConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [ActivityActSigninEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type ActivityActSigninEdge {
  cursor: String
  node: ActivityActSignin
}

type ActivityAggregator {
  avg: ActivityAggregatorAvg
  count: Int
  max: ActivityAggregatorMax
  min: ActivityAggregatorMin
  sum: ActivityAggregatorSum
  totalCount: Int
}

type ActivityAggregatorAvg {
  apply_number_limit: Float
  budget_amount: Float
}

type ActivityAggregatorMax {
  apply_number_limit: Float
  budget_amount: Float
}

type ActivityAggregatorMin {
  apply_number_limit: Float
  budget_amount: Float
}

type ActivityAggregatorSum {
  apply_number_limit: Float
  budget_amount: Float
}

type ActivityConnection {
  currentPage: Int
  edges: [ActivityEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Activity]
}

type ActivityEdge {
  cursor: String
  node: Activity
}

"活动图片表"
type ActivityImage {
  "社员ID"
  act_id: Int
  "主键id"
  id: ID
  "名称"
  name: String
  parent: ActivityImage
  "路径"
  path: String
  "排序号"
  sort: ID
}

"活动图片表"
type ActivityImageConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [ActivityImageEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type ActivityImageEdge {
  cursor: String
  node: ActivityImage
}

"活动标签表"
type ActivitySign {
  "所属分类（0社团活动，1工会活动）"
  belongType: Int
  "id"
  id: String
  "标签名称"
  name: String
}

"GhActivitySignConnection"
type ActivitySignConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [ActivitySignEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type ActivitySignEdge {
  cursor: String
  node: ActivitySign
}

type Address {
  "城市"
  city: String
  "国家"
  country: String
  "区"
  district: String
  id: ID
  "邮编"
  postalCode: String
  "省"
  province: String
  "街道"
  street: String
}

"年龄统计详情视图"
type AgeDetailView {
  "数量"
  amount: Int
  "编号"
  code: String
  "名称"
  name: String
  "性别"
  sex: String
}

"年龄统计视图"
type AgeView {
  "部门名称"
  deptName: String
  "年龄分布统计"
  detail: [AgeDetailView]
  "女性人数"
  femaleAmount: Int
  "男性人数"
  maleAmount: Int
}

type Amount {
  alreadyPaid: String
  toPay: String
}

type Api {
  "调试工具"
  debug: String
  "接口描述"
  describe: String
  "graphql接口"
  graphql: GraphQLApi
  "对应的图标"
  icon: String
  "id 就是接口名"
  id: String
  "请求方式"
  method: String
  "接口中文名称"
  name: String
  """
  restful
  restful: GraphQLFieldDefinitio
  接口所属类型
  """
  type: ApiType
}

type ApiType {
  "创建时间"
  createdAt: Date
  "主键"
  id: ID
  "接口"
  interfaces: [Api]
  "类型名称"
  name: String
  "备注"
  note: String
  "父类型"
  parent: ApiType
  "修改时间"
  updatedAt: Date
}

type AppDefinition {
  cmmnModels: [AppModelDefinition]
  groupsAccess: String
  icon: String
  key: String
  models: [AppModelDefinition]
  name: String
  theme: String
  usersAccess: String
}

type AppDingInfo {
  "agentId"
  agentId: ID
  "corpId"
  corpId: String
  "应用名称"
  name: String
}

type AppModelDefinition {
  createdBy: String
  description: String
  id: String
  lastUpdated: Date
  lastUpdatedBy: String
  modelType: Int
  name: String
  version: Int
}

type Application {
  "模块"
  cases: [CaseAndVersion]
  "应用分类"
  category: ApplicationCategory
  "配置"
  configuration: ApplicationConfiguration
  "封面图"
  cover: String
  "飞书"
  dAnonymousLetter: DAnonymousLetterDataSource
  "集成飞书"
  dAnonymousLetterIntegration: Boolean
  "简介"
  description: String
  "钉钉"
  dingtalk: DingtalkDataSource
  "集成钉钉"
  dingtalkIntegration: Boolean
  "是否启用"
  enabled: Boolean
  "集成 ezOFFICE"
  ezofficeIntegration: Boolean
  id: ID
  "布局路由"
  layoutRoute(protocol: ApplicationProtocol): Route
  "登录路由"
  loginRoute(protocol: ApplicationProtocol): Route
  "应用 LOGO"
  logo: String
  "挂载点"
  mountPoint: String
  "名称"
  name: String
  "组织"
  organization: Organization
  "应用根路径"
  path: String
  "门户"
  portals: [Portal]
  "支持的协议"
  protocols: [ApplicationProtocol]
  "根路由"
  rootRoute(protocol: ApplicationProtocol): Route
  "路由"
  route(path: String!): Route
  "路由"
  routes(protocol: ApplicationProtocol): [Route]
  "应用配置信息"
  source: String
  "应用收藏"
  starrable(starType: ApplicationStarType!): Starrable!
  "应用中心是否可见"
  storeVisible: Boolean
  "类型"
  type: ApplicationType
  "应用访问地址"
  url: String
  "企业微信"
  weChatCP: WeChatCPDataSource
  "集成企业微信"
  weChatCPIntegration: Boolean
}

type ApplicationConfiguration {
  "集成飞书"
  dAnonymousLetter: DAnonymousLetterDataSource
  dingtalk: DingtalkDataSource
  ezoffice: EZOfficeDataSource
  variables: [ApplicationVariable]
  "集成企业微信"
  weChatCP: WeChatCPDataSource
}

type ApplicationType {
  "编码"
  code: String
  "描述"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
}

type ApplicationVariable {
  key: String
  value: String
}

"钉钉应用"
type Apply {
  "图标附件列表"
  appIcon(
    "文件自定在格式"
    format: FileEnum
  ): FileObject
  "应用名称"
  appName: String
  "应用类型1常用功能2综合办公"
  appType: String
  "应用链接"
  appUrl: String
  "对应钉钉ID"
  dingId: String
  id: ID
}

type Archive {
  "得分明细"
  archiveDetails: [ArchiveDetail]
  "档案人"
  archiveEmployee: OrgEmployee
  "科室"
  department: Department
  "主键id"
  id: ID
  "近期得分"
  recentScore: Float
  "每个年度总分"
  sumAndAverage: fraction
  "总得分"
  totalScore: Float
  "年度"
  year: String
}

type ArchiveConnection {
  "当前页"
  currentPage: Int
  edges: [ArchiveEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ArchiveDetail {
  "操作时间"
  createdAt(format: String): Date
  "主键id"
  id: ID
  "得分"
  score: Float
  "操作类型（LOGIN：登录  SPEAK：小组发言  MOTION：提案  VOTE：投票）"
  type: OperatingType
}

"履职记录详细分页"
type ArchiveDetailConnection {
  currentPage: Int
  edges: [ArchiveDetailEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"cursor"
type ArchiveDetailEdge {
  cursor: String
  node: ArchiveDetails
}

"履职记录详细"
type ArchiveDetails {
  createTime: Date
  name: String
  score: Int
  type: String
}

type ArchiveEdge {
  cursor: String
  node: Archive
}

"edges"
type ArchiveEdges {
  cursor: String
  node: Archives
}

"履职记录统计"
type Archives {
  activity: String
  archive_id: ID
  departmentName: String
  deptId: ID
  employeeId: ID
  employeeName: String
  meeting: String
  motion: String
  particular_year: String
  score: Int
}

"履职记录分页实体"
type ArchivesConnection {
  currentPage: ID
  edges: [ArchiveEdges]
  pageInfo: PageInfo
  pageSize: ID
  totalCount: ID
  totalPage: ID
}

"文章"
type Article {
  "附件"
  attachments: [FileObject]
  "作者"
  author: String
  "分类"
  category: ArticleCategory!
  "频道"
  channels: [ArticleChannel]
  "查询评论"
  comments(filter: CommentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): CommentConnection
  "内容"
  content(format: ContentFormat): String!
  "图片"
  cover: FileObject
  createdAt(format: String): Date!
  creator: String
  "附件"
  file: FileObject
  "文章ID"
  id: ID!
  "元数据"
  meta: Meta
  modifier: String
  "附件"
  path: [FileObject]
  "权限设置"
  permissions(key: String): [Permission]
  "轮播图状态 true：已设置轮播图 false：未设置轮播图"
  photoSetStatus: Boolean
  "发布时间"
  publishedAt(format: String): Date
  "发布人"
  publisher: Employee
  """
    统计计数
  统计计数
  """
  starrable(starType: ArticleStarType!): Starrable!
  "状态"
  status: ArticleStatus!
  "摘要"
  summary: String
  "标签"
  tags: [ArticleTag]
  "标题"
  title: String!
  "文章类型"
  type: ArticleType
  updatedAt(format: String): Date!
  "链接"
  url: String
}

type ArticleChannel {
  "false启用、true禁用"
  able: Boolean
  "栏目 文章数"
  articleNumber: Int
  children: [ArticleChannel]
  "栏目封面图"
  cover: FileObject
  createdAt(format: String): Date
  "描述"
  description: String
  id: ID!
  meta: Meta
  "模块"
  module: String
  "名称"
  name: String
  "上级栏目"
  parent: ArticleChannel
  "全路径"
  path: String
  "已发布数"
  publishedNumber: Int
  "栏目 文章数"
  readingNumber(
    "starType"
    starType: String, 
    "uid"
    uid: ID
  ): Int
  "排序"
  sort: Int
  "栏目 / 频道 关注"
  starrable: Starrable
  "学习人数"
  studyNumber: Int
  "未发布数"
  unpublishedNumber: Int
  updatedAt(format: String): Date
  url: String
}

type ArticleConnection {
  "当前页"
  currentPage: Int
  edges: [ArticleEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ArticleEdge {
  cursor: String
  node: Article
}

type ArticleReadStatistics {
  x: String
  y: String
}

"支持层级，亦可栏目使用"
type ArticleTag {
  "类型"
  category: ArticleTagCategory
  createdAt(format: String): Date
  "描述"
  description: String
  id: ID!
  meta: Meta
  "名称"
  name: String
  "全路径"
  path: String
  "排序"
  sort: Int
  updatedAt(format: String): Date
  url: String
}

type AssessmentConnection {
  "当前页"
  currentPage: Int
  edges: [AssessmentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type AssessmentEdge {
  cursor: String
  node: PartyAssessment
}

type AssessmentStatistic {
  "年度平均得分"
  average: Int
  "支部"
  department: Department
  "支部书记"
  employee: Employee
  "主键"
  id: ID
  "年份"
  year: Int
}

type AssessmentStatisticConnection {
  "当前页"
  currentPage: Int
  edges: [AssessmentStatisticEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type AssessmentStatisticEdge {
  cursor: String
  node: AssessmentStatistic
}

"社团"
type Association {
  "当前社员数量"
  currentEmployeeNum: Int
  "主键id"
  id: ID
  "社团介绍"
  introduction: String
  "最大社员数量"
  maxEmployeeNum: Int
  "社团名称"
  name: String
  nodes: [Association]
  parent: Association
  "路径"
  path: String
  "排序号"
  sort: ID
  "社团状态"
  status: Int
  "社团规则"
  teamRules: String
  "修改人"
  updator: String
}

"社团"
type AssociationConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [AssociationEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type AssociationEdge {
  cursor: String
  node: Association
}

type Attachment {
  attachmentDescription: String
  attachmentId: ID
  attachmentName: String
  attachmentType: String
  processInstance: ProcessInstance
  stream: String
  taskId: ID
}

type Authentication {
  "随机字符串，自己定义的"
  nonceStr: String
  "签名"
  signature: String
  "时间戳"
  timeStamp: String
}

type Authority {
  id: Int
  name: String
  type: String
}

"用户签名照片部门公章"
type AutographPng {
  "签名附件"
  autographFile: FileObject
  "描述信息"
  description: String
  "是否启用 0禁用 1 启用"
  enabled: Boolean
  "Id"
  id: ID
  "签名类型"
  type: AutographEnum
}

type BIntegralEdge {
  cursor: String
  node: BranchIntegral
}

"返回结果"
type BaseResultTemplate {
  applicationObject: JSON
  description: String
  id: ID
  logo: String
  source: String
  title: String
  url: String
}

type BatchTaskModel {
  count: Int
  taskModels: [Task]
}

type Bill {
  "关联合同"
  contract: ProjectContract
  "发票附件"
  files: [FileObject]
  id: ID
  "付款金额"
  payAmount: Float
  "付款日期"
  payDate: String
  "备注"
  remark: String
}

type BooleanField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

"流程"
type BpmGetUserProcessByModuleIdsNewResponse {
  aPackage: APackage
}

"党员发展概览数据"
type BranchData {
  "返回员工id"
  add(
    "入参员工ID"
    employeeId: ID!
  ): Boolean
  "员工年龄"
  age: Int
  "岗位"
  employeeFieldValues: [EmployeeFieldValue]
  "数据"
  extendedAttributes: ExtendedAttributes
  "员工id"
  id: ID
  "员工姓名"
  name: String
  "电话号码"
  phone: String
  "职务"
  positions: Position
  "类型"
  type: String
}

type BranchIntegral {
  "支部积分"
  branchIntegral: Int
  "支部名称"
  branchName: String
  "编号"
  id: ID
}

type BranchIntegralConnection {
  "当前页"
  currentPage: Int
  edges: [BIntegralEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"预算"
type Budget {
  "已申请金额"
  appliedMoney: Float
  "预算余额"
  budgetBalance: Float
  "预算金额"
  budgetMoney: Float
  "结束日期"
  endTime(
    "数据字典类型"
    type: String
  ): Date
  "动态字段值列表FieldValue"
  fieldValues: [FieldValue]
  "文件"
  files: [FileObject]
  "医院"
  hospital: Department
  "预算id"
  id: ID
  "预算名称"
  name: String
  "进度"
  progress: String
  "项目列表"
  projects: [BudgetProject]
  "备注"
  remarks: String
  "查询预算进度"
  schedules: [BudgetSchedule]
  "预算编号"
  sn: String
  "预算拆分金额"
  splitMoney: Float
  "开始日期"
  startTime(format: String): Date
  "当前步骤"
  state(
    "数据字典类型"
    type: String
  ): String
  "付款审核状态0未申请1审批中2审批通过"
  status: String
  "当前预算对应的流程"
  stepDict: [DataDictionary]
  "预算类别"
  type(
    "数据字典类型"
    type: String
  ): String
  "已经支付金额"
  usePayMoney: Float
  "预算年度"
  year: String
}

type BudgetAccount {
  "预算类别ID"
  budgetType: ID
  "预算科目编码"
  code: String
  "主键ID"
  id: ID
  "预算科目"
  name: String
  "父级ID"
  parent: ID
  "启用状态（0/未启动，1/启动）"
  status: Boolean
}

type BudgetBasePayDetail {
  "调整后金额"
  adjustAmount: Float
  "预算金额"
  budgetAmount: Float
  "预算内容"
  budgetContent: BudgetContent
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: BudgetSubject
  "本年度执行金额"
  currYearExecuted: Float
  "较本年浮动"
  currentYearFloat: Float
  "编制说明"
  description: String
  "预计年度执行金额"
  expectYearExecuted: Float
  "较上年浮动"
  floatLast: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  "主键ID"
  id: ID
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年预算金额"
  lastYearBudgetAmount: Float
  "下一年预算金额"
  nextYearBudget: Float
  "预算单元"
  unit: Department
}

type BudgetCategoryConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetCategoryEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type BudgetCategoryEdge {
  cursor: String
  node: BudgetCategory
}

"分页查询预算"
type BudgetConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "预算支付总额"
  sumappliedMoney: Float
  "预算余额总额"
  sumbudgetBalance: Float
  "预算总金额"
  sumbudgetMoney: Float
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type BudgetContent {
  "预算内容"
  budgetContent: String
  "预算编号"
  budgetNumber: String
  "预算科目"
  budgetSubject: BudgetSubject
  "预算单元"
  department: Department
  "主键ID"
  id: ID
}

"预算内容"
type BudgetContentConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetContentEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetContentEdge {
  cursor: String
  node: BudgetContent
}

"预算控制"
type BudgetControl {
  "控制策略编码"
  code: String
  "弹性控制百分比"
  elastic: Float
  "是否启用（0/未启用，1/启用）"
  enableFlag: Boolean
  "主键id"
  id: ID
  "控制级别（0/通过;1/禁止;2/弹性控制）"
  level: Int
  "消息提示"
  message: String
  "控制规则名称"
  name: String
  "修改人"
  updator: String
}

"预算控制"
type BudgetControlConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetControlEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetControlEdge {
  cursor: String
  node: BudgetControl
}

"分页查询预算"
type BudgetEdge {
  cursor: String!
  node: Budget
}

type BudgetExcelConnection {
  errorCount: Int
  errorUrl: String
  successCount: Int
}

type BudgetMZReceiptDetail {
  "调整后金额"
  adjustAmount: Float
  "预算内容"
  budgetContent: String
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: BudgetSubject
  "同比（本年度）"
  currCompareWith: Float
  "本年度已执行数"
  currExecAmount: Float
  "本年度预算数"
  currYearBudgetAmount: Float
  "预计执行金额"
  expectExecAmount: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  id: ID
  "执行率"
  implementationRate: Float
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年实际执行数"
  lastYearActualExecution: Float
  "同比（下一年）"
  nextCompareWith: Float
  "下一年预算数"
  nextYearBudgetAmount: Float
  "预算单元"
  unit: Department
}

type BudgetMake {
  "附件信息"
  attachments: [FileObject]
  "基本支出预算明细"
  basePayDetails: [BudgetBasePayDetail]
  "预算编制可选项"
  budgetMakeOption: BudgetMakeOption
  "预算编号"
  budgetNumber: String
  "预算管理员"
  employee: Employee
  "主键ID"
  id: ID
  "编制日期"
  makingDate: Date
  "预算编制任务"
  makingTask: BudgetPlanning
  "门诊收入预算明细"
  mzReceiptDetails: [BudgetMZReceiptDetail]
  "预算类别"
  type: BudgetType
  "预算单元"
  unit: Department
}

type BudgetMakeConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetMakeEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type BudgetMakeEdge {
  cursor: String
  node: BudgetMake
}

type BudgetMakeOption {
  "预算金额"
  budgetAmount: Float
  "预算控制策略"
  budgetRule: ID
  "门诊药占比"
  drugProportion: Float
  "预算说明"
  makingDescription: String
  "门诊材料占比"
  materialProportion: Float
  "本年度收入"
  yearInCome: Float
}

"预算实体"
type BudgetModel {
  budgetModels: [BudgetModel]
  "编码"
  code: String
  "描述"
  description: String
  "图片"
  icon: String
  "主键id"
  id: ID
  "标识图片"
  image: String
  "系统预设"
  isSys: Boolean
  "名称"
  name: String
  parent: BudgetModel
  "简称"
  shortName: String
  "类型"
  type: String
}

"预算实体"
type BudgetModelConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetModelEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetModelEdge {
  cursor: String
  node: BudgetModel
}

"预算期间"
type BudgetPeriod {
  "编码"
  code: String
  "创建日期"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "是否启用（0未启动/1已启动）"
  enableFlag: Boolean
  "编制结止日期"
  endDate(
    format: String, 
    "入参"
    input: String
  ): Date
  id: ID
  "修改人"
  modifier: String
  "名称"
  name: String
  nodes: [BudgetPeriod]
  parent: BudgetPeriod
  path: String
  "所属期间"
  period: String
  "期间类型"
  periodType: PeriodType
  sort: ID
  "编制起始日期"
  startDate(
    format: String, 
    "入参"
    input: String
  ): Date
  "是否启用（0/未启用，1/启用）"
  status: Boolean
  "修改日期"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "修改人"
  updator: String
}

"预算期间"
type BudgetPeriodConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetPeriodEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetPeriodEdge {
  cursor: String
  node: BudgetPeriod
}

"预算编制任务"
type BudgetPlanning {
  "指派状态(0:分配任务:1:接受任务)"
  assignFlag: Boolean
  "预算期间"
  budgetPeriod: BudgetPeriod
  "预算任务名称"
  budgetTask: BudgetTask
  "预算类别"
  budgetType: BudgetType
  "结束时间"
  endDate: Date
  "主键ID"
  id: ID
  "是否分解下发"
  isDecompose: Boolean
  "编制任务名称"
  name: String
  "子任务集"
  nodes: [BudgetPlanning]
  "父任务"
  parent: BudgetPlanning
  "开始时间"
  startDate: Date
  "状态"
  status: PlanningEnum
  "处理方式"
  treatmentMethod: TreatmentMethod
  "预算单元ID"
  unit: Department
}

type BudgetPlanningConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetPlanningEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type BudgetPlanningEdge {
  cursor: String
  node: BudgetPlanning
}

"项目"
type BudgetProject {
  "已付款金额"
  applyMoney: Float
  "预算"
  budget: Budget
  "合同金额"
  contractMoney: Float
  "合同金额"
  contractMoneys: Float
  "执行状态"
  executionStatus: String
  "字段配置"
  fieldConfiguration: StageFieldConfiguration
  "动态字段值列表FieldValue"
  fieldValues: [FieldValue]
  "附件列表"
  files: [FileObject]
  "项目ID"
  id: ID
  "进口详情"
  importArgument: ImportArgument
  "进口论证审批状态"
  importArgumentStatus: String
  "招标完成金额"
  mountOfCompletionOfBidding: String
  "项目名称"
  name: String
  "未支付金额"
  noPayMoney: Float
  "采购数量"
  num: Int
  "已支付金额"
  payMoney: Float
  "付款列表"
  payments: [Payment]
  "计划招标完成时间"
  plannedCompleteTime(format: String): Date
  "计划招标公示时间"
  plannedGsTime(format: String): Date
  "计划合同时间"
  plannedHtTime(format: String): Date
  "计划验收时间"
  plannedYsTime(format: String): Date
  "计划招标准备时间"
  plannedZbTime(format: String): Date
  "项目详细列表"
  projectDetaileds: [BudgetProjectDetailed]
  "查询进度"
  projectSchedules: [ProjectSchedule]
  "返回流程"
  returnStep: [StageWorkflowStep]
  "单位自筹金额"
  selfMoney: Float
  "单位自筹金额"
  selfMoneys: Float
  "项目编号"
  sn: String
  "阶段"
  stage: Stage
  "阶段方案"
  stageScheme: StageWorkflowScheme
  "步骤"
  step: StageWorkflowStep
  "当前预算拆分对应的流程"
  stepDict: [DataDictionary]
  "拆分预算金额"
  xmMoney: Float
  "委托机构"
  ysAgency: String
  "银行账号"
  ysBankAccount: String
  "品牌"
  ysBrand: String
  "开户银行"
  ysDepositBank: String
  "型号"
  ysModel: String
  "单一来源公示记录"
  ysPublicityFile: [FileObject]
  "采购形式"
  ysStyle: String
  "供应商名称"
  ysSupplier: String
  "采购方式"
  ysType: String
  "工程审价报告"
  ysappraisalFile: [FileObject]
  "货物验收报告"
  yscargoysFile: [FileObject]
  "工程竣工验收报告"
  yscompletionysFile: [FileObject]
  "委托招标代理协议"
  ysdlFile: [FileObject]
  "委托代理进口合同"
  ysdlhtFile: [FileObject]
  "合同签订日期"
  yshtDate: Date
  "合同书"
  yshtFile: [FileObject]
  "合同名称"
  yshtName: String
  "合同编号"
  yshtsn: String
  "评标报告"
  yspbFile: [FileObject]
  "采购进口产品政府采购审批情况告知单"
  ysprocurementapplyFile: [FileObject]
  "项目验收报告"
  ysprojectysFile: [FileObject]
  "政府采购编号"
  yspurSn: String
  "投标文件"
  ystbFile: [FileObject]
  "中标（成交）通知书"
  yswinbidFile: [FileObject]
  "招标文件"
  yszbFile: [FileObject]
  "招标完成金额"
  zbmoney: Float
}

"分页查询预算"
type BudgetProjectConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetProjectEdge]
  "待创建进口论证数"
  imports: Int
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "项目总金额"
  sumxmmoney: Float
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"项目详情"
type BudgetProjectDetailed {
  "品牌"
  brand: String
  "类容"
  contents: String
  "审批时间"
  endTime: String
  "项目详细ID"
  id: ID
  "是否进口"
  isImported: String
  "计量单位"
  meteringCompany: String
  "型号"
  model: String
  "金额"
  money: Float
  "数量"
  num: Int
  "项目"
  project: BudgetProject
  "状态0未申请1审批中2审批通过3审批未通过"
  status: String
  "用户id"
  userId: String
  "OA流程节点importArgumentsimportArguments"
  workCurStep: String
  "OA流程workId"
  workId: String
}

"分页查询项目拆分详细"
type BudgetProjectDetailedConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetProjectDetailedEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页查询项目拆分详细"
type BudgetProjectDetailedEdge {
  cursor: String
  node: BudgetProjectDetailed
}

"分页查询预算"
type BudgetProjectEdge {
  cursor: String
  node: BudgetProject
}

"汇总统计数据对象"
type BudgetReport {
  "结余资金"
  balanceAmount: Float
  "结余资金（大修）"
  balanceAmount1: Float
  "结余资金（信息）"
  balanceAmount2: Float
  "结余资金（大型设备）"
  balanceAmount4: Float
  "结余资金（一般设备）"
  balanceAmount5: Float
  "结余资金（其他）"
  balanceAmount6: Float
  "合同金额"
  contractAmount: Float
  "合同金额（大修）"
  contractAmount1: Float
  "合同金额（信息）"
  contractAmount2: Float
  "合同金额（大型设备）"
  contractAmount4: Float
  "合同金额（一般设备）"
  contractAmount5: Float
  "合同金额（其他）"
  contractAmount6: Float
  "资金余额"
  fundBalance: Float
  "资金余额（大修）"
  fundBalance1: Float
  "资金余额（信息）"
  fundBalance2: Float
  "资金余额（大型设备）"
  fundBalance4: Float
  "资金余额（一般设备）"
  fundBalance5: Float
  "资金余额（其他）"
  fundBalance6: Float
  "所属单位名称"
  name: String
  "支付总额"
  paymentTotalAmount: Float
  "支付总额（大修）"
  paymentTotalAmount1: Float
  "支付总额（信息）"
  paymentTotalAmount2: Float
  "支付总额（大型设备）"
  paymentTotalAmount4: Float
  "支付总额（一般设备）"
  paymentTotalAmount5: Float
  "支付总额（其他）"
  paymentTotalAmount6: Float
  "招标总额"
  tenderAmount: Float
  "招标总额（大修）"
  tenderAmount1: Float
  "招标总额（信息）"
  tenderAmount2: Float
  "招标总额（大型设备）"
  tenderAmount4: Float
  "招标总额（一般设备）"
  tenderAmount5: Float
  "招标总额（其他）"
  tenderAmount6: Float
  "预算总额"
  totalBudgetAmount: Float
  "预算总额（大修）"
  totalBudgetAmount1: Float
  "预算总额（信息）"
  totalBudgetAmount2: Float
  "预算总额（大型设备）"
  totalBudgetAmount4: Float
  "预算总额（一般设备）"
  totalBudgetAmount5: Float
  "预算总额（其他）"
  totalBudgetAmount6: Float
}

"预算进度"
type BudgetSchedule {
  "标志位"
  flag: Sign
  "流程id"
  flow: String
  "主键id"
  id: ID
  "月份 2012-03"
  month: String
}

type BudgetSubject {
  budgetType: BudgetType
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  "主键ID"
  id: ID
  "名称"
  name: String
  nodes: [BudgetSubject]
  "上级科目"
  parent: BudgetSubject
  "路径"
  path: String
  "排序号"
  sort: ID
  "状态（0/未启用，1/启动）"
  status: Boolean
  subjectCatalog: BudgetSubjectCatalog
}

"科目目录表"
type BudgetSubjectCatalog {
  budgetSubjects: [BudgetSubject]
  budgetType: BudgetType
  "编码"
  code: String
  "主键id"
  id: ID
  "修改时间"
  modifier(
    format: String, 
    "入参"
    input: String
  ): Date
  "名称"
  name: String
  nodes: [BudgetSubjectCatalog]
  parent: BudgetSubjectCatalog
  "路径"
  path: String
  "排序号"
  sort: ID
}

"科目目录表"
type BudgetSubjectCatalogConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetSubjectCatalogEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetSubjectCatalogEdge {
  cursor: String
  node: BudgetSubjectCatalog
}

"预算科目"
type BudgetSubjectConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetSubjectEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetSubjectEdge {
  cursor: String
  node: BudgetSubject
}

"预算任务"
type BudgetTask {
  "预算期间ID"
  budgetPeriod: BudgetPeriod
  "编制结止日期"
  endDate: Date
  "主键ID"
  id: ID
  "预算任务信息"
  message: String
  "任务名称"
  name: String
  "编制起始日期"
  startDate: Date
  "预算任务状态"
  status: TaskEnum
}

type BudgetTaskConnection {
  "当前页"
  currentPage: Int
  edges: [BudgetTaskEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type BudgetTaskEdge {
  cursor: String
  node: BudgetTask
}

"预算类型"
type BudgetType {
  budgetSubjects: [BudgetSubject]
  "所属类别"
  category: BudgetCategory
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  id: ID
  "名称"
  name: String
  nodes: [BudgetType]
  parent: BudgetType
  "路径"
  path: String
  "排序号"
  sort: ID
  subjectCatalogs: [BudgetSubjectCatalog]
  "预算单元集"
  units: [ID]
  "修改人"
  updator: String
}

"预算类别"
type BudgetTypeConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [BudgetTypeEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type BudgetTypeEdge {
  cursor: String
  node: BudgetType
}

type BusinessCondition {
  "实体ID"
  business: ID
  "标识"
  code: String
  "连接符"
  connector: String
  "主键ID"
  id: ID
  "sql条件"
  tableCondition: String
}

type Button {
  label: String
  name: String
}

"候选用户组"
type CandidateUser {
  id: [String]
}

type Case {
  "基础权限设置"
  authority: [String]
  "必须授权才能访问"
  authorized: Boolean
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "不在菜单中显示子菜单"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "不在菜单中显示"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  "主键"
  id: String
  "该应用是否安装该模块"
  install(applicationId: ID!): Boolean
  "菜单名称"
  name: String
  "基础路径"
  path: String
  "重定向"
  redirect: String
  "路由"
  routes: [CaseRoute]
  "版本"
  version: [CaseVersion]
}

type CaseAndVersion {
  "模块"
  case: Case
  "是否当前正在使用"
  use: Boolean
  "版本"
  version: CaseVersion
}

type CaseRoute {
  """
    子路由
  routes: [CaseRoute]
  可以访问的权限
  """
  authority: [String]
  "必须授权才能访问"
  authorized: Boolean
  "组件"
  containComponent: ComponentConfiguration
  "是否启用"
  enabled: Boolean
  "不在菜单中显示子菜单"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "不在菜单中显示"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  "主键"
  id: String
  "菜单名称"
  name: String
  "父路由"
  parent: String
  "树路径"
  path: String
  "重定向"
  redirect: String
  "路由类型"
  type: CaseRouteType
}

type CaseVersion {
  "简介"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "路由"
  routes: CaseRoute
  "是否安装"
  use(applicationId: ID!): Boolean
  "版本"
  version: String
}

type CheckEmployeeConnection {
  code: Int
  employee: Employee
  msg: String
}

type ColumnStructure {
  "字符最大长度"
  characterMaxLength: String
  "列描述"
  columnComment: String
  "列类型"
  columnType: String
  "数据类型"
  dataType: String
  "默认值"
  defaultValue: String
  "是否允许为空"
  isNullable: String
  "是否为主键"
  isPrimaryKey: String
  "列名称"
  name: String
  "精确度"
  numberPrecision: Int
  "范围"
  numberScale: Int
}

type Comment {
  "该评论的评论"
  comments(filter: CommentFilter): [Comment]
  "评论内容"
  content: String
  "创建时间"
  createdAt(format: String): Date
  "引用的评论ID"
  forComment: Comment
  "评论的ID"
  id: ID
  "统计计数，是否点赞"
  starrable(starType: CommentStarType!): Starrable
  "评论状态"
  status: CommentStatus
  "评论的类型"
  targetType: CommentTargetType
  "评论标题"
  title: String
  "用户ID"
  user: Employee
}

type CommentConnection {
  "当前页"
  currentPage: Int
  edges: [CommentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type CommentEdge {
  cursor: String
  node: Comment
}

type Component {
  "封面图"
  cover: String
  "简介"
  description: String
  id: ID
  "名称"
  name: String
  "标签名称"
  platforms: [ComponentPlatform]
  "组件变量"
  props: [ComponentPropertyValue]
  "组件标签"
  tags: [String]
  "组件模版"
  template: String
  "组件类型"
  type: ComponentType
  "全部版本"
  versions: [ComponentVersion]
}

type ComponentConfigurate {
  "渲染组件"
  id: ID
  "组件配置数据"
  props: JSON
  "模版"
  template: String
}

type ComponentConfiguration {
  "渲染组件"
  id: ID
  "可访问的权限"
  permissions: [String]
  "组件配置数据"
  props: JSON
  "路由配置"
  routeWrapper: ComponentConfigurationWrapper
  "模版"
  template: String
}

type ComponentConfigurationWrapper {
  "渲染组件"
  id: ID
  "组件配置数据"
  props: JSON
  "模版"
  template: String
}

type ComponentProperty {
  "默认值"
  defaultValue: JSON
  "引用枚举"
  enumeration: Enumeration
  "分组"
  group: String
  "显示名称"
  label: String
  "是否为多项"
  multiple: Boolean
  "字段名"
  name: String
  "数据类型"
  type: ComponentPropertyType
}

type ComponentPropertyValue {
  key: String
  props: JSON
}

type ComponentVersion {
  "简介"
  description: String
  id: ID
  "组件变量"
  props: [ComponentProperty]
  "组件模版"
  template: String
  "版本"
  version: String
}

type Configuration {
  "顔色"
  colour: String
}

type ConfigurationProperties {
  item: [ConfigurationProperties]
  label: String
  name: String
  type: String
}

type CongressMeeting {
  "会议申请日期"
  applyDate(format: String): Date
  "会议申请人"
  applyPerson: OrgEmployee
  "主席团人数"
  chairmanNumber: Int
  "主席团人数签到"
  chairmanSingIn(stage: Int): Int
  "当前节点的职工代表人数"
  currentDeputyNum(
    "当前节点步骤id"
    stage: Int
  ): Int
  "正式代表人数"
  deputyNumber: Int
  "会议截至日期"
  endDate(format: String): Date
  "一个小组"
  group(groupId: Int, stage: Int): [MeetingGroup]
  "小组信息"
  groups(groupId: Int, stage: Int): [MeetingGroup]
  "会议主持人（多个时以逗号隔开）"
  host: String
  "主键id"
  id: ID
  "是否是列席代表"
  identity(
    "人员id"
    uid: ID
  ): Boolean
  "是否已测评（true/false）"
  isEvaluation(uid: ID): Boolean
  "是否是小组人员"
  isGroup(empId: ID): Boolean
  "是否当前角色"
  isRole(empId: ID, roleCode: [String]): Boolean
  "是否签到"
  isSingIn(stage: Int, uid: ID): Boolean
  "当前用户所在小组"
  myGroup(uid: ID): MeetingGroup
  "会议名称"
  name: String
  "当前节点列席人数"
  nonvotingDelegateNum(stage: Int): Int
  "列席人数"
  nonvotingDelegateSum: Int
  "其他小组信息"
  otherGroups(uid: ID): [MeetingGroup]
  "问卷信息"
  questionnaire: Questionnaire
  "会议角色用户信息"
  roleUsers: [MeetingRole]
  "签到人数"
  singInNumber(stage: Int): Int
  "当前阶段"
  stage: ID
  "会议开始日期"
  startDate: String
  "会议状态(暂存、进行中、完成)"
  status: MeetingStauts
  "当前步骤"
  step: ID
  type: String
  "用户对应的权限"
  userAuths(uid: ID): [ID]
  "用户对应的角色"
  userRoles(uid: ID): [MeetingRole]
  "是否投票完成"
  voteAll(empId: ID, topicId: [ID]): Boolean
}

type CongressMeetingConnection {
  "当前页"
  currentPage: Int
  edges: [CongressMeetingEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type CongressMeetingEdge {
  cursor: String
  node: CongressMeeting
}

type ConstraintStructure {
  "列名"
  columnName: String
  "约束类型"
  constrainType: String
  "约束名称"
  constraintName: String
  "参考列"
  referenceColumn: String
  "参考数据库"
  referenceSchemaName: String
  "参考表"
  referenceTable: String
  "tableName"
  tableName: String
}

type Consultants {
  "顾问类型"
  consultantsType: String
  "联系方式"
  contactDetails: String
  "创建时间"
  createTime: Date
  "部门ID"
  departmentId: String
  id: ID
  "是否删除 （0，1）否，是"
  isDelete: Boolean
  "名称"
  name: String
}

type Contact {
  "人员"
  employee: Employee
  "该人员的定点联系群组"
  group: EmployeeGroup
  "id"
  id: ID
}

"合同"
type Contract {
  "委托机构"
  agency: String
  "银行账号"
  bankAccount: String
  "验收日期"
  checkTime(format: String): Date
  "合同金额"
  contractMoney: Float
  "开户银行"
  depositBank: String
  "附件列表"
  files: [FileObject]
  "医院"
  hospital: String
  "合同id"
  id: ID
  "合同名称"
  name: String
  "申请付款日期"
  paymentTime(format: String): Date
  "付款列表"
  payments: [Payment]
  "项目"
  project: BudgetProject
  "政府采购编号"
  purSn: String
  "单位自筹金额"
  selfMoney: Float
  "合同签订时间"
  signTime(format: String): Date
  "合同编号"
  sn: String
  "采购形式"
  style: String
  "供应商名称"
  supplier: String
  "招标时间"
  tenderingTime(format: String): Date
  "采购方式"
  type: String
  "招标完成金额"
  zbmoney: Int
}

type ContractClause {
  id: ID
  "条款名称"
  name: String
  "付款金额"
  payAmount: Float!
  "付款描述"
  payDesc: String
  "付款进度"
  payRate: String
  "比例"
  scale: String
}

type ContractConnection {
  currentPage: Int
  edges: [ContractEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

type ContractEdge {
  cursor: String
  node: ProjectContract
}

type Course {
  "评论"
  comments(filter: CommentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): CommentConnection
  "包含学生必修课和学习记录"
  compulsoryCourseAndRecords(filter: LearnerFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): CourseConnection
  "互动控制"
  controlType: JSON
  "课程封面"
  cover: FileObject
  "时长"
  duration: Float
  """
     必修人
   scopes(filter: LearnerScopeFilter,page: Int = 1, pageSize: Int = 15, orderBy: OrderBy): LearnerScopeConnection
  是否加入
  """
  hasJoined(employee: ID!): Boolean
  id: ID
  "课程描述"
  introduction: String
  "学习人"
  learnerScopes: [LearnerScope]
  "课程学习人"
  learners(filter: LearnerFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LearnerConnection
  "学习进度"
  learningProgress(learner: ID): String
  "学习记录"
  lessonRecords(filter: LessonRecordFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LessonRecordConnection
  "课程章节"
  lessons: [Lesson]
  "课程名"
  name: String
  "提醒类型"
  notificationType: JSON
  "发布时间"
  publishDate(format: String): Date
  "发布人"
  publishUser: Employee
  "置顶"
  top: Boolean
  "累计学习时间"
  totalLearningTime(employee: ID!): Float
  "课程类型"
  type(
    "数据字典类型"
    type: String
  ): String
  "课程更新时间"
  updatedAt(format: String): Date
}

type CourseConnection {
  "当前页"
  currentPage: Int
  edges: [CourseEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type CourseEdge {
  cursor: String
  node: Course
}

type Criterion {
  match: FilteringMatch
  "匹配项的完整名称， 如 name, contains 等"
  name: String
  options: [Option]
}

type DAnonymousLetterDataSource {
  id: ID
}

type DBConfiguration {
  "数据库类型"
  dataBaseType: String
  "数据库名称"
  databaseName: String
  "密码"
  password: String
  "端口"
  port: String
  "连接地址"
  url: String
  "用户名"
  userName: String
}

type DBSchema {
  "目录名称"
  catalogName: String
  "默认编码设置名称"
  defaultCharacterSetName: String
  "默认核对名称"
  defaultCollationName: String
  "数据库名称"
  schemaName: String
  "sql路径"
  sqlPath: String
  "schema对应的表集"
  tables: [TableStructure]
}

"返回党办数据"
type DBWithTeamLeaderData {
  "部门id"
  deptId: ID
  "部门name"
  deptName: String
  "带组组长人数"
  leaderNumber: Int
}

type DataDictionary {
  "下级数据字典"
  children: [DataDictionary]
  "代码"
  code: String
  "描述"
  description: String
  id: String
  "名称"
  name(format: PinyinFormat): String
  "上级数据字典"
  parent: DataDictionary
  "配置类型"
  type: DataDictionaryType
}

"数据字典类型"
type DataDictionaryType {
  "下级书籍字典分类"
  children: [DataDictionaryType]
  code: String
  "数据字典"
  dataDictionaries: [DataDictionary]
  "描述"
  description: String
  "代码"
  id: ID
  "层级"
  layer: Int
  "名称"
  name: String
  "上级数据字典分类"
  parent: DataDictionaryType
  "路径"
  path: String
}

type DataExpansion {
  executeStatement: String
  id: ID
  interfaceName: String
  label: String
  model: Model
  name: String
  primary: ID
  type: InterfaceTypeEnum
}

type DataLog {
  id: ID
  modelKey: String
  modelName: String
  operate: DataLogOperateType
  operateTime: Date
}

type DataSource {
  configuration: DataSourceConfiguration
  "数据"
  data: JSON
  description: String
  "id"
  id: String
  name: String
  objects(filter: [SchemaObjectFilter], schema: ID!): [JSON]
  schemas: [DataSourceISchema]
  "数据类型"
  type: String
}

type DataSourceConfig {
  "数据库名称"
  databaseName: String
  "代码（唯一标识）"
  dbCode: String
  "数据库驱动"
  driven: String
  "主键id"
  id: ID
  "用户密码"
  password: String
  "数据库路径"
  url: String
  "用户名"
  userName: String
}

"数据源对应的表的信息"
type DataSourceISchema {
  "字段"
  fields: [DataSourceSchemaField]
  id: ID
  "Schema 名称"
  name: String
  "唯一标示字段， 一般指 ID"
  primaryKey: DataSourceSchemaField
}

"数据源对应的表的字段信息"
type DataSourceSchemaField {
  id: String
  name: String
  type: String
}

"汇总统计数据对象"
type DataStatistics {
  "结余资金"
  balanceAmount: Float
  "合同金额"
  contractAmount: Float
  "合同完成率"
  contractCompletionRate: Float
  "资金余额"
  fundBalance: Float
  "单位ID"
  hospital: ID
  "所属单位名称"
  name: String
  "支付完成率"
  paymentCompletionRate: Float
  "支付总额"
  paymentTotalAmount: Float
  "招标总额"
  tenderAmount: Float
  "招标完成率"
  tenderCompletionRate: Float
  "预算总额"
  totalBudgetAmount: Float
}

"汇总统计数据对象明细"
type DataStatisticsDetail {
  "结余资金"
  balanceAmount: Float
  "预算类别"
  budgetType: String
  "合同金额"
  contractAmount: Float
  "合同完成率"
  contractCompletionRate: Float
  "资金余额"
  fundBalance: Float
  "支付完成率"
  paymentCompletionRate: Float
  "支付总额"
  paymentTotalAmount: Float
  "招标总额"
  tenderAmount: Float
  "招标完成率"
  tenderCompletionRate: Float
  "预算总额"
  totalBudgetAmount: Float
}

type DataTransmission {
  "调度表达式"
  cron: String
  id: ID
  "名称"
  name: String
  "同步资源"
  resources: [DataTransmissionResource]
  "源库"
  source: DataSource
  "描述"
  status: DataTransmissionStatus
  "同步方式：手工、自动"
  syncType: String
  "目标库"
  target: DataSource
}

type DataTransmissionResource {
  mappings: [DataTransmissionResourceMapping]
  sourceFilters: [DataTransmissionResourceFilter]
  sourceSchema: String
  targetSchema: String
}

type DataTransmissionResourceFilter {
  match: String
  name: String
  value: String
}

type DataTransmissionResourceMapping {
  source: String
  target: String
}

type DataTransmissionTask {
  dataTransmission: DataTransmission
  endTime: Date
  id: ID
  lastMessage: String
  startTime: Date
  status: String
}

type DataTransmissionTaskConnection {
  "当前页"
  currentPage: Int
  edges: [DataTransmissionTaskEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DataTransmissionTaskEdge {
  cursor: String
  node: DataTransmissionTask
}

type DataTransmissionTaskLog {
  action: EntityAction
  dataTransmission: DataTransmission
  exception: String
  id: ID
  source: String
  sourceKey: String
  sourceSchema: String
  target: String
  targetKey: String
  targetSchema: String
  task: DataTransmissionTask
}

type DataTransmissionTaskLogConnection {
  "当前页"
  currentPage: Int
  edges: [DataTransmissionTaskLogEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DataTransmissionTaskLogEdge {
  cursor: String
  node: DataTransmissionTaskLog
}

type DateTimeField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue(format: String): Date
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

"API生成日志表"
type DdmApiLog {
  "API生成日志表"
  apiData: String
  "API生成日志表"
  apiType: String
  "API生成日志表"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "API生成日志表"
  creator: String
  "API生成日志表"
  id: ID
  "API生成日志表"
  model: ID
  "API生成日志表"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "API生成日志表"
  updator: String
}

"API生成日志表"
type DdmApiLogConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [DdmApiLogEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type DdmApiLogEdge {
  cursor: String
  node: DdmApiLog
}

type DealWith {
  "缓急"
  emergence: String
  "id"
  id: ID
  "pc中打开的地址"
  mainLinkFile: String
  "发起人名"
  submitPerson: String
  "发起时间"
  submitTime: String
  "标题"
  title: String
  "当前状态"
  workCurStep: String
}

"院内决策申请表"
type DecisionApply {
  "附件"
  accessory: JSON
  "院务公开内容"
  administratorPublicContent: String
  "申请人"
  applyEmployee: String
  "预算金额"
  budgetAmount: Float
  "分管领导审核情况"
  chargeLeaderAuditCondition: String
  "分管领导意见"
  chargeLeaderView: String
  "院长审核意见"
  deanAuditView: String
  "院长办公会决议内容"
  deaneryDecisionContent: String
  "部门执行情况"
  departmentExecuteCondition: String
  "主键id"
  id: ID
  "项目类型"
  itemType: String
  "主要领导审核情况"
  mainLeaderAuditCondition: String
  "主要领导意见"
  mainLeaderView: String
  "是否需要预算"
  needBudget: Boolean
  "是否上院长办公会"
  needDeanery: Boolean
  "是否需修改完善，上党委会"
  needPartyCommittee: Boolean
  "其他院领导阅件意见"
  otherLeaderReadView: String
  "党委会决议内容"
  partyCommitteeDecisionContent: String
  "党委会决议意见"
  partyCommitteeDecisionView: String
  "党务公开内容"
  partyPublicContent: String
  "党务公开形式"
  partyPublicForm: String
  "党务公开时间"
  partyPublicTime(
    format: String, 
    "入参"
    input: String
  ): Date
  "党委书记审核意见"
  partySecretaryAuditView: String
  "流程id"
  processId: ID
  "相关部门会稿意见"
  relatedDepartmentDraftView: String
  "主办部门初步意见"
  sponsorDepartmentPreliminaryView: String
  "议题审批分管领导"
  topicsApproveChargeLeader: String
}

"院内决策申请表"
type DecisionApplyConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [DecisionApplyEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type DecisionApplyEdge {
  cursor: String
  node: DecisionApply
}

type DefEmpGroup {
  "默认组信息"
  groups: GroupEmp
}

type DefUserRole {
  "id"
  id: Int
  "角色id"
  roleId: Int
  "角色和用户"
  roleUsers: MeetingRole
  "用户id"
  userId: Int
}

type DefaultFieldFeature {
  "描述"
  displayName: String!
  """
    是否策略特征
  isStrategy:Boolean
  默认字段集
  """
  fields: [ModelField]
  "名称"
  name: String!
}

type DefineEvent {
  "类名"
  className: String
  "code"
  code: String
  "事件描述"
  description: String
  "方法名"
  functionName: String
  id: ID
  "事件名称"
  name: String
  "相关参数"
  parameters: String
  "业务范围ID"
  scopeId: String
  "业务范围名称"
  scopeName: String
  "事件类型"
  type: String
}

type DefineEventConnection {
  "当前页"
  currentPage: Int
  edges: [DefineEventEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DefineEventEdge {
  cursor: String
  node: DefineEvent
}

type DefineMessage {
  id: ID
  "消息名称"
  name: String
  "消息类型"
  type: MessageType
}

type DefineMessageConnection {
  "当前页"
  currentPage: Int
  edges: [DefineMessageEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DefineMessageEdge {
  cursor: String
  node: DefineMessage
}

type DefineNotice {
  defineEvent: DefineEvent
  enabled: Boolean
  id: ID
  img: String
  messageCode: String
  name: String
  noticeTemplate: NoticeTemplate
  noticeType: NoticeType
  receiver: [String]
  title: String
}

type DefineNoticeConnection {
  "当前页"
  currentPage: Int
  edges: [DefineNoticeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DefineNoticeEdge {
  cursor: String
  node: DefineNotice
}

type DefineRemind {
  defineMessage: DefineMessage
  enabled: Boolean
  id: ID
  noticeTemplate: NoticeTemplate
  type: RemindType
}

type DefineRemindConnection {
  "当前页"
  currentPage: Int
  edges: [DefineRemindEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DefineRemindEdge {
  cursor: String
  node: DefineRemind
}

"部门"
type Department {
  "该部门包括子部门总人数"
  allEmployeesNumber(status: [String]): Int
  "部门属性"
  attribute(attributeName: String): DepartmentAttribute
  "部门属性"
  attributes: [DepartmentAttribute]
  "人员电子签名"
  autographPngs: [AutographPng]
  "下属部门"
  children: [Department]
  "部门子部门数"
  childrenCount(
    "过滤条件"
    filter: DepartmentFilter, 
    "是否深层"
    recursive: Boolean!
  ): Int
  "汇总统计"
  collect(type: String): Int
  "部门描述信息"
  description: String
  "部门人员数"
  employeeCount(
    "过滤条件"
    filter: EmployeeFilter, 
    "是否包含子部门"
    recursive: Boolean!
  ): Int
  "部门员工"
  employees: [Employee]
  "名称"
  fullName: String
  id: ID
  "是否为主部门"
  isPrimary(
    "用户ID"
    employee: ID!
  ): Boolean
  "部门包含的职务"
  jobs: [Job]
  name: String
  "组织机构"
  organization: Organization
  "上级机构"
  parent: Department
  "所有父级部门的集合"
  parents: [Department]
  "包含所有父级节点的ID"
  path: String
  "获取权限对应的用户"
  permissionToUser(key: String): User
  "被授予的权限"
  permissions(key: String): [Permission]
  "部门包含的职位"
  positions: [Position]
  "部门编码"
  sn: String
  "排序字段"
  sort: Int
  "该部门总人数"
  totalEmployeeNumber: Int
  "部门类型"
  type: DepartmentType
}

type DepartmentAttribute {
  "属性名"
  attributeName: String
  "属性值"
  attributeValue: String
  "描述"
  description: String
}

"部门类型"
type DepartmentType {
  "编码"
  code: String
  "部门类型ID"
  id: ID
  "部门类型名称"
  name: String
  "部门组织"
  organization: Organization
}

type Deployment {
  category: String
  deploymentTime: String
  id: String
  name: String
}

type DeploymentConnection {
  "当前页"
  currentPage: Int
  edges: [DeploymentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DeploymentEdge {
  cursor: String!
  node: Deployment
}

type DictionaryField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "字典"
  dictionary: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type Dingtalk {
  getUserByUnionid(unionid: String): DingtalkUser
  id: ID!
  name: String
  sns: DingtalkSocialNetworkingService
  users: [DingtalkUser]
}

type DingtalkConfiguration {
  agentId: String
  appKey: String
  appSecret: String
  corpId: String
  id: ID
}

type DingtalkDataSource {
  configuration: DingtalkConfiguration
  description: String
  id: ID
  name: String
  schemas: [DataSourceISchema]
}

type DingtalkSNSUser {
  dingId: String
  nick: String
  openid: ID
  unionid: String
  user: DingtalkUser
}

type DingtalkSocialNetworkingService {
  getUserByCode(code: String!): DingtalkSNSUser
}

type DingtalkUser {
  email: String
  extattr: DingtalkUserExtattr
  id: ID
  isAdmin: Boolean
  jobnumber: String
  mobile: String
  name: String
  "departments: [DingtalkDepartment]"
  position: String
  unionid: String
}

type DingtalkUserExtattr {
  oAAccount: String
  oAUserId: String
}

type Directory {
  "容量"
  capacity: Int
  "名称"
  name: String
  path: String
  storage: Storage
}

type DjVersion {
  "更新内容"
  content: String
  "创建时间"
  createdAt: String
  "创建人"
  creator: String
  "部署时间"
  deployTime: Date
  "主键"
  id: ID
  "排序"
  sort: Int
  "更新时间"
  updatedAt: String
  "更新人"
  updator: String
  "版本"
  version: String
}

type DjVersionConnection {
  "当前页"
  currentPage: Int
  edges: [DjVersionEdg]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DjVersionEdg {
  cursor: String
  node: DjVersion
}

type Document {
  "字段名"
  field: String
  "附件列表"
  files: [FileObject]
  "分组"
  group: DocumentGroup
  id: ID
  "字段中文名"
  title: String
}

type DocumentConnection {
  "当前页"
  currentPage: Int
  edges: [DocumentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DocumentEdge {
  cursor: String
  node: Document
}

type DocumentGroup {
  id: String
  "分组名"
  name: String
}

type DocumentPerson {
  employee: OrgEmployee
}

type Domain {
  "编码"
  code: String
  id: ID
  "名称"
  name: String
}

type DomainTree {
  "显示名称"
  displayName: String
  "数据id"
  id: ID
  "业务实体"
  model: Model
  "名称"
  name: String
  "父id"
  parentId: String
  "树id"
  treeId: String
  "数据类型：CATALOG,TABLE"
  type: NodeType
}

type DownloadLink {
  "过期日期"
  expires: Date
  id: ID
  "文件名"
  name: String
  "下载路径"
  path: String
  "用户ID"
  uid: String
}

type Draft {
  department: String
  sendAutomatically: Boolean
  sendTime: Date
  sender: String
  title: String
}

type DraftConnection {
  "当前页"
  currentPage: Int
  edges: [DraftEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type DraftEdge {
  cursor: String!
  node: Draft
}

type EZOfficeConfiguration {
  fixedStr: String
  host: String
  id: ID
  key: String
  serviceKey: String
}

type EZOfficeDataSource {
  configuration: EZOfficeConfiguration
  description: String
  id: ID
  name: String
  schemas: [DataSourceISchema]
}

type Email {
  email: String
  id: ID
  status: EmailStatus
}

type EmpCaptain {
  "id"
  id: ID
  "组长名称"
  name: String
}

type EmpRole {
  "角色代码"
  code: String
  "是否启用（true/false 默认为true）"
  enabled: Boolean
  "主键id"
  id: ID
  "角色名称"
  name: String
  "组织id"
  orgId: ID
  "角色描述"
  roleDesc: String
}

type Employee {
  "通过 Label 获取地址"
  address(label: String): Address
  "全部地址"
  addresses: [EmployeeAddress]
  "人员电子签名"
  autographPngs: [AutographPng]
  "头像"
  avatar: FileObject
  birthday: Date
  creator: String
  "当前部门"
  currentDepartment(
    "组织id"
    organization: ID
  ): Department
  "当前组织"
  currentPosition(
    "组织id"
    organization: ID
  ): Position
  "所属部门"
  departments(organization: ID, type: [String]): [Department]
  "所属主部门"
  deptName: String
  email(label: String): Email
  "全部邮箱"
  emails: [EmployeeEmail]
  "扩展字段"
  employeeFieldValues: [EmployeeFieldValue]
  englishname: String
  "所属群组"
  groups: [EmployeeGroup]
  id: ID
  "工号"
  jobNumber: String
  links: [EmployeeLink]
  "移动电话"
  mobile: String
  name: String
  "通过 Label 获取手机"
  phone(label: String): Phone
  "全部电话"
  phones: [EmployeePhone]
  "员工的职位"
  positions(departmentId: ID, organization: ID): [Position]
  "主部门"
  primaryDepartment(organization: ID!): Department
  "主职位"
  primaryPosition(organization: ID!): Position
  "性别"
  sex: Sex
  starredArticleChannels(starType: ArticleChannelStarType!): [ArticleChannel]
  starredArticles(filter: ArticleFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, starType: ArticleStarType!): ArticleConnection
  "状态"
  status(organization: ID!): OrganizationEmployeeStatus
  "固定电话"
  tel: String
  "登录信息"
  user: User
}

type EmployeeAddress {
  address: Address
  id: ID
  label: String
  primary: Boolean
}

"人员表"
type EmployeeConnection {
  "当前页"
  currentPage: Int
  edges: [EmployeeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"党员发展人员信息数据概览"
type EmployeeData {
  "添加"
  add(
    "入参员工ID"
    employeeId: ID!
  ): Boolean
  "员工编号"
  id: ID
  "员工名称"
  name: String
  "职位"
  positions: [Position]
  "类型"
  type: String
}

"分页结果集"
type EmployeeEdge {
  cursor: String
  node: Employee
}

type EmployeeEmail {
  email: Email
  id: ID
  label: String
  primary: Boolean
}

type EmployeeField {
  "描述信息"
  description: String
  id: ID
  "显示名称"
  label: String
  "名称"
  name: String
  "类型"
  type: EmployeeFieldType
  "字段对应的值信息"
  values(employee: ID): [EmployeeFieldValue]
}

type EmployeeFieldGroup {
  "描述"
  description: String
  "该分组下的字段"
  fields: [EmployeeField]
  id: ID
  "字段分组名称"
  name: String
  "状态"
  status: FieldStatus
}

type EmployeeFieldValue {
  "描述"
  description: String
  "员工"
  employee: Employee
  "对应的字段"
  employeeField: String
  id: ID
  "类型"
  type: EmployeeFieldType
  "字段值"
  value: String
}

type EmployeeGroup {
  "描述"
  description: String
  "群组人员数"
  employeeCount: Int
  "群组下的成员"
  employees: [Employee]
  "是否启用"
  enabled: Boolean
  "ID"
  id: ID
  "群组名称"
  name: String
  "用户组范围"
  scope: EmployeeGroupScope
}

type EmployeeGroupScope {
  "范围ID"
  id: String
  "范围名称"
  name: String
  "所属组织"
  organization: Organization
}

type EmployeeLink {
  employee: Employee
  linkId: String
}

type EmployeePhone {
  id: ID
  label: String
  phone: Phone
  primary: Boolean
}

type EmployeePosition {
  department: Department
  employee: Employee
  id: Int
  organization: Organization
  position: Position
  "是否主部门"
  primary: Boolean
}

"分页查询预算员工"
type EmployeePositionConnection {
  "当前页"
  currentPage: Int
  edges: [EmployeePositionEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type EmployeePositionEdge {
  cursor: String!
  node: EmployeePosition
}

type EmployeeRoleGroups {
  birthday: Date
  creator: String
  email: String
  englishname: String
  id: Int
  name: String
  roleList(meetId: ID): [EmpRole]
}

type Emps {
  "组员"
  employee: EmpCaptain
}

"实体与用户中间表"
type Entityuser {
  created_at: DateTime!
  employee: Employee
  entity_id: String
  entity_type: String
  id: ID!
  recipientId: String
  updated_at: DateTime!
  user: String
  user_role: ENUM_ENTITYUSER_USER_ROLE
  user_type: String
}

type EntityuserAggregator {
  count: Int
  totalCount: Int
}

type EntityuserConnection {
  currentPage: Int
  edges: [EntityuserEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Entityuser]
}

type EntityuserEdge {
  cursor: String
  node: Entityuser
}

type Enumeration {
  "枚举描述"
  description: String
  "显示名称"
  displayName: String
  id: ID
  "是否系统枚举"
  isSystem: Boolean
  name: String
  values: [EnumerationValue]
}

type EnumerationField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: EnumerationValue
  "描述"
  description: String
  "显示名称"
  displayName: String
  "枚举"
  enumeration: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type EnumerationValue {
  "显示名称"
  displayName: String
  id: ID
  name: String
  value: String
}

type EvaluationIndex {
  "主键id"
  id: ID
  "指标名称"
  name: String
}

type EvaluationResult {
  "测评结果"
  details: [MeetingEvaluationDetail]
  "测评类型名称"
  name: String
}

type EvaluationStatistics {
  "评测类别集合"
  itemTypes: [ItemType]
  "评测类别满意度集合"
  satisfieds: [TypeSatisfied]
}

"考试表"
type Exam {
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  examCondition: [ExamCondition]
  examPersons: [Entityuser]
  examType: ENUM_EXAM_EXAMTYPE
  exam_end_time: DateTime
  exam_length: Int
  exam_name: String
  exam_start_time: DateTime
  examandpapers(limit: Int, sort: String, start: Int, where: JSON): [Examandpaper]
  icon: String
  id: ID!
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  messagePush: [String]
  message_push: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass_mark: String
  releaseState: String
  releasestate: String
  score: String
  sheets(limit: Int, sort: String, start: Int, where: JSON): [Sheet]
  updated_at: DateTime!
  userExamState: ExamState
}

type ExamAggregator {
  avg: ExamAggregatorAvg
  count: Int
  max: ExamAggregatorMax
  min: ExamAggregatorMin
  sum: ExamAggregatorSum
  totalCount: Int
}

type ExamAggregatorAvg {
  exam_length: Float
}

type ExamAggregatorMax {
  exam_length: Float
}

type ExamAggregatorMin {
  exam_length: Float
}

type ExamAggregatorSum {
  exam_length: Float
}

type ExamCondition {
  examState: String
  pass: Boolean
  score: String
  user: String
}

type ExamConnection {
  currentPage: Int
  edges: [ExamEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Exam]
}

type ExamEdge {
  cursor: String
  node: Exam
}

"考试与试卷中间表"
type Examandpaper {
  created_at: DateTime!
  exam: Exam
  examinationpaper: Examinationpaper
  id: ID!
  updated_at: DateTime!
}

type ExamandpaperAggregator {
  count: Int
  totalCount: Int
}

type ExamandpaperConnection {
  currentPage: Int
  edges: [ExamandpaperEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Examandpaper]
}

type ExamandpaperEdge {
  cursor: String
  node: Examandpaper
}

"考试统计表"
type Examcondition {
  code: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  exam_state: String
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass: Boolean
  reate_departid: String
  score: String
  updated_at: DateTime!
  user: String
}

type ExamconditionAggregator {
  count: Int
  totalCount: Int
}

type ExamconditionConnection {
  currentPage: Int
  edges: [ExamconditionEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Examcondition]
}

type ExamconditionEdge {
  cursor: String
  node: Examcondition
}

"试卷表"
type Examinationpaper {
  choiceNumber: Long
  created_at: DateTime!
  examandpapers(limit: Int, sort: String, start: Int, where: JSON): [Examandpaper]
  exampapertitles(limit: Int, sort: String, start: Int, where: JSON): [Exampapertitle]
  examtopics(limit: Int, sort: String, start: Int, where: JSON): [Examtopic]
  id: ID!
  judgeNumber: Long
  multiselectNumber: Long
  name: String
  paperType: ENUM_EXAMINATIONPAPER_PAPERTYPE
  scoreAll: String
  sheets(limit: Int, sort: String, start: Int, where: JSON): [Sheet]
  totalNumber: Long
  totalScore: String
  updated_at: DateTime!
}

type ExaminationpaperAggregator {
  count: Int
  totalCount: Int
}

type ExaminationpaperConnection {
  currentPage: Int
  edges: [ExaminationpaperEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Examinationpaper]
}

type ExaminationpaperEdge {
  cursor: String
  node: Examinationpaper
}

"试卷与题目中间表"
type Exampapertitle {
  created_at: DateTime!
  examinationpaper: Examinationpaper
  id: ID!
  questionbank: Questionbank
  questiontopic: Questiontopic
  updated_at: DateTime!
}

type ExampapertitleAggregator {
  count: Int
  totalCount: Int
}

type ExampapertitleConnection {
  currentPage: Int
  edges: [ExampapertitleEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Exampapertitle]
}

type ExampapertitleEdge {
  cursor: String
  node: Exampapertitle
}

"考试报表"
type Examreport {
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  exam_number: Int
  finished: Boolean
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  updated_at: DateTime!
  user: String
}

type ExamreportAggregator {
  avg: ExamreportAggregatorAvg
  count: Int
  max: ExamreportAggregatorMax
  min: ExamreportAggregatorMin
  sum: ExamreportAggregatorSum
  totalCount: Int
}

type ExamreportAggregatorAvg {
  exam_number: Float
}

type ExamreportAggregatorMax {
  exam_number: Float
}

type ExamreportAggregatorMin {
  exam_number: Float
}

type ExamreportAggregatorSum {
  exam_number: Float
}

type ExamreportConnection {
  currentPage: Int
  edges: [ExamreportEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Examreport]
}

type ExamreportEdge {
  cursor: String
  node: Examreport
}

"试卷与题型中间表"
type Examtopic {
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  each_question_score: String
  examinationpaper: Examinationpaper
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  remind_type: ENUM_EXAMTOPIC_REMIND_TYPE
  updated_at: DateTime!
}

type ExamtopicAggregator {
  count: Int
  totalCount: Int
}

type ExamtopicConnection {
  currentPage: Int
  edges: [ExamtopicEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Examtopic]
}

type ExamtopicEdge {
  cursor: String
  node: Examtopic
}

"ExcelEmployee"
type ExcelEmployee {
  "createTime"
  createTime: Date
  "employee"
  employee: Employee
  "excelUrl"
  excelUrl: String
  "id"
  id: ID
  "isUpdate"
  isUpdate: Boolean
}

"ExcelEmployeeConnection"
type ExcelEmployeeConnection {
  "currentPage"
  currentPage: Int
  "edges"
  edges: [ExcelEmployeeEdge]
  "pageInfo"
  pageInfo: PageInfo
  "pageSize"
  pageSize: Int
  "totalCount"
  totalCount: Int
  "totalPage"
  totalPage: Int
}

"ExcelEmployeeEdge"
type ExcelEmployeeEdge {
  "cursor"
  cursor: String
  "node"
  node: ExcelEmployee
}

"专家信息"
type Expert {
  "开户行"
  bank: String
  "银行卡号"
  bankCard: String
  "办公地点"
  company: String
  "专家论证场次信息"
  expertScenes: [ExpertScene]
  id: ID
  "身份证号"
  idCard: String
  "专业"
  major: String
  "姓名"
  name: String
  "电话"
  phone: String
  "职位"
  position: String
  "职称"
  title: String
}

"分页查询专家信息"
type ExpertConnection {
  "当前页"
  currentPage: Int
  edges: [ExpertEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"进口论证审批详情"
type ExpertDetail {
  "批准数量"
  approved: String
  "论证意见"
  argumentation: String
  "专家意见"
  expertOpinion: String
  "主键"
  id: ID
  "进口论证id"
  importArgumentId: ID
  "批准单价"
  unitPrice: String
}

"分页查询专家信息"
type ExpertEdge {
  cursor: String!
  node: Expert
}

"专家论证场次信息"
type ExpertScene {
  "创建日期"
  createdAt(format: String): Date
  "专家信息"
  experts: [Expert]
  id: ID
  "场次名称"
  name: String
  "进口论证场次"
  projectDetaileds: [BudgetProjectDetailed]
  "场次日期"
  sceneDate(format: String): Date
  "场次年度"
  year: String
}

"分页查询专家论证场次"
type ExpertSceneConnection {
  "当前页"
  currentPage: Int
  edges: [ExpertSceneEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ExpertSceneEdge {
  cursor: String!
  node: ExpertScene
}

"导出汇总统计数据对象"
type ExportStatisticsDetail {
  "结余资金"
  balanceAmount: Float
  "预算类别"
  budgetType: String
  "合同金额"
  contractAmount: Float
  "合同完成率"
  contractCompletionRate: Float
  "资金余额"
  fundBalance: Float
  "支付完成率"
  paymentCompletionRate: Float
  "支付总额"
  paymentTotalAmount: Float
  "招标总额"
  tenderAmount: Float
  "招标完成率"
  tenderCompletionRate: Float
  "预算总额"
  totalBudgetAmount: Float
}

"扩展字段返回属性"
type ExtendedAttributes {
  "科室"
  departments: [String]
  "岗位"
  posts: [String]
  "职称"
  titles: [String]
  "带组组长"
  withTeamLeaderName: String
}

type Field {
  "数据"
  dataSource: DataSource
  "默认值"
  defaultValue: String
  "图标"
  icon: String
  "字段"
  id: String
  "标签"
  label: String
  "名称"
  name: String
  "参数"
  params: JSON
  "提示数据"
  placeholder: String
  "只读"
  readOnly: Boolean
  "渲染器"
  renderer: JSON
  "必填"
  required: Boolean
  "类型"
  type: String
  "值"
  value: String
}

type FieldNameValue {
  "如果type是文件，则该字段取值"
  file: [FileObject]
  "字段名称"
  name: String
  "字段类型"
  type: String
  "字段值"
  value: String
}

"union FieldValueType = String | Date | Int | FileObject"
type FieldValue {
  "如果type是文件，则该字段取值"
  file: [FileObject]
  "字段名称"
  name: String
  "字段类型"
  type: String
  "字段值"
  value: String
}

type File {
  encoding: String!
  filename: String!
  id: ID!
  mimetype: String!
  "文件名称"
  name: String
  "文件路径"
  path: String
}

type FileField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

"查询器配置"
type Filter {
  id: ID
  name: String
  properties: [Property]
}

"过滤条件配置类"
type FilterConfiguration {
  dictType: DataDictionaryType
  id: ID
  joinType: String
  key: String
  matchType: MatchType
  name: String
  renderingType: String
}

type FinalAssessment {
  "评价"
  finalEvaluate: FinalEvaluate
  "ID"
  id: ID
  "占比,参数是所属支部ID"
  proportion(branch: ID!): String
  "被评测人"
  testee: Employee
}

type FlowElement {
  attributes: JSON
  documentation: String
  extensionElements: JSON
  handlingMode: HandlingMode
  id: ID
  name: String
}

type FlowableComment {
  empId: String
  fullMessage: String
  id: String
  processInstanceId: String
  taskId: String
  time: Date
  type: String
}

type Follow {
  "关注时间"
  followTime: Date
  "关注人"
  followUser: String
  id: ID
  "关注流程"
  processInstance: ProcessInstance
}

type FollowsConnection {
  "当前页"
  currentPage: Int
  edges: [FollowsEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type FollowsEdge {
  cursor: String!
  node: Follow
}

type FormField {
  id: String
  layout: LayoutDefinition
  name: String
  overrideId: Boolean
  params: JSON
  placeholder: String
  readOnly: Boolean
  required: Boolean
  type: String
  value: String
}

type FormModel {
  "业务主键id"
  businessId: ID
  "组件"
  component: String
  "表单描述"
  description: String
  "字段"
  fields: [Field]
  formData: JSON
  "表单ID"
  id: String
  "表单key"
  key: String
  "业务实体id"
  modelId: Model
  "表单名称"
  name: String
  "操作权限"
  operationPermission: [Button]
}

type FormOutcome {
  id: String
  name: String
}

type GetAllChannel {
  "栏目id"
  channelId: String
  "栏目id串"
  channelIdString: String
  "栏目等级"
  channelLevel: String
  "栏目名称"
  channelName: String
  "栏目名称串"
  channelNameString: String
  "栏目是否流程审核"
  channelNeedCheckup: String
  "是否可以新增该栏目信息"
  isCanAdd: String
}

type GetAllChannelResponse {
  infomationChannel: [GetAllChannel]
  recordCount: Int
}

type GetMailReceiveBoxListResponse {
  "总条数"
  count: Int
  items: [MailReceiveBox]
  "page:Int"
  notReadSize: Int
}

"OA门户返回节点对象"
type GetOaGatewayResponse {
  gatewayNodeList: [OaGatewayNode]
  host: String
}

"信息列表"
type GetPortalInfoListResponse {
  "信息列表"
  informations: [Information]
  "条数"
  pagerOffset: Int
}

"公文"
type GetReceiveFileBoxResponse {
  count: Int
  items: [ReceiveFileBox]
  page: Int
}

type GetRemindInfoResponse {
  "未处理的新会议通知数量"
  inviteNum: Int
  "最新公文数量"
  newInnerSendFile: Int
  "网上调查数量"
  newLookInto: Int
  "最新邮件数量"
  newMail: Int
  "未读下属汇报数量"
  newReport: Int
  "待办数量"
  waitFile: Int
  "待阅文件数量"
  waitRead: Int
}

"GhActivity"
type GhActivity {
  "所属社团"
  association: GhAssociation
  "审核人EmployeeId"
  auditEmployeeId: Int
  "审核日期"
  auditTime: String
  "所属拥有者类型（0社团，1工会）"
  belongType: Int
  "可查看规则列表"
  canLookRules: [GhActivityCanLookRule]
  "可查看用户列表"
  canLookUsers: [GhActivityCanLookUser]
  "用户是否有报名权限"
  canSignUpPermissions(employeeId: Int): Boolean
  "可报名规则列表"
  canSignUpRules: [GhActivityCanSignUpRule]
  "可报名用户列表"
  canSignUpUsers: [GhActivityCanSignUpUser]
  "活动封面图片"
  coverImages: [FileObject]
  "创建时间"
  createdAt: Date
  "创建人员工信息"
  creator: Employee
  "已报名总人数"
  currentJoinNum: Int
  "生效日期"
  effectTime: String
  id: ID
  "图片列表"
  images: [GhActivityImage]
  "说明"
  introduction: String
  "用户是否可报名(有一个场次可报名即可)"
  isCanSignUp(employeeId: Int): Boolean
  "是否可取消活动（本人创建的）"
  isCancelActivity(userId: Int): Boolean
  "是否热门"
  isHot: Boolean
  "可报名总人数"
  maxJoinNum: Int
  "名称"
  name: String
  "场次时间列表"
  places: [GhActivityPlace]
  "发布状态, 0=未发布，1=发布"
  publishStatus: Int
  "报名结束时间"
  signUpEndTime: Date
  "报名开始时间"
  signUpStartTime: Date
  "所属标签分类列表"
  signs: [GhActivitySign]
  "活动状态说明（未发布、已发布、报名中、报名截止、进行中、已结束、已取消）"
  statusInfo: String
}

"可查看规则列表"
type GhActivityCanLookRule {
  association: GhAssociation
  id: ID
  sex: String
}

"可查看用户列表"
type GhActivityCanLookUser {
  employeeId: Employee
  id: ID
}

"可报名规则列表"
type GhActivityCanSignUpRule {
  "社团"
  association: GhAssociation
  "主键"
  id: ID
  "性别, 值： male 或 female"
  sex: String
}

"GhActivityCanSignUpUser"
type GhActivityCanSignUpUser {
  employeeId: Employee
  id: ID
}

"GhActivityConnection"
type GhActivityConnection {
  currentPage: Int
  edges: [GhActivityEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"GhActivityEdge"
type GhActivityEdge {
  cursor: String
  node: GhActivity
}

"活动图片表"
type GhActivityImage {
  "活动id"
  act_id: Int
  id: ID
  "名称"
  name: String
  path: String
  "排序号"
  sort: Int
}

"活动图片表"
type GhActivityImageConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [GhActivityImageEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type GhActivityImageEdge {
  cursor: String
  node: GhActivityImage
}

"场次时间列表"
type GhActivityPlace {
  "活动时间"
  actDate: Date
  "对应活动"
  activity: GhActivity
  "活动地址"
  address: String
  currentJoinNum: Int
  "活动路线"
  driving: String
  "结束时间"
  endTime: Date
  "友情提示"
  friendlyTips: String
  id: ID
  "是否可报名"
  isCanSignUp(employeeId: Int): Boolean
  "是否可取消场次（本人创建的）"
  isCancelSession(userId: Int): Boolean
  "是否可以退出报名(前三十分钟可退出)"
  isExit(employeeId: Int): Boolean
  "是否已报名"
  isHaveSignUp(employeeId: Int): Boolean
  "限制人数"
  maxJoinNum: Int
  "名称"
  name: String
  placeUsers: [GhActivityPlaceUser]
  signInNum: Int
  signInUsers: [GhActivityPlaceSignInUser]
  "开始时间"
  startTime: Date
  validJoinNum: Int
}

"活动签到用户列表"
type GhActivityPlaceSignInUser {
  employeeId: Employee
  id: ID
  signInTime: JSON
}

"活动参加用户列表"
type GhActivityPlaceUser {
  "创建时间"
  createdAt: Date
  "创建人员工信息"
  creator: Employee
  "员工信息"
  employee: Employee
  employeeName: String
  id: ID
  remarks: String
  signUpMode: String
  signUpModeText: String
  statusText: String
}

"GhActivityPlaceUserConnection"
type GhActivityPlaceUserConnection {
  currentPage: Int
  edges: [GhActivityPlaceUserEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"GhActivityPlaceUserEdge"
type GhActivityPlaceUserEdge {
  cursor: String
  node: GhActivityPlaceUser
}

"活动标签表"
type GhActivitySign {
  activities: [GhActivity]
  "所属分类（0社团活动标签，1工会活动标签）"
  belongType: Int
  "创建时间"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "描述"
  description: String
  "主键ID"
  id: String
  "名称"
  name: String
  "排序"
  sort: Int
}

"活动标签表"
type GhActivitySignConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [GhActivitySignEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type GhActivitySignEdge {
  cursor: String
  node: GhActivitySign
}

"GhAssocPosition"
type GhAssocPosition {
  code: String
  name: String
}

"GhAssocUserConnection"
type GhAssocUserConnection {
  currentPage: Int
  edges: [GhAssocUserEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"GhAssocUserEdge"
type GhAssocUserEdge {
  cursor: String
  node: GhAssociationUser
}

"社团信息"
type GhAssociation {
  "活动列表"
  activities: [GhActivity]
  "创建时间"
  createdAt: Date
  "创建人员工信息"
  creator: Employee
  "当前社员数量"
  currentJoinNum: Int
  deleted: Boolean
  "封面图片列表"
  files: [FileObject]
  "主键id"
  id: ID
  "社团介绍"
  introduction: String
  "是否已经加入(true-已加入,false-未加入)"
  isHaveJoin(
    "当前登录人id"
    employeeId: Int!
  ): Boolean
  leaders: [GhAssociationUser]
  "最大社员数量"
  maxEmployeeNum: Int
  "社团名称"
  name: String
  "排序"
  sort: Int
  "社团状态（0禁用，1启用）"
  status: Int
  "社团规则"
  teamRules: String
  "有效社员数量"
  validJoinNum: Int
}

"社团信息"
type GhAssociationConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [GhAssociationEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type GhAssociationEdge {
  cursor: String
  node: GhAssociation
}

"社团图片表"
type GhAssociationImage {
  "社团id"
  associationId: Int
  "创建时间"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "主键id"
  id: ID
  "名称"
  name: String
  "路径"
  path: String
  "排序"
  sort: Int
}

"社团图片表"
type GhAssociationImageConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [GhAssociationImageEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type GhAssociationImageEdge {
  cursor: String
  node: GhAssociationImage
}

"GhAssociationUser"
type GhAssociationUser {
  assocWorkNo: String
  association: Association
  "创建时间"
  createdAt: Date
  "员工信息"
  employee: Employee
  employeeId: Int
  employeeName: String
  id: ID
  joinTime: JSON
  positionCode: String
  "身份名称"
  positionName: String
  remarks: String
  sex: String
}

"我的历程"
type GhEmployeeJourney {
  "历程时间"
  activityAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "创建时间"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "员工ID"
  employeeId: Int
  "主键id"
  id: ID
  "历程名称"
  name: String
  "上级历程"
  parent: Int
  "备注"
  remarks: String
}

"我的历程"
type GhEmployeeJourneyConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [GhEmployeeJourneyEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type GhEmployeeJourneyEdge {
  cursor: String
  node: GhEmployeeJourney
}

"GhEmployeeLabel"
type GhEmployeeLabel {
  "标签描述"
  description: String
  "人员关联"
  employeeLabelRelation: [GhEmployeeLabelRelation]
  "人员标签主键id"
  id: ID!
  "标签名称"
  name: String
  "状态(1启用,2禁用-表示已被删除)"
  status: Int
}

"GhEmployeeLabelConnection"
type GhEmployeeLabelConnection {
  "当前页"
  currentPage: Int
  edges: [GhEmployeeLabelEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"GhEmployeeLabelEdge"
type GhEmployeeLabelEdge {
  cursor: String
  node: GhEmployeeLabel
}

"GhEmployeeLabelRelation"
type GhEmployeeLabelRelation {
  "人员id"
  employeeId: Int
  "人员标签实体"
  employeeLabel: GhEmployeeLabel
  "人员名称"
  employeeName: String
  "id"
  id: ID
}

"标签用户查询edge"
type GhEmployeeLabelRelationEdge {
  cursor: String
  node: GhEmployeeLabelRelation
}

"标签用户查询接口类"
type GhEmployeeLabelUserConnection {
  currentPage: Int
  edges: [GhEmployeeLabelRelationEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"GhEquipment"
type GhEquipment {
  "活动封面图片"
  coverImage: [FileObject]
  "创建日期"
  createdAt: Date
  "创建者"
  creator: Employee
  equipmentReserves: [GhEquipmentReserve]
  equipmentType: GhEquipmentType
  "id"
  id: Int
  moduleCode: String
  "器材名称"
  name: String
  num: Int
  remarks: String
  "器材状态"
  status: Int
  "修改日期"
  updatedAt: Date
  "修改者"
  updator: Employee
}

"GhEquipmentConnection"
type GhEquipmentConnection {
  currentPage: Int
  edges: [GhEquipmentEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"GhEquipmentEdge"
type GhEquipmentEdge {
  cursor: String
  node: GhEquipment
}

"GhEquipmentReserve"
type GhEquipmentReserve {
  "创建日期"
  createdAt: Date
  "创建者"
  creator: Employee
  "预定结束时间"
  endTime: Date
  "设备id"
  equipment: GhEquipment
  "预订人姓名"
  equipmentName: String
  "id"
  id: Int
  "预定手机号"
  mobile: String
  "备注"
  remarks: String
  "预定日期"
  reserveDate: Date
  "预定开始时间"
  startTime: Date
  "预定状态"
  status: Int
  "修改日期"
  updatedAt: Date
  "修改人"
  updator: Employee
}

"GhEquipmentReserveConnection"
type GhEquipmentReserveConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [GhEquipmentReserveEdge]
  "pageInfo"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"GhEquipmentReserveEdge"
type GhEquipmentReserveEdge {
  "cursor"
  cursor: String
  "node"
  node: GhEquipmentReserve
}

"GhEquipmentType"
type GhEquipmentType {
  id: Int
  "类型编号"
  moduleCode: String
  name: String
  parent: Int
  "排序"
  sort: Int
  "器材类型状态"
  status: Int
}

"GhEquipmentTypeConnection"
type GhEquipmentTypeConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [GhEquipmentTypeEdge]
  "pageInfo"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"GhEquipmentTypeEdge"
type GhEquipmentTypeEdge {
  "cursor"
  cursor: String
  "node"
  node: GhEquipmentType
}

"授予权限"
type GrantPermission {
  "返回部门"
  department(type: GrantPermissionReturnObjectType!): Department
  "返回员工"
  employee(type: GrantPermissionReturnObjectType!): Employee
  "权限"
  permission: Permission
  "资源ID"
  resource: String
  "资源类型"
  resourceType: String
  "授权权限类型"
  securityType: SecurityType
  "返回用户"
  user(type: GrantPermissionReturnObjectType!): User
  "权限值"
  value: String
}

type GraphQLApi {
  "接口"
  interface: GraphQLFieldDefinition
  "请求方式"
  method: String
}

type GraphQLArgumentDefinition {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  id: ID
  "名称"
  name: String
  "类型"
  type: GraphQLFieldTypeDefinition
}

type GraphQLDelegate {
  id: ID
  name: String
  rule: GraphQLDelegateRule
  service: Service
  type: GraphQLDelegateType
}

type GraphQLDelegateDataLoader {
  "请求参数"
  loadKey: String
  "请求方法"
  query: String
}

type GraphQLDelegateRule {
  "例如 id = obj.employee.id"
  args: [String]
  "合并加载"
  dataLoader: GraphQLDelegateDataLoader
  "请求方式"
  method: RestfulMethod
  "请求参数"
  parameter: JSON
  "Resultful的请求路径"
  path: String
  "例如 Query.employee"
  query: String
  "例如 !obj.employee"
  reject: [String]
}

type GraphQLDirective {
  "def参数"
  defaults: GraphQLParamsDefinition
  "前置拦截"
  frontIntercept: GraphQLDelegate
  "id"
  id: String
  "属性入参"
  inputs: GraphQLFormatsDefinition
  "名称"
  name: String
  "返回函数"
  overrides: [String]
  "后置拦截"
  postIntercept: GraphQLDelegate
}

type GraphQLDirectiveDefinition {
  formats: [GraphQLFormatsDefinition]
  frontIntercept: GraphQLDelegate
  id: String
  name: String
  overrides: [String]
  params: [GraphQLParamsDefinition]
  postIntercept: GraphQLDelegate
}

type GraphQLEnumeration {
  deprecated: Boolean
  description: String
  id: ID
  name: String
}

type GraphQLFieldDefinition {
  "参数"
  arguments: [GraphQLArgumentDefinition]
  "默认值"
  defaultValue: String
  "委托 / 代理"
  delegate: GraphQLDelegate
  "不推荐使用"
  deprecated: Boolean
  "接口描述"
  description: String
  "所属业务域"
  domain: String
  id: ID
  "类型"
  kind: GraphQLTypeDefinition
  "接口名"
  name: String
  "标记"
  tags: [String]
  "显示名称(中文)"
  title: String
  "返回类型 / 字段类型"
  type: GraphQLFieldTypeDefinition
}

type GraphQLFieldTypeDefinition {
  id: ID
  "数据类型"
  kind: GraphQLTypeDefinition
  "是否返回为集合"
  repeated: Boolean
  "是否必输"
  required: Boolean
}

type GraphQLFormatsDefinition {
  "描述"
  description: String
  "名称"
  name: String
  "类型"
  type: String
}

type GraphQLParamsDefinition {
  "名称"
  name: String
  "值"
  value: String
}

type GraphQLSchema {
  api(domain: String, id: ID!): GraphQLFieldDefinition
  apis: [GraphQLFieldDefinition]
  description: String
  id: ID
  mutations(domain: String): [GraphQLFieldDefinition]
  name: String
  queries(domain: String): [GraphQLFieldDefinition]
  schema: String
  type(id: ID!): GraphQLTypeDefinition
  types(filter: GraphQLTypeDefinitionFilter): [GraphQLTypeDefinition]
}

type GraphQLTypeDefinition {
  description: String
  domain: String
  "枚举类型包含的项目"
  enumerations: [GraphQLEnumeration]
  "普通类型包含的字段"
  fileds: [GraphQLFieldDefinition]
  id: ID
  "继承的类型"
  interfaces: [GraphQLTypeDefinition]
  kind: GraphQLKind
  name: String
  title: String
  "联合类型包含的类型"
  types: [GraphQLTypeDefinition]
}

type GroupEmp {
  "组长"
  employee: EmpCaptain
  "组员"
  employees: [Emps]
  "组名"
  name: String
}

type GroupEmployee {
  "是否出席（true/false）"
  attend: Boolean
  "小组成员"
  employee: OrgEmployee
  "职务描述(组长、组员)"
  jobDesc: JobType
  "角色信息"
  roleList: [Role]
}

type GuideToCheck {
  "年龄"
  age: Int
  "体检编号"
  bhkcod: String
  "体检日期"
  bhkdat: String
  "体检状态"
  cmptag: String
  "单位"
  crptnam: String
  "部门"
  dpt: String
  "姓名"
  empnam: String
  "身份证号"
  idc: String
  "序号"
  idx: Int
  "方案名称"
  itmprj: String
  "联系电话"
  lnktel: String
  "性别"
  sex: String
  "人员档案编号"
  tbr: String
  tjItems: [TjItem]
  "工号"
  wrknum: String
}

type GuideToCheckResult {
  code: Int
  data: GuideToCheck
}

type HandlingTips {
  content: String
  title: String
}

"历史记录"
type HistoryRecord {
  "审批时间"
  applyDate: String
  "审批人"
  applyName: String
  "审批结果"
  applyResult: String
  "审批节点"
  applystep: String
  id: ID
}

type IconConfigurate {
  "颜色"
  color: String
  "主题"
  theme: String
  "类型"
  type: String
}

"进口论证"
type ImportArgument {
  "申请文件文号"
  applySn: String
  "申请文件名称"
  applyfile: String
  "创建时间"
  createdAt: String
  "进口论证审批详情"
  expertDetail: ExpertDetail
  id: ID
  "申请单位"
  organization: String
  "项目"
  project: BudgetProject
  "申请理由"
  reason: String
  "自筹资金"
  selfMoney: Float
  "阶段"
  stage: Stage
  "阶段方案"
  stageScheme: StageWorkflowScheme
  "流程实体"
  stageWorkflowInstance: StageWorkflowInstance
  "状态"
  status: ImportArg
  "步骤"
  step: StageWorkflowStep
  "申请人联系方式"
  tel: String
  "类别"
  type: String
}

"进口论证返回数据"
type ImportArgumentConnection {
  "当前页"
  currentPage: Int
  edges: [ImportArgumentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ImportArgumentDaily {
  id: ID
  importArguments: ImportArgument
  state: String
}

type ImportArgumentDailyConnection {
  "当前页"
  currentPage: Int
  edges: [ImportArgumentDailyEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ImportArgumentDailyEdge {
  cursor: String
  node: ImportArgumentDaily
}

type ImportArgumentEdge {
  cursor: String
  node: ImportArgument
}

type IncomeBudgetDetailStatistics {
  "同比（本年度）"
  currCompareWith: Float
  "本年度已执行数"
  currExecAmount: Float
  "本年度预算数"
  currYearBudgetAmount: Float
  "预计执行金额"
  expectExecAmount: Float
  "执行率"
  implementationRate: Float
  "同比（下一年）"
  nextCompareWith: Float
  "下一年预算数"
  nextYearBudgetAmount: Float
  "科目名称"
  subjectName: String
  "预算科室"
  unit: Department
}

type IndexType {
  "主键id"
  id: ID
  "测评项"
  indices: [EvaluationIndex]
  "测评项类型名称"
  name: String
}

"信息"
type Information {
  "所属栏目id"
  channelId: String
  "所属栏目名称"
  channelName: String
  "评论次数"
  informationCommonNum: String
  "信息Id"
  informationId: String
  "发布组织"
  informationIssueOrg: String
  "发布时间"
  informationIssueTime: String
  "信息发布人"
  informationIssuer: String
  "点击次数"
  informationKits: String
  "最后修改时间"
  informationModifyTime: String
  "信息摘要"
  informationSummary: String
  "信息标题"
  informationTitle: String
  "图片列表"
  picList: PicList
  "标题在首页是否显示红色"
  titleColor: String
}

type InformationGetMobile {
  "栏目名"
  channelName: String
  "信息ID"
  id: ID
  imagPath: String
  "0已读1未读"
  isRead: String
  "发布时间"
  issueTime: String
  "发布人"
  issuer: String
  "点击次数"
  kits: String
  "最后修改时间"
  modifyTime: String
  "摘要"
  summary: String
  "信息标题"
  title: String
}

"信息"
type InformationGetMobileListResponse {
  items: [InformationGetMobile]
  pager0ffset: Int
  recordCount: Int
}

type IntegralApply {
  applyTime: Date
  description: String
  "文件"
  files: [FileObject]
  id: ID
  integralRegulation: IntegralRegulation
  name: String
  status: String
}

type IntegralApplyConnection {
  currentPage: Int
  edges: [IntegralApplyEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

type IntegralApplyEdge {
  cursor: String
  node: IntegralApply
}

type IntegralCategory {
  "创建日期"
  createdAt: Date
  id: ID
  name: String
  "修改时间"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
}

type IntegralCategoryConnection {
  "当前页"
  currentPage: Int
  edges: [IntegralCategoryEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IntegralCategoryEdge {
  cursor: String
  node: IntegralCategory
}

type IntegralEmployee {
  currentIntegral: Int
  department: String
  formId: Int
  id: ID
  lastId: Int
  lastName: String
  name: String
  nextId: Int
  nextName: String
}

type IntegralEmployeeConnection {
  "当前页"
  currentPage: Int
  edges: [IntegralEmployeeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IntegralEmployeeEdge {
  cursor: String
  node: IntegralEmployee
}

type IntegralEmployeeRule {
  id: ID
  integralRegulation: IntegralRegulation
  score: Int
  times: Int
}

type IntegralEmployeeRuleConnection {
  "当前页"
  currentPage: Int
  edges: [IntegralEmployeeRuleEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IntegralEmployeeRuleEdge {
  cursor: String
  node: IntegralEmployeeRule
}

type IntegralExamineForm {
  attends: [String]
  baseScore: Int
  id: ID
  name: String
  total: Int
  year: Int
}

type IntegralExamineFormConnection {
  "当前页"
  currentPage: Int
  edges: [IntegralExamineFormEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IntegralExamineFormEdge {
  cursor: String
  node: IntegralExamineForm
}

type IntegralRegulation {
  "描述"
  description: String
  id: ID
  "积分类别"
  integralCategory: IntegralCategory
  "得分下限"
  lowerLimit: Int
  "规则名称"
  name: String
  "单次得分"
  onceScore: Int
  "次数达到上限时"
  overFlow: OverFlow
  "记分方式"
  scoreWay: ScoreWay
  "获取次数上限"
  timeLimit: Int
  "得分上限"
  upperLimit: Int
}

type IntegralRegulationConnection {
  "当前页"
  currentPage: Int
  edges: [IntegralRegulationEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IntegralRegulationEdge {
  cursor: String
  node: IntegralRegulation
}

type Interaction {
  "创建时间"
  createdTime: Date
  "ID"
  id: ID
  "范围"
  scopes: [String]
  "标题"
  title: String
  "链接"
  url: String
}

type InteractionConnection {
  "当前页"
  currentPage: Int
  edges: [InteractionEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type InteractionEdge {
  cursor: String
  node: Interaction
}

"任务主表"
type Issue {
  "地址"
  address: String
  "可分配用户"
  assignableUsers: [Employee]
  "经办人"
  assignee: Employee
  "附件"
  attachments: [FileObject]
  "任务注释列表"
  comments: [IssueComment]
  "描述"
  description: String
  """
    评论
  commentValue:IssueFieldValueComment
   字段配置方案
  """
  fieldValue: [IssueFieldValues]
  "任务ID"
  id: ID
  "关联的知识库"
  knowledges: [Knowledge]
  "任务对应的当前操作"
  operations(user: ID): [IssueOperation]
  "任务优先级"
  priority: IssuePriority
  "任务优先级为紧急时，填写紧急情况备注信息"
  priorityUrgentRemark: String
  "进度"
  progress: Int
  "相关项目"
  project: Project
  "备注"
  remarks: String
  "维修图片"
  repairFiles: [FileObject]
  "发起人"
  reporter: Employee
  "要求完成时间"
  requestCompletionTime(format: String): Date
  "任务结果"
  resolution: IssueResolution
  "影响范围"
  scope: IssueScopeEnum
  "工单编号"
  sn: String
  "是否可开启任务"
  startIssueFlag: Boolean
  "发起时间"
  startTime(format: String): Date
  "状态"
  status: IssueStatus
  "概要"
  summary: String
  "任务实际跟踪列表"
  timeTrack: IssueTimeTrack
  "问题类型"
  type: IssueType
  "任务日志列表"
  workLogs: [IssueWorkLog]
}

type IssueAllocationRule {
  "分级类别"
  code: IssueAllocationRuleEnum
  "规则"
  contion: IssueCondition
  "规则描述"
  description: String
  "是否启用"
  enabled: Boolean
  id: ID
  "规则条件"
  issueCondition: String
  "规则优先级"
  priority: Int
  "选择人员类型"
  selectionScope: String
}

"自动评价规则"
type IssueAppraisalRule {
  "评价内容详情"
  appraisalRuleInfo: IssueAppraisalRuleInfo
  "是否启用"
  enabled: Boolean
  id: ID
  "对应状态"
  issueStatus: IssueStatus
  "时长（分钟）"
  times: ID
}

"自动评价详情"
type IssueAppraisalRuleInfo {
  "描述"
  description: String
  id: ID
  "排序"
  sort: String
}

"任务注释"
type IssueComment {
  "附件"
  attachments: [FileObject]
  "注释内容"
  content: String
  "注释时间"
  contentDate(format: String): Date
  "ID"
  id: ID
  "任务id"
  issue: Issue
}

type IssueCondition {
  "规则对应 ID"
  id: ID
  "规则名称"
  name: String
}

"分页查询任务"
type IssueConnection {
  "当前页"
  currentPage: Int
  edges: [IssueEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页查询任务"
type IssueEdge {
  cursor: String
  node: Issue
}

type IssueFaultDescription {
  "概要"
  description: String
  "是否启用"
  enabled: Boolean
  id: ID
  issueType: IssueType
}

"分页查询描述"
type IssueFaultDescriptionConnection {
  "当前页"
  currentPage: Int
  edges: [IssueFaultDescriptionEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页查询任务"
type IssueFaultDescriptionEdge {
  cursor: String
  node: IssueFaultDescription
}

type IssueField {
  id: ID
  label: String
  name: String
  renderer: String
  type: FieldType
}

type IssueFieldConfiguration {
  fields: [IssueFieldConfigurationItem]
  id: ID
  "名称"
  name: String
}

"字段配置"
type IssueFieldConfigurationItem {
  id: ID
  "中文名称"
  label: String
  "名称"
  name: String
  "排序"
  order: Int
  "渲染器"
  renderer: String
  "是否必填"
  required: Boolean
  "字段类型"
  type: FieldType
}

"字段配置方案"
type IssueFieldConfigurationScheme {
  "字段配置信息"
  fieldConfigurations: [IssueTypeWithFieldConfiguration]
  id: ID
  "名称"
  name: String
}

type IssueFieldValues {
  id: ID
  issue: Issue
  issueField: IssueField
  value: String
}

type IssueGrantPermission {
  id: ID
  "权限"
  permission: IssuePermission
  "人类型"
  securityType: IssueSecurityType
  "对应的用户或者其他"
  value: String
}

type IssueMessageRule {
  "消息规则内容"
  content: String
  "信息规则描述"
  description: String
  "是否开启"
  enabled: Boolean
  "信息规则ID"
  id: ID
  "是否循环提醒"
  messageLoop: Boolean
  "提醒人类型"
  messageRuleEum: MessageRuleEum
  "消息规则名称"
  name: String
  "循环提醒间隔时长"
  time: ID
}

"问题对应的操作"
type IssueOperation {
  "该操作是否有某个权限"
  grants: Boolean
  "操作 ID"
  id: ID
  "操作名称"
  name: String
  "操作对应的界面"
  screen: IssueScreen
}

"权限"
type IssuePermission {
  "描述"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "类型"
  type: String
}

"权限方案"
type IssuePermissionScheme {
  "描述"
  description: String
  "权限"
  grants: [IssueGrantPermission]
  "主键id"
  id: ID
  "名称"
  name: String
}

"任务优先级"
type IssuePriority {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "任务优先级icon"
  icon: String
  id: ID
  "优先级名称"
  name: String
  "优先级排序"
  sort: Int
}

"分页查询优先级"
type IssuePriorityConnection {
  "当前页"
  currentPage: Int
  edges: [IssuePriorityEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IssuePriorityEdge {
  cursor: String
  node: IssuePriority
}

type IssueProject {
  "创建问题时的默认类型"
  defaultIssueType: IssueType
  "创建问题时的默认优先级"
  defaultPriority: IssuePriority
  "字段配置方案"
  fieldConfigurationScheme: IssueFieldConfigurationScheme
  id: ID
  "派单规则"
  issueAllocationRules: [IssueAllocationRule]
  "自动评价规则"
  issueAppraisalRules: [IssueAppraisalRule]
  "问题类型"
  issueTypeCategories: [IssueTypeCategory]
  "问题类型方案"
  issueTypeScheme: IssueTypeScheme
  "可用的问题类型"
  issueTypes: [IssueType]
  "权限方案"
  permissionScheme: IssuePermissionScheme
  "可用的优先级"
  priorities: [IssuePriority]
  "解决结果列表"
  resolutions: [IssueResolution]
  "项目所有可选状态"
  statuses: [IssueStatus]
  "工作流方案"
  workflowScheme: IssueWorkflowScheme
}

"项目关联"
type IssueProjectLink {
  id: ID
  "关联使用的ID"
  linkId: String
  "关联项目"
  project: IssueProject
  "关联项目类型"
  type: IssueProjectLinkType
}

"任务结果"
type IssueResolution {
  "任务结果描述"
  description: String
  "任务结果ID"
  id: ID!
  "任务结果名称"
  name: String
  "任务结果排序"
  sort: Int
}

"页面"
type IssueScreen {
  "描述"
  description: String
  "主键id"
  id: ID
  "名称"
  name: String
  "域"
  tabs: [IssueScreenTabPane]
  "标题"
  title: String
}

"域"
type IssueScreenTabPane {
  "Tab 里的字段"
  fields: [IssueFieldConfigurationItem]
  id: ID
  "名称"
  name: String
}

"状态"
type IssueStatus {
  "阶段"
  category: IssueStatusCategory
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "主键"
  id: ID!
  "名称"
  name: String
  "排序"
  sort: Int
}

"分页查询状态"
type IssueStatusConnection {
  "当前页"
  currentPage: Int
  edges: [IssueStatusEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type IssueStatusEdge {
  cursor: String
  node: IssueStatus
}

type IssueTimeTrack {
  "预计时长"
  estimated: Int
  "记录时长"
  logged: Int
  "剩余时长"
  remaining: Int
}

"任务类型"
type IssueType {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "主键"
  id: ID
  "故障描述"
  issueFaultDescription: [IssueFaultDescription]
  "名称"
  name: String
}

type IssueTypeCategory {
  "字节点"
  children: [IssueTypeCategory]
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "ID"
  id: ID
  "任务分类"
  issueTypes: [IssueType]
  "任务类型名称"
  name: String
  "父节点"
  parent: IssueTypeCategory
}

"任务类型方案"
type IssueTypeScheme {
  "默认问题类型"
  defaultType: IssueType
  "描述"
  description: String
  "主键"
  id: ID
  issueTypeCategories: [IssueTypeCategory]
  "名称"
  name: String
  "任务类型"
  types: [IssueType]
}

type IssueTypeWithFieldConfiguration {
  fieldConfiguration: IssueFieldConfiguration
  type: IssueType
}

"任务日志"
type IssueWorkLog {
  "附件"
  attachments: [FileObject]
  "日志内容"
  content: String
  "ID"
  id: ID
  "任务"
  issue: Issue
  "填写时间"
  logTime(format: String): Date
}

"工作流"
type IssueWorkflow {
  "描述"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "步骤"
  steps: [IssueWorkflowStep]
}

"工作流方案"
type IssueWorkflowScheme {
  "介绍"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "工作流"
  workflows: [IssueWorkflowSchemeItem]
}

type IssueWorkflowSchemeItem {
  id: ID
  issueTypes: [IssueType]
  workflow: IssueWorkflow
}

"工作流步骤"
type IssueWorkflowStep {
  "主键"
  id: ID
  "名称"
  name: String
  "状态"
  state: IssueStatus
  "跳转到下一个步骤"
  transitions: [IssueWorkflowStepTransition]
}

"跳转到下一个步骤"
type IssueWorkflowStepTransition {
  "描述"
  description: String
  "下一个步骤"
  destination: IssueWorkflowStep
  id: ID
  "名称"
  name: String
  "界面"
  view: IssueScreen
}

type Item {
  "评测项名称"
  name: String
  "评测项结果集合"
  results: [Result]
}

type ItemType {
  "评测项集合"
  items: [Item]
  "评测类别名称"
  name: String
}

"职务"
type Job {
  "职务描述信息"
  description: String
  "职务"
  id: ID
  "职务名称"
  name: String
}

type JoinConditionInfo {
  joinPersons: [JoinPersons]
  leaveNumber: Long
  leavePerson: [Joincondition]
  notArriveNumber: Long
  notArrivePerson: [Entityuser]
  shouldJoinNumber: Long
  shouldJoinPerson: [Entityuser]
  signNumber: Long
  signPerson: [Entityuser]
  signScale: String
}

type JoinPersons {
  joinCondition: Joincondition
  state: String
  user: Entityuser
}

"参与情况表"
type Joincondition {
  attend_state: String
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  department: Department
  describe: String
  entity_id: String
  entity_name: String
  entity_type: String
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  note: String
  orgid: String
  referred: Entityuser
  referred_person: String
  sign_state: ENUM_JOINCONDITION_SIGN_STATE
  sign_time: String
  transfer: Entityuser
  transfer_person: String
  updated_at: DateTime!
  user: String
}

type JoinconditionAggregator {
  count: Int
  totalCount: Int
}

type JoinconditionConnection {
  currentPage: Int
  edges: [JoinconditionEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Joincondition]
}

type JoinconditionEdge {
  cursor: String
  node: Joincondition
}

type JsonField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: JSON
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type Knowledge {
  "知识库评论数"
  commentCount: Int
  "知识库评论"
  comments: [KnowledgeComment]
  id: ID
  "问题描述"
  problemDesc: String
  "被引用数"
  referenceCount: Int
  "解决方法"
  solveMethod: String
  "标题"
  title: String!
  "类型"
  types: [KnowledgeType]
}

type KnowledgeComment {
  "评论人信息"
  commentPerson: Employee
  "评论内容"
  content: String!
  "评论日期"
  createdAt(format: String): Date
  "主键id"
  id: ID!
}

type KnowledgeConnection {
  "当前页"
  currentPage: Int
  edges: [KnowledgeEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type KnowledgeEdge {
  cursor: String
  node: Knowledge
}

type KnowledgeType {
  id: ID
  "对应的子分类"
  knowledgeTypes: [KnowledgeType]
  "分类层级"
  level: String
  "分类名称"
  name: String
  "父级分类"
  parent: KnowledgeType
}

type LayoutDefinition {
  row: Int
}

"班组学习记录"
type LearnRecord {
  "出席率"
  attendance: Int
  "发起人"
  creator: Employee
  "学习记录文件"
  files: [FileObject]
  "主键"
  id: ID
  "学习要求"
  learnRequirement: String
  "学习主题"
  learnTheme: LearnTheme
  "学习时间"
  learnTime: Date
  "主题名称"
  name: String
  "签到成员"
  signMember: [Employee]
  "班组"
  team: Team
  "是否上传"
  uploadState: Boolean
}

type LearnRecordConnection {
  "当前页"
  currentPage: Int
  edges: [LearnRecordEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type LearnRecordEdge {
  cursor: String
  node: LearnRecord
}

"学习主题"
type LearnTheme {
  "相关附件"
  files: [FileObject]
  "主键"
  id: ID
  "学习记录"
  learnRecords(filter: LearnRecordFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LearnRecordConnection
  "学习要求"
  learnRequirement: String
  "学习时间"
  learnTime: Date
  "主题名称"
  name: String
  "消息提醒"
  remind: Boolean
  "状态"
  state: LearnState
  "上传数量"
  uploadNumber: Int
}

type LearnThemeConnection {
  "当前页"
  currentPage: Int
  edges: [LearnThemeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type LearnThemeEdge {
  cursor: String
  node: LearnTheme
}

type Learner {
  "课程"
  course: Course
  "订阅人关联的用户"
  employee: Employee
  id: ID
  "最后学习时间"
  lastStudyTime(format: String, page: Int = 1, pageSize: Int = 15): Date
  "是否学习完成"
  learningProgress: Int
  "学习时长"
  lengthStudy: Float
  "学习者类型"
  type: LearnerType
}

type LearnerConnection {
  "当前页"
  currentPage: Int
  edges: [LearnerEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type LearnerEdge {
  cursor: String
  node: Learner
}

type LearnerScope {
  "课程"
  course: Course
  "学习人"
  employee: Employee
  id: ID
  "最后学习时间"
  lastStudyTime(format: String, page: Int = 1, pageSize: Int = 15): Date
  "是否学习完成"
  learningProgress: Int
  "学习时长"
  lengthStudy: Float
  "作用范围"
  scope: String
}

type Leavings {
  context: String
  id: ID
  isRead: Boolean
  originator: String
  processInstanceId: String
  receiver: String
  sendTime: Date
  taskId: String
  title: String
  type: LeavingTypeEnum
}

type LeavingsConnection {
  "当前页"
  currentPage: Int
  edges: [LeavingsEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type LeavingsEdge {
  cursor: String!
  node: Leavings
}

type Lesson {
  articleId: ID
  "章节文件"
  attachments: [FileObject]
  "章节类型"
  category: ArticleCategory
  "栏目"
  channels: [ArticleChannel]
  "内容"
  content: String
  "课程"
  course: Course
  id: ID
  "章节时长(通过课程的总时间取平均值)"
  lessonDuration: Float
  "章节的进度"
  lessonProgress(employee: ID!): Float
  "章节类型"
  lessonType: LessonType
  "标题"
  title: String
}

type LessonRecord {
  course: Course
  id: ID
  learner: Learner
  lesson: Lesson
  lessonLearningProgress: Int
  lessonScheduleType: LessonScheduleType
}

type LessonRecordConnection {
  "当前页"
  currentPage: Int
  edges: [LessonRecordEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type LessonRecordEdge {
  cursor: String
  node: LessonRecord
}

type LogData {
  code: String
  data: String
  id: ID
}

type LogResponse {
  commitId: String
  committer: String
  date: Date
  logDataList: [LogData]
  message: String
  tagName: String
}

"登录用户对象"
type LoginUser {
  "权限"
  authoritys: [String]
  "头像"
  avatar: String
  "主部门"
  currentDepartment(organization: ID!): Department
  "主部门"
  currentPosition(organization: ID!): Position
  "部门"
  departments(organization: ID): [Department]
  "邮箱"
  email: String
  "组名"
  group: String
  "工号"
  jobNumber: String
  "名称"
  name: String
  "权限"
  permissions: [GrantPermission]
  "电话"
  phone: String
  "职务"
  positions(department: ID, organization: ID): [Position]
  "角色"
  roles: [Role]
  "签名"
  signature: String
  "称号"
  title: String
  "token"
  token: String
  "用户类型"
  type: String
  "用户ID"
  uid(type: IdType): String
}

type MSResponse {
  "消息提示"
  message: String
  "true/false"
  result: String
}

type MailReceiveBox {
  "邮件id"
  id: ID
  "发件人Id"
  mailuserid: String
  "是否未读1是0否"
  notRead: String
  "发件人部门"
  orgName: String
  "发送时间"
  postTime(format: String): Date
  "发件人姓名"
  postUserName: String
  "主题"
  subject: String
}

type Manager {
  "生日"
  birthday: String
  "主键id"
  id: ID
  "工号"
  jobNumber: String
  "移动电话"
  mobile: String
  "名称"
  name: String
  "固定电话"
  tel: String
}

"项目代码管理"
type Mange {
  "地址"
  address: String
  "创建日期"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "开发语言"
  developmentLanguage: String
  "主键id"
  id: ID
  "修改人"
  modifier: String
  "名称"
  name: String
  "负责人"
  personCharge: String
  "产品"
  product: String
  "项目类型"
  projectType: ProjectType
  "修改日期"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "修改人"
  updator: String
}

"项目代码管理"
type MangeConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [MangeEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type MangeEdge {
  cursor: String
  node: Mange
}

"会议"
type Meeting {
  apply: Boolean
  apply_number_limit: Int
  attendMeetings: [Entityuser]
  attendStatus(who: ID!): Joincondition
  budget_amount: Int
  cancel_reason: String
  checkInPersons: [Entityuser]
  created_at: DateTime!
  createdepartment: String
  creator: String
  cycle_meeting: Boolean
  department: Department
  end_date: DateTime
  focus: String
  haveSummary: Boolean
  id: ID!
  identity(who: ID!): [String]
  instruction: String
  interactive_control: JSON
  issuer: String
  jionConditions: JoinConditionInfo
  meetingCreator: Entityuser
  meeting_end_time: DateTime
  meeting_place: String
  meeting_start_time: DateTime
  meetingnotices(limit: Int, sort: String, start: Int, where: JSON): [Meetingnotice]
  meetingreserves(limit: Int, sort: String, start: Int, where: JSON): [Meetingreserve]
  meetingtypes(limit: Int, sort: String, start: Int, where: JSON): [Meetingtype]
  meetingvotes: [Meetingvote]
  messagePush: [String]
  message_push: String
  modify_departid: String
  name: String
  need_meeting: Boolean
  presenters: [Entityuser]
  qr_code: String
  relateAccessorys: [Relatedaccessory]
  remark: String
  remind: String
  remindSpecificTime: DateTime
  repeat_period: String
  repeat_type: String
  replace_participant: Boolean
  service: String
  signSpecificEndTime: DateTime
  signSpecificStartTime: DateTime
  sign_time_require: String
  sign_way: String
  summaryPersons: [Entityuser]
  summarys: [Summarybrief]
  updated_at: DateTime!
}

"会议议程"
type MeetingAgenda {
  "会议结束时间"
  endDate: Date
  "主键id"
  id: ID
  "是否默认"
  isDefault: Boolean
  "会议id"
  meetingId: ID
  "步骤id"
  stageId: ID
  "步骤name"
  stageName: ID
  "会议开始时间"
  startDate: Date
}

type MeetingAggregator {
  avg: MeetingAggregatorAvg
  count: Int
  max: MeetingAggregatorMax
  min: MeetingAggregatorMin
  sum: MeetingAggregatorSum
  totalCount: Int
}

type MeetingAggregatorAvg {
  apply_number_limit: Float
  budget_amount: Float
}

type MeetingAggregatorMax {
  apply_number_limit: Float
  budget_amount: Float
}

type MeetingAggregatorMin {
  apply_number_limit: Float
  budget_amount: Float
}

type MeetingAggregatorSum {
  apply_number_limit: Float
  budget_amount: Float
}

type MeetingConnection {
  currentPage: Int
  edges: [MeetingEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meeting]
}

type MeetingDocument {
  "创建时间"
  createdAt(format: String): Date
  "会议文档"
  files: [FileObject]
  "主键id"
  id: ID
  "会议信息"
  meeting: CongressMeeting
  "文档对应的查看人"
  persons: [DocumentPerson]
  "文档标题"
  title: String
}

type MeetingDocumentConnection {
  "当前页"
  currentPage: Int
  edges: [MeetingDocumentEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type MeetingDocumentEdge {
  cursor: String
  node: MeetingDocument
}

type MeetingEdge {
  cursor: String
  node: Meeting
}

type MeetingEvaluation {
  "测评日期"
  evaluationDate: Date
  "测评人"
  evaluationPerson: OrgEmployee
  "主键id"
  id: ID
  "会议id"
  meeting: CongressMeeting
  "测评结果"
  results: [EvaluationResult]
}

type MeetingEvaluationDetail {
  "测评项"
  index: EvaluationIndex
  "指标测评结果（满意：SATISFIED  较满意：GOOD  基本满意：BASICALLY_SATISFIED 不满意：UNSATISFACTORY）"
  result: EvaluationStatus
}

type MeetingGroup {
  "小组组长"
  employee: OrgEmployee
  "小组人员信息"
  employees: [GroupEmployee]
  "主键id"
  id: ID
  "所属会议"
  meeting: CongressMeeting
  "小组名称"
  name: String
  "小组组长角色"
  roles(
    "会议id"
    meetingId: ID
  ): [Role]
}

type MeetingPerson {
  "会议参与人"
  user: Employee
  "用户id"
  userId: Int
}

"会议录播主表"
type MeetingRecorded {
  "播放量"
  amount: Int
  "上传时间"
  createTime: Date
  "会议录播id"
  id: ID
  "可查看人员"
  lookAuthority: JSON
  "会议实体"
  meeting: CongressMeeting
  "议程id"
  stageId: Int
  "视频id"
  videoPath: FileObject
  "标题"
  videoTitle: String
}

"分页返回实体"
type MeetingRecordedConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [MeetingRecordedEdge]
  "页信息"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页封装实体"
type MeetingRecordedEdge {
  "cursor"
  cursor: String
  "node"
  node: MeetingRecorded
}

type MeetingRole {
  "权限信息"
  authInfo: String
  "角色对应的权限"
  auths: [RoleAuth]
  "角色代码"
  code: String
  "是否启用（true/false 默认为true）"
  enabled: Boolean
  "主键id"
  id: ID
  "角色名称"
  name: String
  "角色描述"
  roleDesc: String
  "角色人员"
  useres: [Employee]
  "用户信息"
  users: [OrgEmployee]
}

type MeetingRoleConnection {
  "当前页"
  currentPage: Int
  edges: [MeetingRoleEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type MeetingRoleEdge {
  cursor: String
  node: MeetingRole
}

type MeetingTopic {
  "创建方式"
  createType: MeetingTopicCreateType
  "议题讨论信息"
  discusses: [TopicDiscuss]
  "附件信息"
  files: [FileObject]
  "主键id"
  id: ID!
  "是否允许删除（true/false）"
  isDelete: Boolean
  "判断当前人是否发表意见"
  isGiveAnOpinion(scene: DiscussScene, uid: ID): Boolean
  "是否总结（true/false）"
  isTopicSummary(uid: ID): Boolean
  "是否已投票（true/false）"
  isVote(uid: ID): Boolean
  "议题名称"
  name: String!
  "步骤id"
  step: ID
  "是否需要表决投票"
  voteEnabled: Boolean
  "投票结果"
  voteResult(uid: ID): VoteType
}

type MeetingTypeSecurity {
  "默认规则 count"
  count(entity: ID): Int
  "描述"
  description: String
  "Id"
  id: ID
  "上级会议类型"
  pType: String
  "规则"
  rules: [Rule]
  "可同时召开类型"
  scopes: [MeetingTypeSecurity]
  "会议类型code"
  type: String
  "会议类型名"
  typeName: String
}

"会议通知"
type Meetingnotice {
  created_at: DateTime!
  dispose_way: String
  id: ID!
  meeting: Meeting
  notice_create_time: DateTime
  updated_at: DateTime!
  user: String
}

type MeetingnoticeAggregator {
  count: Int
  totalCount: Int
}

type MeetingnoticeConnection {
  currentPage: Int
  edges: [MeetingnoticeEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingnotice]
}

type MeetingnoticeEdge {
  cursor: String
  node: Meetingnotice
}

"会议室预定表"
type Meetingreserve {
  created_at: DateTime!
  id: ID!
  meeting: Meeting
  meetingroom: Meetingroom
  reserve_time: DateTime
  reserve_type: String
  updated_at: DateTime!
}

type MeetingreserveAggregator {
  count: Int
  totalCount: Int
}

type MeetingreserveConnection {
  currentPage: Int
  edges: [MeetingreserveEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingreserve]
}

type MeetingreserveEdge {
  cursor: String
  node: Meetingreserve
}

"会议室"
type Meetingroom {
  applicants: [Entityuser]
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  device_configuration: JSON
  head_portrait: String
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  max_seat_number: Int
  meetingReserves: [Meetingreserve]
  meetingreserves(limit: Int, sort: String, start: Int, where: JSON): [Meetingreserve]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  open_end_time: DateTime
  open_start_time: DateTime
  orgid: String
  place: String
  seat_number: Int
  state: String
  type: String
  updated_at: DateTime!
}

type MeetingroomAggregator {
  avg: MeetingroomAggregatorAvg
  count: Int
  max: MeetingroomAggregatorMax
  min: MeetingroomAggregatorMin
  sum: MeetingroomAggregatorSum
  totalCount: Int
}

type MeetingroomAggregatorAvg {
  max_seat_number: Float
  seat_number: Float
}

type MeetingroomAggregatorMax {
  max_seat_number: Float
  seat_number: Float
}

type MeetingroomAggregatorMin {
  max_seat_number: Float
  seat_number: Float
}

type MeetingroomAggregatorSum {
  max_seat_number: Float
  seat_number: Float
}

type MeetingroomConnection {
  currentPage: Int
  edges: [MeetingroomEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingroom]
}

type MeetingroomEdge {
  cursor: String
  node: Meetingroom
}

type MeetingsConnection {
  currentPage: Int
  edges: [MeetingsEdge]
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

type MeetingsEdge {
  node: Meeting
}

"会议与会议类型中间表"
type Meetingtype {
  created_at: DateTime!
  id: ID!
  meeting: Meeting
  meetingIsType: String
  name: DataDictionary
  updated_at: DateTime!
}

type MeetingtypeAggregator {
  count: Int
  totalCount: Int
}

type MeetingtypeConnection {
  currentPage: Int
  edges: [MeetingtypeEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingtype]
}

type MeetingtypeEdge {
  cursor: String
  node: Meetingtype
}

"投票"
type Meetingvote {
  anonymity: Boolean
  created_at: DateTime!
  end_time: DateTime
  entity_id: String
  entity_type: String
  id: ID!
  isVote(user: String): ENUM_MEETINGVOTEDETAIL_VOTE_STATE
  meetingvotedetails(limit: Int, sort: String, start: Int, where: JSON): [Meetingvotedetail]
  optionNumber: JSON
  optionNumberAll: [Long]
  options(user: String): [Voteoption]
  pollIssuer: String
  pollIssuerPerson: Entityuser
  start_time: DateTime
  updated_at: DateTime!
  vote: String
  vote_account: String
  vote_type: String
  waiver: Boolean
}

type MeetingvoteAggregator {
  count: Int
  totalCount: Int
}

type MeetingvoteConnection {
  currentPage: Int
  edges: [MeetingvoteEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingvote]
}

type MeetingvoteEdge {
  cursor: String
  node: Meetingvote
}

"投票详情"
type Meetingvotedetail {
  created_at: DateTime!
  id: ID!
  meetingvote: Meetingvote
  updated_at: DateTime!
  user: String
  user_type: String
  vote_state: ENUM_MEETINGVOTEDETAIL_VOTE_STATE
  voteoptions(limit: Int, sort: String, start: Int, where: JSON): [Voteoption]
}

type MeetingvotedetailAggregator {
  count: Int
  totalCount: Int
}

type MeetingvotedetailConnection {
  currentPage: Int
  edges: [MeetingvotedetailEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Meetingvotedetail]
}

type MeetingvotedetailEdge {
  cursor: String
  node: Meetingvotedetail
}

type Message {
  content: String
  defineMessage: DefineMessage
  defineNoticeId: ID
  id: ID
  sendTime: Date
  title: String
}

type MessageConfig {
  "内容"
  content: String
  "提醒所对应的阶段"
  promptStage: Int
  "提醒所对应的步骤"
  promptStep: Int
}

type Meta {
  description: String
  title: String
}

type Microapp {
  appDesc: String
  appIcon: String
  appStatus: String
  homepageLink: String
  name: String
  ompLink: String
  pcHomepageLink: String
}

"移动端：履职记录（平均，积分sum）"
type MobileArchive {
  "平均数"
  avgScore: String
  currentScore: Int
  details: [MobileArchiveDetail]
}

"移动端：履职记录详细"
type MobileArchiveDetail {
  createTime: Date
  eachScore: Int
  operatingName: String
}

type Model {
  "实体扩展条件"
  apis(types: [InterfaceTypeEnum]): [ModelInterface]
  "SQL拼接条件集"
  conditions: [BusinessCondition]
  "实体扩展条件"
  dataExpansions: [DataExpansion]
  "数据源"
  dataSource: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "对应的业务域"
  domain: Domain
  "业务域ID集"
  domains: [ID]
  "字段特征"
  features: [String]
  "业务实体列集"
  fields: [ModelField]
  "实体字段过滤条件"
  filters: [ModelFieldFilter]
  "主键id"
  id: ID
  "是否创建API"
  isCreateAPI: Boolean
  "是否同步"
  isSync: Boolean
  "系统预设，不允许修改"
  isSystem: Boolean
  "名称"
  name: String
  "业务模型选项"
  option: ModelOption
  "状态"
  status: ModelStatus
}

type ModelConnection {
  "当前页"
  currentPage: Int
  edges: [ModelEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ModelEdge {
  cursor: String
  node: Model
}

type ModelExpansionConnection {
  "当前页"
  currentPage: Int
  edges: [ModelExpansionEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ModelExpansionEdge {
  cursor: String
  node: DataExpansion
}

type ModelFieldFilter {
  "连接符"
  connector: String
  "字段名称"
  field: String
  "sql语句"
  filterSql: String
  "主键ID"
  id: ID
  "是否多条件"
  isMulti: Boolean
}

type ModelFiledType {
  "颜色"
  color: String
  "图标编码"
  icon: String
  "主键id"
  id: ID
  "名称"
  name: String
}

type ModelInterface {
  executeStatement: String
  "接口字段"
  fields(
    "入参或返回参数"
    parameterType: ParameterType!, 
    "属性"
    path: String
  ): JSON
  id: ID
  interfaceId: ID
  model: Model
  name: String
  type: InterfaceTypeEnum
}

type ModelInterfaceConnection {
  "当前页"
  currentPage: Int
  edges: [ModelInterfaceEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ModelInterfaceEdge {
  cursor: String
  node: ModelInterface
}

type ModelLog {
  "操作日志"
  createdAt: Date
  "操作人"
  creator: OperationEmployee
  "描述"
  description: String
  "描述"
  operateDesc: String
}

type ModelOption {
  "数据库表名称"
  databaseTableName: String
}

type ModelVersion {
  "提交ID"
  commitId: String
  "版本号"
  version: String
}

type Motion {
  "流程审批内容"
  contents: [WorkflowContent]
  "科室"
  department: Department
  id: ID
  "是否隐藏提案人(true/false)"
  isHideMotionPerson: Boolean
  "是否隐藏附议人(true/false)"
  isHideSeconder: Boolean
  "提案日期"
  motionDate(format: String): Date
  "提案意见"
  motionOpinion: String
  "提案人"
  motionPerson: OrgEmployee
  "提案编号"
  number: String
  "节点信息"
  opinion: [Opinion]
  "是否公开（true/false）"
  publiced: Boolean
  "查看人"
  ranges: [MotionRange]
  "提案缘由"
  reason: String
  "收回日期"
  recoverDate(format: String): Date
  "要求复议人数"
  seconderNumber: Int
  "提案复议人"
  seconders: [MotionSeconder]
  "流程阶段"
  stage: Int
  "提案状态"
  status: MotionStatus
  "流程节点"
  step: Int
  "提案标题"
  title: String
  "提案类别"
  type: String
  "流程节点"
  workflowNode: String
}

type MotionConnection {
  "当前页"
  currentPage: Int
  edges: [MotionEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type MotionEdge {
  cursor: String
  node: Motion
}

type MotionRange {
  "查看人"
  viewPeople: OrgEmployee
}

type MotionSeconder {
  "复议人"
  seconder: OrgEmployee
}

type MotionType {
  "是否启用"
  enabled: Boolean
  id: ID
  "类型名称"
  name: String
  "要求复议人数"
  number: Int
}

type MotionTypeConnection {
  "当前页"
  currentPage: Int
  edges: [MotionTypeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type MotionTypeEdge {
  cursor: String
  node: MotionType
}

type Mutation {
  "编制任务下发"
  BudgetPlanningIssued(input: BudgetPlanningInput): Boolean
  "加签减签"
  addAndDeleteSignature(input: SignatureInput!): Boolean
  """
     向群组中添加成员
  addEmployeeToGroup(employee: ID!, group: ID!): Boolean
   向群组中添加成员
  """
  addEmployeeToGroup(employee: [ID]!, group: ID!): Boolean
  "增加文件下载次数"
  addFileDownloadTimes(where: ID!): Boolean
  "新增"
  addPartyEvaluate(input: PartyEvaluatesCreateInput): PartyEvaluate
  addStar(
    "将星星添加到的位置(比如文章等)"
    galaxy: String!, 
    "类型，可用的 StarType 可用通过 starTypes 查看"
    starType: ID!, 
    "用户"
    uid: ID!
  ): Star
  "按类目批量增加下载次数"
  addTagDownloadTimes(where: ID!): Boolean
  "阅件已读"
  alreadyRead(input: [ID]!): Boolean
  "审批提交 id为审批流的id,  project的id，为预算拆分的id   step为驳回到具体某一步的id  action为操作的id"
  approvalAction(action: ID!, departmentId: ID!, id: ID!, project: ID!, step: ID, userId: ID, values: [PartyFeldValueInput]): StageWorkflowInstance
  "批量审批接口提交  userId---当前登录用户的id，action---操作的id，departmentId---部门ID"
  approvalActionAll(approvals: [ApprovalActionInput], departmentId: ID!, userId: ID, values: [PartyFeldValueInput]): [StageWorkflowInstance]
  "进口论证流程审批提交id为审批流的id,project的id,为预算拆分的id,step为驳回到具体某一步的id,action为操作的id"
  approvalImportArgument(
    "操作的id"
    action: ID!, 
    "部门id"
    departmentId: ID!, 
    "审批流的id"
    id: ID!, 
    "进口论证的id"
    project: ID!, 
    "步骤id"
    step: ID!, 
    "用户的id"
    userId: ID!, 
    "自定义字段的值"
    values: [PartyFeldValueInput]
  ): ImportArgument
  "进口论证流程批量审批"
  approvalImportArgumentAll(
    "审批参数"
    approvals: [ApprovalActionInput], 
    "部门id"
    departmentId: ID!, 
    "用户的id"
    userId: ID!, 
    "自定义字段的值"
    values: [PartyFeldValueInput]
  ): [StageWorkflowInstance]
  "付款流程审批提交id为审批流的id,project的id,为预算拆分的id,step为驳回到具体某一步的id,action为操作的id"
  approvalPayment(
    "操作的id"
    action: ID!, 
    "部门id"
    departmentId: ID!, 
    "审批流的id"
    id: ID!, 
    "付款的id"
    project: ID!, 
    "步骤id"
    step: ID!, 
    "用户的id"
    userId: ID!, 
    "自定义字段的值"
    values: [PartyFeldValueInput]
  ): Payment
  "付款流程批量审批"
  approvalPaymentAll(
    "审批参数"
    approvals: [ApprovalActionInput], 
    "部门id"
    departmentId: ID!, 
    "用户的id"
    userId: ID!, 
    "自定义字段的值"
    values: [PartyFeldValueInput]
  ): [StageWorkflowInstance]
  "管理员分配人员到场次，或 用户报名到场次"
  assignGhPlaceUsers(input: [GhActivityPlaceUserInput], placeId: Int!): Boolean
  "权限分配(分配对象：部门、岗位、用户)"
  assignPermissions(
    "实体类型和Ids组合（格式：type:Ids;;type:Ids）"
    entityTypeIds: String!, 
    "角色IDs（格式：可以逗号间隔）"
    permissionIds: String!
  ): Boolean
  "角色分配(分配对象：部门、组、岗位、用户)"
  assignRoles(
    "实体类型和Ids组合（格式：type:Ids;;type:Ids）"
    entityTypeIds: String!, 
    "角色IDs（格式：可以逗号间隔）"
    roleIds: String!
  ): Boolean
  "关注流程"
  attentionProcess(input: [FollowInput]!): [Follow]
  "批量更新员工的职位"
  batchUpdateEmployeePosition(employees: [ID]!, position: ID!): Boolean
  "批量新增预算"
  batchsaveBudget(budgetList: [BudgetInput], organization: ID!): BudgetExcelConnection
  "专家批量导入"
  batchsaveExpert(input: [ExpertInput]): Boolean
  "批量上传申请"
  batchsavePartApplys(depId: ID!, partyApplyslist: [PartyApplysBatchInput]): Boolean
  "将接口绑定至类型上"
  bindApi(apiType: ID!, fields: [ID]!): Boolean
  "预算拆分分步骤提交"
  budgetAction(action: ID!, project: ID!, values: [PartyFeldValueInput]): BudgetProject
  "付款流程"
  budgetPaymentAction(action: ID!, applyName: String, paymentId: ID!, values: [PartyFeldValueInput]): Payment
  cancelGhSignup(
    "员工id"
    employeeId: Int!, 
    "场次id"
    placeId: Int!
  ): Boolean
  cancelMeeting(id: ID!): Meeting
  "新增派单规则"
  careateIssueAllocationRule(input: IssueAllocationRuleInput!): IssueAllocationRule
  "将某个模块使用到应用中"
  caseUseApplication(applicationId: String!, caseId: String!, version: String!): Application
  "检查用户账号是否存在"
  checkBudgetEmployee(input: EmployeeCreateInput!): CheckEmployeeConnection
  "签收"
  claim(empId: String!, opinion: String!, processInstanceId: String!, taskId: String!): Boolean
  "点击 增加播放量"
  clickVideo(
    "输入参数"
    input: MeetingRecordedInput
  ): Int
  "复制问卷"
  cloneResearchAsk(id: Int): ResearchAsk
  "同意"
  complete(empId: String!, opinion: String!, processInstanceId: String!, taskId: String!, value: JSON): Boolean
  "批量同意"
  completeBatch(batchInput: BatchInput!, empId: String!): Boolean
  "确认付款"
  confirmPayment(id: [ID]!): Boolean
  "确认付款打印批次"
  confirmPaymentPrint(
    "付款的id"
    id: [ID]!
  ): Boolean
  "单个确认付款"
  confirmSinglePayment(
    "批次的id"
    id: ID!
  ): Boolean
  "功能：保存步骤操作"
  congressMeetingAction(input: WorkflowTransitionInput): Boolean
  "复制流程"
  copyProcessDefinition(empId: ID, name: String, processDefinition: ID): Boolean
  "复制工作流接口"
  copyStageWorkflow(input: StageCopyWorkflowInput, scheme: ID!): StageWorkflowScheme
  "添加数据字典"
  creatDataDictionary(input: DataDictionaryInput): DataDictionary
  "添加数据字典分类"
  creatDictionaryType(input: DataDictionaryTypeInput!): DataDictionaryType
  creatGhEquipment(input: GhEquipmentInput): GhEquipment
  "新增器材预定"
  creatGhEquipmentReserve(input: GhEquipmentReserveInput): GhEquipmentReserve
  "新增器材类型"
  creatGhEquipmentType(input: GhEquipmentTypeInput): GhEquipmentType
  "功能：生成API"
  createAPI(ids: [ID]!): String
  "create activity"
  createActivity(input: createActivityInput): createActivityPayload
  "添加接口"
  createApiManage(input: CreateApiInput): Api
  "添加类型"
  createApiTypeManage(input: CreateApiTypeInput): ApiType
  "创建一个应用"
  createApplication(input: ApplicationCreateInput!): Application
  "创建应用分类"
  createApplicationType(input: ApplicationTypeInput): ApplicationType
  "创建流程实例"
  createApproval(departmentId: ID, money: Int, project: ID, type: StageWorkflowInstanceType, userId: ID): StageWorkflowInstance
  "新增文章"
  createArticle(input: ArticleCreateInput!): Article
  createArticleReadRecord(input: ArticleReadRecordInput): Boolean
  """
    批量删除
  terminationBatch(empId:String!,batchInput:BatchInput!):Boolean
  附件上传
  """
  createAttachment(emp: ID, input: AttachmentInput): Boolean
  "批量上传"
  createAttachments(emp: ID, input: [AttachmentInput]): Boolean
  "保存发票信息"
  createBill(input: BillInput): Bill
  "新增预算科目"
  createBudgetAccount(input: BudgetAccountInput): BudgetAccount
  "新增预算类别"
  createBudgetCategory(input: BudgetCategoryInput, unitIds: [ID]): BudgetCategory
  "新增预算内容"
  createBudgetContent(input: BudgetContentCreateInput): BudgetContent
  "新增预算控制"
  createBudgetControl(input: BudgetControlCreateInput): BudgetControl
  "新增用户"
  createBudgetEmployee(input: EmployeeCreateInput!): Employee
  "功能：保存预算编制信息"
  createBudgetMake(input: BudgetMakeCreateInput!): BudgetMake
  "新增预算实体"
  createBudgetModel(input: BudgetModelCreateInput): BudgetModel
  "新增预算期间"
  createBudgetPeriod(input: BudgetPeriodCreateInput): BudgetPeriod
  "新增拆分明细"
  createBudgetSplitDetailed(input: BudgetProjectDetailedInput, project: ID): BudgetProjectDetailed
  "新增预算科目表"
  createBudgetSubject(input: BudgetSubjectCreateInput): BudgetSubject
  "新增科目目录表"
  createBudgetSubjectCatalog(input: BudgetSubjectCatalogCreateInput): BudgetSubjectCatalog
  "新增预算任务"
  createBudgetTask(input: BudgetTaskInput): BudgetTask
  "新增预算类别"
  createBudgetType(input: BudgetTypeCreateInput): BudgetType
  "保存支部积分"
  createCMSBranchIntegral(input: BranchIntegralInput): BranchIntegral
  "保存人员支部积分"
  createCMSPeopleBranchIntegral(input: PeopleBranchIntegralInput): PeopleBranchIntegral
  "创建模块"
  createCase(input: CaseCreateInput!): Case!
  createCategory(input: CategoryInput!): ProcessCategory
  "添加栏目"
  createChannel(input: ArticleChannelCreateInput!): ArticleChannel
  "添加评论"
  createComment(input: CommentInput!, targetId: ID!, targetType: CommentTargetType!): Comment
  "创建对象"
  createComponent(input: ComponentCreateInput!): Component!
  "功能：创建会议"
  createCongressMeeting(input: CongressMeetingInput): CongressMeeting
  "创建定点联系"
  createContact(employees: [ID]!, group: ID!): [Contact]
  "创建合同"
  createContract(contract: ContractInput!, xmId: ID!): Contract
  "添加课程"
  createCourse(input: CourseInput): Course
  "创建数据源"
  createDataSource(input: DataSourceCreateInput!): DataSource
  "功能：新增数据源配置"
  createDataSourceConfig(input: DataSourceConfigInput): DataSourceConfig
  "新增API生成日志表"
  createDdmApiLog(input: DdmApiLogCreateInput): DdmApiLog
  "新增院内决策申请表"
  createDecisionApply(input: DecisionApplyCreateInput): DecisionApply
  "创建默认字段方案"
  createDefaultFieldFeature(input: DefaultFieldFeatureInput): DefaultFieldFeature
  "功能：创建默认字段"
  createDefaultModelField(input: DefaultModelFieldCreateInput): ModelField
  createDefineEvent(input: DefineEventInput!): DefineEvent
  createDefineMessage(input: DefineMessageInput!): DefineMessage
  createDefineNotice(input: DefineNoticeInput!): DefineNotice
  createDefineRemind(input: DefineRemindInput!): DefineRemind
  "创建部门"
  createDepartment(input: DepartmentCreateInput!, organization: ID): Department
  "创建部门类型"
  createDepartmentType(input: DepartmentTypeCreateInput!, organization: ID!): DepartmentType
  "创建部署"
  createDeployment(input: DeploymentInput): Boolean
  "新建版本信息"
  createDjVersion(input: DjVersionCreateInput): DjVersion
  "功能：创建业务域"
  createDomain(input: DomainCreateInput): Domain
  "生成下载链接"
  createDownloadLink(
    "需要生成下载链接的文件列表"
    files: [String]!, 
    "选项"
    opts: DownloadLinkOptions
  ): DownloadLink
  "创建员工"
  createEmployee(input: EmployeeCreateInput!): Employee
  createEmployeeEmail(
    "员工id"
    employeeId: ID!, 
    input: EmployeeEmailInput
  ): EmployeeEmail
  "创建字段"
  createEmployeeField(input: EmployeeFieldInput): EmployeeField
  "创建字段组"
  createEmployeeFieldGroup(input: EmployeeFieldGroupInput): EmployeeFieldGroup
  "创建群组"
  createEmployeeGroup(input: EmployeeGroupCreateInput!, scope: String!): EmployeeGroup
  "添加组织机构人员标签"
  createEmployeeLabel(input: GhCreateEmployeeLabelInput!): GhEmployeeLabel
  "添加组织机构人员标签和人员关联信息"
  createEmployeeLabelRelation(input: [GhEmployeeLabelRelationInput]!): Boolean
  createEmployeePhone(employeeId: ID!, input: EmployeePhoneInput): EmployeePhone
  createEntityuser(input: createEntityuserInput): createEntityuserPayload
  "新增枚举"
  createEnumeration(input: EnumerationCreateInput): Enumeration
  "Upload one or many files"
  createExam(input: createExamInput): createExamPayload
  createExamandpaper(input: createExamandpaperInput): createExamandpaperPayload
  createExamcondition(input: createExamconditionInput): createExamconditionPayload
  createExaminationpaper(input: createExaminationpaperInput): createExaminationpaperPayload
  createExampapertitle(input: createExampapertitleInput): createExampapertitlePayload
  createExamreport(input: createExamreportInput): createExamreportPayload
  createExamtopic(input: createExamtopicInput): createExamtopicPayload
  "创建专家信息"
  createExpert(expert: ExpertInput!): Expert
  "创建专家论证场次"
  createExpertScene(expertScene: ExpertSceneInput): ExpertScene
  "新增最终评价"
  createFinalAssessment(input: FinalAssessmentInput): FinalAssessment
  "创建活动（含活动场次，图片、活动标签、报名规则、查看规则）"
  createGhActivity(input: GhActivityCreateInput): GhActivity
  createGhActivitySign(input: GhActivitySignCreateInput): GhActivitySign
  createGhAssocUser(associationId: Int!, input: [GhAssocUserInput]!): Boolean
  createGhAssociation(input: GhAssociationCreateInput!): GhAssociation!
  "新增我的历程"
  createGhEmployeeJourney(input: GhEmployeeJourneyCreateInput): GhEmployeeJourney
  "保存delegate"
  createGraphQLDelegateDefinition(input: GraphQLDelegateInput): GraphQLDelegate
  "配置注解"
  createGraphQLDirectiveDefinition(input: GraphQLDirectiveDefinitionInput): GraphQLDirectiveDefinition
  """
  # 创建 GraphQL Type 定义
  createGraphQLTypeDefinition(schema: ID, input: GraphQLTypeDefinitionInput): GraphQLTypeDefinition
  # 创建 GraphQL Input 定义
  createGraphQLInputDefinition(schema: ID, input: GraphQLInputDefinitionInput): GraphQLTypeDefinition
  # 创建 GraphQL Filed 定义
  """
  createGraphQLFieldDefinition(input: GraphQLFieldDefinitionCreateInput!, rootType: ID!, schema: ID!): GraphQLFieldDefinition
  "创建类型"
  createGraphQLTypeDefinition(input: GraphQLTypeDefinitionCreateInput!): GraphQLTypeDefinition
  "创建群组分类"
  createGroupTypes(
    input: EmployeeGroupScopeCreateInput!, 
    "组织id"
    organization: ID!
  ): EmployeeGroupScope!
  "创建索引"
  createIndex(indexName: String): Boolean
  "新增加分申请"
  createIntegralApply(input: IntegralApplyInput): IntegralApply
  "新增积分类别"
  createIntegralCategory(input: IntegralCategoryCreateInput): IntegralCategory
  "新增积分考核表"
  createIntegralExamineForm(input: IntegralExamineFormInput): IntegralExamineForm
  "新增积分规则"
  createIntegralRegulation(input: IntegralRegulationCreateInput): IntegralRegulation
  "创建互动交流"
  createInteraction(input: InteractionInput): Interaction
  "创建任务"
  createIssue(input: IssueInput!, telLog: ID): Issue
  "增加任务注释"
  createIssueComment(input: IssueCommentInput!, issue: ID!): IssueComment
  "新增故障概要"
  createIssueFaultDescription(input: IssueFaultDescriptionInput): IssueFaultDescription
  "增加优先级类型"
  createIssuePriority(input: IssuePriorityInput): IssuePriority
  createIssueProjectLink(input: IssueProjectLinkInput): IssueProjectLink
  "添加页面"
  createIssueScreen(input: IssueScreenInput): IssueScreen
  "将字段添加到界面"
  createIssueScreenField(field: ID!, screen: ID!): Boolean
  "为页面添加 TabPane"
  createIssueScreenTabPane(name: String!, screen: ID!): IssueScreenTabPane
  "将字段添加到界面中的TabPane"
  createIssueScreenTabPaneField(field: ID!, screen: ID!, tabPane: ID!): Boolean
  "添加状态"
  createIssueStatus(input: IssueStateInput!): IssueStatus
  "创建任务类型分类"
  createIssueType(categoryId: ID, input: IssueTypeInput!, schemId: ID!): IssueType
  """
        # 创建任务类型方案
      createIssueTypeScheme(input: IssueTypeSchemeInput!): IssueTypeScheme
      # 编辑任务类型方案
      updateIssueTypeScheme(id: ID!, merge: Boolean = true, input: IssueTypeSchemeUpdateInput!): IssueTypeScheme
      # 刪除任务类型方案
      removeIssueTypeScheme(id: ID!):Boolean
  新增任务类型
  """
  createIssueTypeCategory(input: IssueTypeCategoryInput, schemId: ID!): IssueTypeCategory
  "增加任务日志"
  createIssueWorkLog(input: IssueWorkLogInput!, issue: ID!): IssueWorkLog
  "创建工作流"
  createIssueWorkflow(input: IssueWorkflowInput): IssueWorkflow
  "创建工作流方案"
  createIssueWorkflowScheme(input: IssueWorkflowSchemeCreateInput!): IssueWorkflowScheme
  "将工作流添加到方案中"
  createIssueWorkflowSchemeItem(issueTypes: [ID], scheme: ID, workflow: ID): IssueWorkflowSchemeItem
  "添加步骤"
  createIssueWorkflowStep(linkedStatus: ID!, name: String!, workflow: ID!): IssueWorkflowStep
  "添加步骤操作"
  createIssueWorkflowStepTransition(input: IssueWorkflowStepTransitionCreateInput, step: ID!): IssueWorkflowStep
  "创建职务"
  createJob(input: JobCreateInput!, organization: ID!): Job
  "Upload one or many files"
  createJoincondition(input: createJoinconditionInput): createJoinconditionPayload
  "保存知识库信息"
  createKnowledge(input: KnowledgeInput): Knowledge
  "保存评论信息"
  createKnowledgeComment(input: KnowledgeCommentInput): KnowledgeComment
  "保存知识类型信息"
  createKnowledgeType(input: KnowledgeTypeInput): KnowledgeType
  "添加学习人（在用户学习之后再添加当前用户为学习人）"
  createLearner(input: LearnerInput): Learner
  "添加章节"
  createLesson(input: LessonInput): Lesson
  "功能：创建数据库"
  createMSDataBase(input: MSDatabaseConfigInput): MSResponse
  "功能：创建数据库表（MYSQL）"
  createMSDataTable(input: TableStructureInput): MSResponse
  "新增项目代码管理"
  createMange(input: MangeCreateInput): Mange
  "create meeting"
  createMeeting(input: createMeetingInput): createMeetingPayload
  "功能：添加项目文档信息"
  createMeetingDocument(input: MeetingDocumentInput): MeetingDocument
  "功能：保存会议测评信息"
  createMeetingEvaluation(input: MeetingEvaluationInput!): MeetingEvaluation
  "新增会议录播"
  createMeetingRecorded(
    "过滤查询条件"
    input: MeetingRecordedInput
  ): MeetingRecorded
  "功能：创建角色信息"
  createMeetingRole(input: MeetingRoleInput): MeetingRole
  "功能：保存会议议题信息"
  createMeetingTopic(input: MeetingTopicInput): MeetingTopic
  "根据文件信息创建议题"
  createMeetingTopicByFile(file: String!, meeting: ID, state: ID!): Boolean
  "新增会议类型"
  createMeetingTypeSecurity(input: MeetingTypeSecurityInput): MeetingTypeSecurity
  createMeetingnotice(input: createMeetingnoticeInput): createMeetingnoticePayload
  createMeetingreserve(input: createMeetingreserveInput): createMeetingreservePayload
  "create meetingRoom"
  createMeetingroom(input: createMeetingroomInput): createMeetingroomPayload
  createMeetingtype(input: createMeetingtypeInput): createMeetingtypePayload
  "create meetingVote"
  createMeetingvote(input: createMeetingvoteInput): createMeetingvotePayload
  "Upload one or many files"
  createMeetingvotedetail(input: createMeetingvotedetailInput): createMeetingvotedetailPayload
  "功能：发送消息提醒"
  createMessage(input: MessageInput): Boolean
  "创建业务实体"
  createModel(input: ModelCreateInput): Model
  "功能：创建业务实体扩展"
  createModelDataExpansion(input: ModelDataExpansionCreateInput): DataExpansion
  "功能：新增实体字段"
  createModelField(input: ModelFieldCreateInput): ModelField
  "功能：保存字段过滤条件"
  createModelFieldFilter(input: ModelFieldFilterCreateInput): ModelFieldFilter
  "功能：创建业务实体扩展"
  createModelInterface(input: ModelInterfaceCreateInput): ModelInterface
  "功能：保存提案信息"
  createMotion(input: MotionInput): Motion
  "创建提案类型"
  createMotionType(input: MotionTypeInput): MotionType
  createMyExamExercise(questionBanks: [ID]!, questionNumber: Long!, user: ID!): Sheet
  createNoticeTemplate(input: NoticeTemplateInput!): NoticeTemplate
  createNotification(channel: ID!, message: MessageCenterInput, receivers: [ReceiverInput], token: ID!): Boolean
  "新建意见征集"
  createOpinionCollect(input: OpinionCollectCreateInput): OpinionCollect
  createOpinionCollection(input: OpinionCollectionInput): OpinionsCollection
  "新建意见类型"
  createOpinionType(input: OpinionTypeCreateInput): OpinionType
  createOption(key: ID!, value: String!): OpinionValue
  "新增人员表"
  createOrgEmployee(input: OrgEmployeeCreateInput): OrgEmployee
  "创建组织"
  createOrganization(input: OrganizationCreateInput!): Organization
  "创建组织人员状态"
  createOrganizationEmployeeStatus(
    "保存参数"
    input: OrganizationEmployeeStatusCreateInput!, 
    "组织Id"
    organization: ID!
  ): OrganizationEmployeeStatus
  "添加申请"
  createPartyApplys(partyapplys: PartyApplysInput): PartyApplys
  "新增考核"
  createPartyAssessment(input: AssessmentInput): PartyAssessment
  "党费导入 新增党费"
  createPartyDues(input: PartyDuesImportInput): [PartyDuesImport]
  "记录经费明细"
  createPartyFundDetail(input: PartyFundDetailInput): PartyFundDetail
  "人员经费/党费导入"
  createPartyFundDetails(input: [PartyFundDetailsInput], partyFund: ID!): [PartyFundDeatilImportFail]
  "部门经费/党费导入"
  createPartyFunds(input: [PartyFundInput], organization: ID!): [PartyFundImportFail]
  "创建学习主题"
  createPartyLearnTheme(input: LearnThemeInput, parsing: Boolean): LearnTheme
  "创建班组"
  createPartyTeam(input: TeamInput): Team
  "Upload one or many files"
  createPartybill(input: createPartybillInput): createPartybillPayload
  "Upload one or many files"
  createPartyexpenses(input: createPartyexpensesInput): createPartyexpensesPayload
  "创建付款申请"
  createPayApply(input: PayApplyInput): PayApply
  createPayscale(input: createPayscaleInput): createPayscalePayload
  "Upload one or many files"
  createPaystandard(input: createPaystandardInput): createPaystandardPayload
  "创建权限"
  createPermission(
    "权限"
    input: PermissionCreateInput
  ): Permission
  "创建权限分类"
  createPermissionType(
    "权限分类"
    input: PermissionTypeInput
  ): PermissionType
  "添加门户"
  createPortal(input: PortalInput): Portal
  "批量添加门户"
  createPortals(inputs: [PortalInput]): [Portal]
  "创建职位"
  createPosition(department: ID!, job: ID!): Position
  createProcessForm(processFormInput: ProcessFormInput): ProcessForm
  "创建流程实例（发起流程） #优先级  1超急  2紧急 3正常"
  createProcessInstance(input: CreateProcessInstanceInput!, restartProcess: Boolean): ProcessInstance
  createProcessModel(input: SaveModelInput): ProcessModel
  "保存项目信息"
  createProject(input: ProjectCreateInput!): Project
  "新增立项"
  createProjectApproval(input: ProjectApprovalInput): ProjectApproval
  "保存合同信息"
  createProjectContract(input: ProjectContractInput): ProjectContract
  "新增项目代码管理"
  createProjectManagement(input: ProjectManagementCreateInput): ProjectManagement
  "保存会议信息"
  createProjectMeeting(input: ProjectMeetingInput): ProjectMeeting
  "保存项目主题留言信息"
  createProjectNote(input: ProjectNoteInput): ProjectNote
  """
    发送接口论证流程
  sendProjectDetailedEzFLOW(saveFormRequest:SaveFormRequest !,id: ID!): Boolean
  发送付款申请流程
  saveAndsendPaymentServiceEzFLOW(contract: ContractInput!, payment: PaymentInput!,saveFormRequest: SaveFormRequest!):Boolean
  新增预算拆分进度
  """
  createProjectSchedule(id: ID!, projectSchedule: ProjectScheduleInput): ProjectSchedule
  "保存项目主题信息"
  createProjectTheme(input: ProjectThemeInput): ProjectTheme
  "新增项目阶段日期"
  createProjectTime(input: ProjectTimeInput): Boolean
  "新增采购招标"
  createPurchaseTender(input: PurchaseTenderInput): PurchaseTender
  createQuestionbank(input: createQuestionbankInput): createQuestionbankPayload
  "功能：保存问卷信息"
  createQuestionnaire(input: QuestionnaireInput): Questionnaire
  "create question topic"
  createQuestiontopic(input: createQuestiontopicInput): createQuestiontopicPayload
  "新增学习目录"
  createReadingNotes(input: ReadingNotesInput): ReadingNotes
  createRelatedaccessory(input: createRelatedaccessoryInput): createRelatedaccessoryPayload
  "新增常用问卷（注意：题目为矩阵量表时则题目选项一样）(模板)"
  createResearchGeneralAsk(input: ResearchAskInput): ResearchAsk
  "新增矩阵单选、矩阵多选、矩阵量表问卷（相同题目选项问卷（场景：满意度调查/合格率））"
  createResearchMatrixAsk(input: ResearchMatrixAskInput): ResearchAsk
  "新增调查主题(发起问卷)"
  createResearchSubject(input: ResearchSubjectInput): ResearchSubject
  "创建主题分类"
  createResearchType(input: ResearchTypeInput): ResearchType
  "新增"
  createReview(input: ReviewInput): Review
  "新增"
  createReviewDetails(input: ReviewDetailsInput): ReviewDetails
  "创建角色"
  createRole(input: RoleCreateInput!, organization: ID!): Role
  "创建角色分类"
  createRoleType(
    "角色分类"
    input: RoleTypeCreateInput
  ): RoleType
  "创建路由"
  createRoute(application: ID!, input: RouteCreateInput!): Route
  "创建服务"
  createService(input: ServiceInput): Service
  "创建服务版本"
  createServiceVersion(input: ServiceVersionInput): ServiceVersion
  "Upload one or many files"
  createSheet(input: createSheetInput): createSheetPayload
  createSheetchild(input: createSheetchildInput): createSheetchildPayload
  "新增拆分预算"
  createSplitBudget(project: BudgetProjectInput!, ysId: ID!): BudgetProject
  "添加阶段"
  createStage(input: StageInput!): Stage
  "添加字段"
  createStageField(StageWorkflowCategory: StageWorkflowCategory, config: ID, input: StageFieldInput): StageFieldConfigurationItem
  "添加字段配置"
  createStageFieldConfigurationItem(input: StageFieldConfigurationItemInput): StageFieldConfigurationItem
  "创建权限"
  createStagePermission(input: StagePermissionCreateInput): StagePermission
  "将字段添加到界面"
  createStageScreenField(field: ID!, screen: ID!): Boolean
  "为页面添加 TabPane"
  createStageScreenTabPane(name: String!, screen: ID!): StageScreenTabPane
  "将字段添加到界面中的TabPane"
  createStageScreenTabPaneField(field: [ID]!, screen: ID!, tabPane: ID!): Boolean
  "添加分隔符"
  createStageSeparator(input: StageSeparatorInput): StageSeparator
  "创建流程"
  createStageWorkflow(input: StageWorkflowInput!): StageWorkflow
  "创建界面"
  createStageWorkflowScreen(input: StageWorkflowScreenInput): StageWorkflowScreen
  "配置步骤"
  createStageWorkflowStep(input: StageWorkflowStepInput!): StageWorkflowStep
  "添加操作"
  createStageWorkflowStepTransition(input: StageWorkflowStepTransitionInput!): StageWorkflowStepTransition
  "Upload one or many files"
  createSummarybrief(input: createSummarybriefInput): createSummarybriefPayload
  """
    修改会议类型权限范围
  createMeetingTypeSecurity(input: MeetingTypeSecurityInput!): MeetingTypeSecurity
   创建会议补录
  """
  createSupplementaryMeeting(input: SupplementaryMeetingInput!): SupplementaryMeeting
  "创建一个新任务"
  createSysJob(input: DataTransmissionInput): DataTransmission
  "功能：根据commitId创建标签"
  createTag(input: TagInput): Boolean
  "创建电话对应的人员"
  createTelEmployee(input: telEmployeeInput): TelEmployee
  "新增"
  createTemplate(input: TemplateCreateInput): Template
  "新增文件"
  createTemplateFile(input: TemplateFileInput!): TemplateFile
  "新增文件类目"
  createTemplateFileTag(input: TemplateFileTagInput!): TemplateFileTag
  createTests(input: createTestsInput): createTestsPayload
  "功能：保存议题讨论信息"
  createTopicDiscuss(input: TopicDiscussInput, meeting: ID!): Boolean
  "功能：保存议题投票信息"
  createTopicVote(input: TopicVoteInput): Boolean
  createTopiccollect(input: createTopiccollectInput): createTopiccollectPayload
  createUser(input: UserCreateInput!, organization: ID!): User
  "创建版本库"
  createVersionLibrary(input: VersionDatabaseCreateInput): VersionDatabase
  "新增查看记录"
  createViewRecord(input: ViewRecordInput): ViewRecord
  createVoteoption(input: createVoteoptionInput): createVoteoptionPayload
  "切换服务版本"
  cutServiceVersion(code: String): ServiceVersion
  "委派"
  delegate(empId: String, receiver: String, taskId: String): Boolean
  "委派办理"
  delegateHandle(empId: String, taskId: String): Boolean
  "删除活动"
  deleleGhActivity(id: ID): Boolean
  deleteActivity(input: deleteActivityInput): deleteActivityPayload
  "删除接口"
  deleteApiManage(id: ID!): Boolean
  "删除类型"
  deleteApiTypeManage(id: ID!): Boolean
  "根据主键id删除发票信息"
  deleteBill(id: ID): Boolean
  "删除预算"
  deleteBudget(id: ID!): Boolean
  "删除预算科目"
  deleteBudgetAccount(id: ID): Boolean
  "删除预算类别"
  deleteBudgetCategory(id: ID): Boolean
  "根据主键id删除预算内容"
  deleteBudgetContent(
    "主键id"
    id: ID!
  ): Boolean
  "根据主键id删除预算控制"
  deleteBudgetControl(
    "主键id"
    id: ID!
  ): Boolean
  "删除预算用户"
  deleteBudgetEmployee(id: ID!): Boolean
  "功能：根据主键ID删除预算编制信息"
  deleteBudgetMake(id: ID!): Boolean
  "根据主键id删除预算实体"
  deleteBudgetModel(
    "主键id"
    id: ID!
  ): Boolean
  "根据主键id删除预算期间"
  deleteBudgetPeriod(
    "主键id"
    id: ID!
  ): Boolean
  "删除预算编制任务"
  deleteBudgetPlanning(id: ID): Boolean
  "删除拆分明细"
  deleteBudgetSplitDetailed(detailedId: ID): Boolean
  "根据主键id删除预算科目表"
  deleteBudgetSubject(
    "主键id"
    id: ID!
  ): Boolean
  "根据主键id删除科目目录表"
  deleteBudgetSubjectCatalog(
    "主键id"
    id: ID!
  ): Boolean
  "删除预算任务"
  deleteBudgetTask(id: ID): Boolean
  "根据主键id删除预算类别"
  deleteBudgetType(
    "主键id"
    id: ID!
  ): Boolean
  "删除预算文件"
  deleteByYsDocument(id: ID!): Boolean
  "删除支部积分"
  deleteCMSBranchIntegral(id: ID!): Boolean
  "删除人员支部积分"
  deleteCMSPeopleBranchIntegral(id: ID!): Boolean
  deleteCategory(id: ID!): Boolean
  "删除定点联系"
  deleteContact(id: ID!): Boolean
  "根据合同id删除合同信息"
  deleteContract(id: ID!): Boolean
  """
    创建合同条款信息
  createContractClause(input:ContractClauseInput):ContractClause
  根据主键id修改合同条款信息
  updateContractClause(id:ID!,input:ContractClauseInput):ContractClause
  根据主键id删除合同条款
  """
  deleteContractClause(id: ID): Boolean
  "删除数据字典   id格式：\"type:code\""
  deleteDataDictionary(id: ID!): Boolean
  "根据主键id删除API生成日志表"
  deleteDdmApiLog(
    "主键id"
    id: ID!
  ): Boolean
  "根据主键id删除院内决策申请表"
  deleteDecisionApply(
    "主键id"
    id: ID!
  ): Boolean
  "删除默认字段方案"
  deleteDefaultFieldFeature(name: String): Boolean
  "功能：根据主键ID删除默认字段"
  deleteDefaultModelField(id: ID!): Boolean
  "删除部署"
  deleteDeployment(deployment: ID): Boolean
  "删除数据字典分类"
  deleteDictionaryType(id: ID!): Boolean
  "功能：根据主键id删除业务域"
  deleteDomain(id: ID): Boolean
  "删除草稿"
  deleteDraft(id: [ID]): Boolean
  "解除组织机构人员标签和人员关联信息"
  deleteEmployeeLabelRelation(id: ID!): Boolean
  deleteEntityuser(input: deleteEntityuserInput): deleteEntityuserPayload
  "根据主键id删除枚举"
  deleteEnumeration(id: ID!): Boolean
  "Upload one or many files"
  deleteExam(input: deleteExamInput): deleteExamPayload
  deleteExamandpaper(input: deleteExamandpaperInput): deleteExamandpaperPayload
  deleteExamcondition(input: deleteExamconditionInput): deleteExamconditionPayload
  "Upload one or many files"
  deleteExaminationpaper(input: deleteExaminationpaperInput): deleteExaminationpaperPayload
  "Upload one or many files"
  deleteExampapertitle(input: deleteExampapertitleInput): deleteExampapertitlePayload
  deleteExamreport(input: deleteExamreportInput): deleteExamreportPayload
  deleteExamtopic(input: deleteExamtopicInput): deleteExamtopicPayload
  "删除专家信息"
  deleteExpert(id: ID!): Boolean
  "删除专家论证场次"
  deleteExpertScene(id: ID!): Boolean
  "删除活动单个场次"
  deleteGhActivityPlace(placeId: ID!): Boolean
  deleteGhActivitySign(id: ID!): Boolean
  deleteGhAssocUser(id: [ID]!): Boolean
  "返回结果：1删除，0有用户被禁用"
  deleteGhAssociation(id: ID!, remarks: String): Int
  "根据主键id删除我的历程"
  deleteGhEmployeeJourney(
    "主键id"
    id: ID!
  ): Boolean
  deleteGhEquipment(id: Int!): Boolean
  "删除器材预定"
  deleteGhEquipmentReserve(id: Int!): Boolean
  "删除器材类型"
  deleteGhEquipmentType(id: Int!): Boolean
  "根据主键id删除积分类别"
  deleteIntegralCategory(id: ID!): Boolean
  "删除积分考核表"
  deleteIntegralExamineForm(id: ID!): Boolean
  "根据主键id删除积分规则"
  deleteIntegralRegulation(id: ID!): Boolean
  "删除互动交流"
  deleteInteraction(id: ID!): Boolean
  deleteJoincondition(input: deleteJoinconditionInput): deleteJoinconditionPayload
  "根据主键id删除评论信息"
  deleteKnowledgeComment(id: ID): Boolean
  "删除留言"
  deleteLeaving(id: ID): Boolean
  "根据主键id删除项目代码管理"
  deleteMange(
    "主键id"
    id: ID!
  ): Boolean
  deleteMeeting(input: deleteMeetingInput): deleteMeetingPayload
  "功能：根据主键id删除文档信息"
  deleteMeetingDocument(id: ID!): Boolean
  "删除会议录播"
  deleteMeetingRecorded(
    "会议录播id"
    id: ID
  ): Boolean
  "功能：根据主键id删除议题信息"
  deleteMeetingTopic(id: ID): Boolean
  "删除会议类型"
  deleteMeetingTypeSecurity(meetingTypeId: Int!): Boolean
  deleteMeetingnotice(input: deleteMeetingnoticeInput): deleteMeetingnoticePayload
  deleteMeetingreserve(input: deleteMeetingreserveInput): deleteMeetingreservePayload
  deleteMeetingroom(input: deleteMeetingroomInput): deleteMeetingroomPayload
  deleteMeetingtype(input: deleteMeetingtypeInput): deleteMeetingtypePayload
  "delete meeting vote"
  deleteMeetingvote(input: deleteMeetingvoteInput): deleteMeetingvotePayload
  deleteMeetingvotedetail(input: deleteMeetingvotedetailInput): deleteMeetingvotedetailPayload
  "删除业务实体"
  deleteModel(id: ID!): Boolean
  "功能：根据主键ID删除实体扩展信息"
  deleteModelDataExpansion(id: ID!): Boolean
  "功能：根据主键id删除实体字段"
  deleteModelField(id: ID!): Boolean
  "功能：根据主键ID删除实体字段过滤条件"
  deleteModelFieldFilter(id: ID!): Boolean
  "功能：根据主键ID删除实体扩展信息"
  deleteModelInterface(id: ID!): Boolean
  "删除意见征集"
  deleteOpinionCollect(id: ID!): Boolean
  "删除意见类型"
  deleteOpinionType(id: ID!): Boolean
  "根据主键id删除人员表"
  deleteOrgEmployee(
    "主键id"
    id: ID!
  ): Boolean
  deletePaperTopic(examinationPaperId: ID!, questiontopiceId: ID!): Boolean
  "删除党员发展记录"
  deletePartyApplys(
    "党员记录id"
    id: ID!
  ): Boolean!
  "删除"
  deletePartyEvaluate(id: ID!): Boolean
  "删除学习主题"
  deletePartyLearnTheme(id: ID!, parsing: Boolean): Boolean
  "删除班组"
  deletePartyTeam(id: ID!): Boolean
  "Upload one or many files"
  deletePartybill(input: deletePartybillInput): deletePartybillPayload
  deletePartyexpenses(input: deletePartyexpensesInput): deletePartyexpensesPayload
  "根据主键id修改付款申请"
  deletePayApply(id: ID): Boolean
  "删除付款"
  deletePaymen(id: ID!): Boolean
  deletePayscale(input: deletePayscaleInput): deletePayscalePayload
  deletePaystandard(input: deletePaystandardInput): deletePaystandardPayload
  "删除轮播图"
  deletePhotos(
    "输入参数"
    id: [ID]
  ): Boolean
  "删除门户"
  deletePortal(id: ID!): Boolean
  deleteProcessApplication(model: ID!): Boolean
  "根据主键id删除项目信息"
  deleteProject(id: ID): Boolean
  "根据主键id删除立项信息"
  deleteProjectApproval(id: ID!): Boolean
  "根据主键id删除项目代码管理"
  deleteProjectManagement(
    "主键id"
    id: ID!
  ): Boolean
  "根据主键id删除会议信息"
  deleteProjectMeeting(id: ID): Boolean
  "根据主键id删除留言信息"
  deleteProjectNote(id: ID): Boolean
  "根据主键id删除项目主题信息"
  deleteProjectTheme(id: ID): Boolean
  "根据主键id删除招标采购信息"
  deletePurchaseTender(id: ID): Boolean
  "Upload one or many files"
  deleteQuestionbank(input: deleteQuestionbankInput): deleteQuestionbankPayload
  "功能：根据主键id删除文件信息"
  deleteQuestionnaire(id: ID!): Boolean
  "Upload one or many files"
  deleteQuestiontopic(input: deleteQuestiontopicInput): deleteQuestiontopicPayload
  deleteRelatedaccessory(input: deleteRelatedaccessoryInput): deleteRelatedaccessoryPayload
  "删除调查问卷"
  deleteResearchAsk(id: Int, organizationId: ID!): Boolean
  "删除参与测评人测评详情"
  deleteResearchStatJoinSummary(id: Int!): Boolean
  "删除调查主题"
  deleteResearchSubject(id: Int!, organizationId: ID!): Boolean
  "删除调查分类"
  deleteResearchType(id: Int!): Boolean
  deleteSheet(input: deleteSheetInput): deleteSheetPayload
  deleteSheetchild(input: deleteSheetchildInput): deleteSheetchildPayload
  "删除项目"
  deleteSplitBudget(id: ID!): Boolean
  "删除字段"
  deleteStageField(id: ID!): Boolean
  "删除字段配置"
  deleteStageFieldConfigurationItem(id: ID!): Boolean
  "删除权限"
  deleteStagePermission(id: ID!): Boolean
  deleteSummarybrief(input: deleteSummarybriefInput): deleteSummarybriefPayload
  "删除会议记录"
  deleteSupplementaryMeeting(where: ID!): Boolean
  "删除"
  deleteTemplate(id: ID!): Boolean
  "删除文件"
  deleteTemplateFile(where: ID!): Boolean
  "删除文件类目"
  deleteTemplateFileTag(where: ID!): Boolean
  deleteTests(input: deleteTestsInput): deleteTestsPayload
  "Upload one or many files"
  deleteTopiccollect(input: deleteTopiccollectInput): deleteTopiccollectPayload
  deleteVoteoption(input: deleteVoteoptionInput): deleteVoteoptionPayload
  "答题, 如果不传答案则认定为取消该题"
  doResearchAnswer(input: [ResearchAnswerInput], joinPersonInput: ResearchJoinPersonInput!, paperId: Int!, questionId: Int!): Boolean
  "完成试卷测评"
  doResearchCompletePaperAnswer(paperIds: [Int]!): Boolean
  "生成统计结果"
  doResearchStatSubject(subjectId: Int): Boolean
  "生成统计结果"
  doStatSubject(subjectId: Int): Boolean
  execSQL(input: SqlInput): JSON
  "导出接口API的yml描述文件"
  exportApiDescription: String
  "导出应用"
  exportApplication(applicationId: ID!): String
  "导出接口描述文件"
  exportGraphQLYml(serviceId: ID!): Boolean
  exportProcess(exportProcessType: String, id: ID!, modelType: String!): FileObject
  "生成会议资料PDF"
  generateMeetingPDF(from: MeetingPDFFrom!, ids: [ID]!): [FileObject]
  "给某个权限授予给某一类的某个人"
  grantIssuePermission(permission: ID!, scheme: ID!, securityType: IssueSecurityType!, value: String!): IssueGrantPermission
  "给某个权限授予给某一类的某个人"
  grantStagePermission(permission: ID!, scheme: ID!, securityType: StageSecurityType!, value: String!): StageGrantPermission
  "设置热门或取消热门"
  hotGhActivity(id: ID!, isHot: Boolean!): Boolean
  "导入接口API的yml描述文件"
  importApiDescription(input: String): Boolean
  "导入应用"
  importApplication(yml: String): Boolean
  "进口论证流程"
  importArgumentAction(action: ID!, importArgumentId: ID!, userId: ID, values: [PartyFeldValueInput]): ImportArgument
  "进口论证批量同意操作"
  importArgumentBatch(action: ID!, applyName: String, importArgumentIds: [ID]): Boolean
  "导入组件"
  importComponent(components: [ComponentCreateInput]): [Component]!
  importExaminationpaper(input: ExaminationpaperImportInput): Examinationpaper
  importGraphQL(graphqls: String): Boolean
  "导入 Graphql 服务"
  importGraphQLService(endpoint: ServiceEndpointInput, id: ID, mock: Boolean = false, name: String): Service
  "会议议程导入接口"
  importMeetingAgenda(
    "输入参数"
    input: [MeetingAgendaInput]
  ): [MeetingAgenda]
  importProcess(json: String!, name: String!): Boolean
  "功能：初始化接口基础配置"
  initConfig: JSON
  """
   电话解决
  保存字段的值
  """
  issueAction(action: ID!, issue: ID!, values: [IssueFieldValue]): Issue
  "排序"
  issueAllocationRuleSort(id: ID!, now: ID!): Boolean
  "会签"
  jointlySign(empId: String, receiver: [String], taskId: String): Boolean
  "系统•登录 当 loginType = password 时 username 与 password 必填， loginType = dingtalk 时，  authCode 与 tmpAuthCode 其中一个不能为 NULL"
  login(authCode: String, loginType: LoginType = password, options: LoginOptions, password: String, singleCode: String, tmpAuthCode: String, username: String): LoginUser
  "实体字段拖拽排序"
  modelFieldSort(id: ID!, target: Int): Boolean
  "功能：业务实体升级"
  modelUp(input: ModelUpInput): Boolean
  "移动部门"
  moveDepartment(id: ID!, location: Int, parentDepartment: ID): Department
  "党建下移阶段"
  moveDownStage(stageId: Int, wid: Int): Boolean
  "党建节点下移(分隔符)"
  moveDownStageSeparator(category: StageWorkflowCategory, separatorId: Int): Boolean
  "党建下移步骤"
  moveDownStageStep(stepId: Int, workflowId: Int): Boolean
  "移动路由"
  moveRoute(id: ID!, location: Int!, parentRoute: ID): Route
  "党建上移阶段"
  moveUpStage(stageId: Int, wid: Int): Boolean
  "党建节点上移(分隔符)"
  moveUpStageSeparator(category: StageWorkflowCategory, separatorId: Int): Boolean
  "党建上移步骤"
  moveUpStageStep(stepId: Int, workflowId: Int): Boolean
  notes: String
  "分布提交"
  partyApplyAction(
    "分布提交入参"
    input: PartyApplyActionInput!
  ): PartyApplys
  "暂停任务"
  pauseIssue(content: String!, issue: ID!): Boolean
  "保存字段值 project:项目的id stage:阶段的id action:操作的id"
  projectAction(action: ID!, project: ID!, stage: ID!, userId: ID, values: [StageFieldValueInput]): Project
  publishAppDefinitionAndModel(model: ID!, modelType: String!): Boolean
  "发布文章"
  publishArticle(id: ID): Boolean
  "功能：发布任务"
  publishBudgetTask(id: ID!): Boolean
  "发布活动或取消"
  publishGhActivity(id: ID!, input: GhActivityPublishInput): Boolean
  randomAddExampapertitle(input: RandomInput): Boolean
  "留言已读"
  readLeaving(id: ID): Leavings
  "若读了该条消息，更新该条消息从未读到已读  消息的id"
  readNotification(id: ID!): Boolean
  reject(empId: String!, opinion: String!, processInstanceId: String!, taskId: String!): Boolean
  "删除应用"
  removeApplication(id: ID!): Boolean
  "删除应用分类"
  removeApplicationType(id: ID!): Boolean
  "删除流程实例"
  removeApproval(projectId: ID!): Boolean
  "删除文章"
  removeArticle(id: ID!): Boolean
  "根据文章id移除轮播图"
  removeArticlePhotoSet(
    "文章id"
    id: ID
  ): Boolean
  "删除模块"
  removeCase(id: ID!): Boolean
  "卸载应用中添加的模块"
  removeCaseUseApplication(applicationId: String!, caseId: String!, version: String!): Boolean
  "删除栏目"
  removeChannel(id: ID!): Boolean
  "删除评论"
  removeComment(id: ID!): Boolean
  "删除组件"
  removeComponent(id: ID!): Boolean
  "删除课程"
  removeCourse(id: ID!): Boolean
  "删除数据源"
  removeDataSource(id: ID!): Boolean
  removeDefineEvent(id: ID!): Boolean
  removeDefineMessage(id: ID!): Boolean
  removeDefineNotice(id: ID!): Boolean
  removeDefineRemind(id: ID!): Boolean
  "删除部门"
  removeDepartment(id: ID!): Boolean
  removeDepartmentType(id: ID!): Boolean
  "删除版本信息"
  removeDjVersion(id: ID!): Boolean
  "删除员工"
  removeEmployee(id: ID!): Boolean
  removeEmployeeEmail(id: ID!): Boolean
  "删除群组"
  removeEmployeeGroup(id: ID!): Boolean
  removeEmployeePhone(id: ID!): Boolean
  "向群组中移除成员"
  removeEmployeeToGroup(employee: ID!, group: ID!): Boolean
  "删除场次报名人员（逻辑删除，可查已删除人员）"
  removeGhPlaceUsers(id: [ID], placeId: Int!, remarks: String): Boolean
  "删除delegate"
  removeGraphQLDelegateDefinition(id: ID!): Boolean
  "删除字段"
  removeGraphQLFieldDefinition(id: ID!): Boolean
  "删除类型"
  removeGraphQLTypeDefinition(id: ID!): Boolean
  "删除群组分类"
  removeGroupTypes(id: ID!): Boolean
  "删除索引"
  removeIndex(indexName: String): Boolean
  "删除派单规则"
  removeIssueAllocationRule(ruleId: ID!): Boolean
  "删除故障概要"
  removeIssueFaultDescription(id: ID!): Boolean
  "在权限列表中，删除某个用户拥有的某个权限"
  removeIssueGrantPermission(id: ID!): Boolean
  "删除优先级"
  removeIssuePriority(id: ID!): Boolean
  "删除页面"
  removeIssueScreen(id: ID!): Boolean
  "删除已分配到界面的字段"
  removeIssueScreenField(field: ID!, screen: ID!): Boolean
  "删除TabPane"
  removeIssueScreenTabPane(id: ID!): Boolean
  "删除已分配到TabPane的字段"
  removeIssueScreenTabPaneField(field: ID!, screen: ID!, tabPane: ID!): Boolean
  "删除状态"
  removeIssueStatus(id: ID!): Boolean
  "删除任务类型分类"
  removeIssueType(id: ID!): Boolean
  "删除任务类型"
  removeIssueTypeCategory(id: ID): Boolean
  "删除工作流"
  removeIssueWorkflow(id: ID!): Boolean
  "删除工作流方案设置的流程选择的问题类型"
  removeIssueWorkflowSchemeItem(id: ID!): Boolean
  "删除步骤"
  removeIssueWorkflowStep(id: ID): Boolean
  "删除步骤操作"
  removeIssueWorkflowStepTransition(id: ID!): Boolean
  "删除职务"
  removeJob(id: ID!): Boolean
  "删除章节"
  removeLesson(id: ID!): Boolean
  removeNoticeTemplate(id: ID!): Boolean
  "删除组织"
  removeOrganization(id: ID!): Boolean
  "删除组织人员状态"
  removeOrganizationEmployeeStatus(
    "主键"
    id: ID!
  ): Boolean
  "党费导入 删除党费"
  removePartyDues(id: ID): Boolean
  "删除权限"
  removePermission(
    "主键ID"
    id: ID!
  ): Boolean
  "删除权限"
  removePermissionType(
    "主键ID"
    id: ID!
  ): Boolean
  "删除门户"
  removePortal(id: ID!): Boolean
  "删除职位"
  removePosition(id: ID!): Boolean
  "删除学习目录"
  removeReadingNotes(id: ID!): Boolean
  "删除角色"
  removeRole(id: ID!): Boolean
  "删除角色分类"
  removeRoleType(
    "主键ID"
    id: ID!
  ): Boolean
  "删除路由"
  removeRoute(id: ID!): Boolean
  "删除服务"
  removeService(id: ID!): Boolean
  "批量删除服务"
  removeServices(ids: [ID]): Boolean
  "删除阶段"
  removeStage(id: ID!): Boolean
  "在权限列表中，删除某个用户拥有的某个权限"
  removeStageGrantPermission(id: ID!): Boolean
  "删除已分配到界面的字段"
  removeStageScreenField(field: ID!, screen: ID!): Boolean
  "删除TabPane"
  removeStageScreenTabPane(id: ID!): Boolean
  "删除已分配到TabPane的字段"
  removeStageScreenTabPaneField(field: ID!, screen: ID!, tabPane: ID!): Boolean
  "删除分隔符"
  removeStageSeparator(id: ID!): Boolean
  "删除流程"
  removeStageWorkflow(id: ID!): Boolean
  "删除页面"
  removeStageWorkflowScreen(id: ID): Boolean
  "删除步骤配置"
  removeStageWorkflowStep(id: ID!): Boolean
  "删除操作"
  removeStageWorkflowStepTransition(id: ID!): Boolean
  "移除星星"
  removeStar(
    "id 格式有两种 1. 直接为 ID 2. uid/starType/galaxy"
    id: ID!
  ): Boolean
  "移除电话对应的人员"
  removeTelEmployee(telId: ID): Boolean
  removeTelLogs(telId: ID): Boolean
  "删除用户"
  removeUser(id: ID!): Boolean
  "删除工作流方案"
  removeWorkflowScheme(id: ID!): Boolean
  "新增任务结果"
  resolutionIssue(issue: ID!, resolutionId: ID!): Boolean
  "退回"
  rollback(rollbackInput: RollbacksInput!): Boolean
  "退回节点"
  rollbackMotion(id: Int, step: Int): Boolean
  "执行数据同步"
  runDataTransmission(id: ID!): Boolean
  "新增预算"
  saveBudget(entity: BudgetInput!): Budget
  "保存草稿"
  saveDraft(input: DraftInput!): Boolean
  saveExampapertitle(input: ExampaperTitleInput): Boolean
  saveExamtopic(input: editExamtopicInput): Examtopic
  "新增预算专家论证信息"
  saveExpertDetail(entity: ExpertDetailInput): ExpertDetail
  "创建进口论证"
  saveImportArgument(departmentId: ID!, import: ImportArgumentInput, projectId: ID!, userId: ID): ImportArgument
  "功能:保存附议人信息"
  saveMotionSeconder(employee: ID!, motion: ID!): Boolean
  "保存提案步骤信息"
  saveMotionStep(empId: ID, motion: MotionInput, transactStatus: TransactStatus = TRANSACT): Boolean
  savePartyexpensesAll(input: [PartyexpensesInput]): [Partyexpenses]
  savePayStandardAll(input: [PaystandardInput]): [Paystandard]
  "保存付款"
  savePayment(
    "部门的id"
    departmentId: ID!, 
    "PaymentInput"
    payment: PaymentInput, 
    "项目的id"
    projectId: ID!, 
    "用户的id"
    userId: ID
  ): Payment
  "新增轮播图"
  savePhotoSet(
    "输入参数"
    input: [PhotoSetInput]
  ): [PhotoSet]
  saveQuestiontopicAll(input: [QuestiontopicInput]): [Questiontopic]
  "新增预算文件"
  saveYsDocument(entity: YsDocumentInput): YsDocument
  "留言"
  sendLeaving(input: LeavingInput!): Leavings
  "发送信息"
  sendMessage(employeeIds: [ID]!, message: String!): Boolean
  "手工推送通知给没已阅的人"
  sendMsgUnread(meetingId: ID, meetingName: String): Boolean
  "发送阅件"
  sendReading(input: [ReadingInput]!): [Reading]
  """
     打包下载
  batchDownload(tag: ID!): FileObject
   发送邮件
  """
  sendTemplateFileMail(email: String!, ids: [ID]!): Boolean
  sheetSubmit(examId: ID!, examinationPaperId: ID!, sheetChildrens: [SheetchildInput], sheetId: ID!): Sheet
  "单文件上传"
  singleUpload(file: Upload!): File!
  "开始任务"
  startIssue(issue: ID!): Boolean
  "开始测评所有调查问卷(匿名用户时，input不传或传空)"
  startResearchAllAnswer(input: ResearchJoinPersonInput, subjectId: Int!): ResearchStatJoinSummary
  "开始测评单个（被测评人？）调查问卷(匿名用户时，input中参与测评人不传或传空)"
  startResearchAnswer(input: ResearchStartAnswerInput!, paperId: Int, subjectId: Int!): ResearchStatJoinSummary
  "开始测评部分被测评人调查问卷(匿名用户时，joinerInput不传或传空)"
  startResearchSomeAnswer(beingInputs: [ResearchBeingPersonInput]!, joinerInput: ResearchJoinPersonInput, personType: String, subjectId: Int!): ResearchStatJoinSummary
  "提交评价表"
  submitAssessment(input: SubmitAssessmentInput): Boolean
  "表单提交"
  submitForm(map: JSON!, modelId: String!): String
  "功能：同步业务实体"
  syncModel(dataSource: String, id: ID!): Response
  "功能：将数据表同步到业务实体"
  syncTableStructure(filter: TableFilter): Boolean
  "功能：根据编制任务分解成其子任务"
  taskDecompose(id: ID): Boolean
  "统一执行方法"
  taskSubmission(input: ButtonParameterInput!, type: String!): Boolean
  "批量处理的方法"
  taskSubmissionBatch(inputs: [ButtonParameterInput]!, type: String!): Boolean
  "终止"
  termination(empId: String!, opinion: String, processInstanceId: String, taskId: String): Boolean
  "文章置顶"
  topArticle(
    "文章id"
    id: ID
  ): Boolean
  "评论置顶"
  topComment(
    "评论id"
    id: ID
  ): Boolean
  "转办"
  transfer(empId: String!, opinion: String!, receiver: String!, taskId: String!): Boolean
  "批量转办"
  transferBatch(batchInput: BatchInput!, empId: String!): Boolean
  "取消关注"
  unfollows(input: [ID]!): Boolean
  "取消关注"
  unwatchIssue(issueFollow: ID!): Boolean
  "update activity"
  updateActivity(input: updateActivityInput): updateActivityPayload
  "更新接口"
  updateApiManage(id: ID!, input: UpdateApiInput): Api
  "更新类型"
  updateApiTypeManage(id: ID!, input: UpdateApiTypeInput): ApiType
  "更新应用信息"
  updateApplication(id: ID!, input: ApplicationUpdateInput!, merge: Boolean = true): Application
  "更新应用分类"
  updateApplicationType(id: ID!, input: ApplicationTypeInput): ApplicationType
  "修改文章"
  updateArticle(id: ID!, input: ArticleUpdateInput!, merge: Boolean = true): Article
  "根据主键id修改发票信息"
  updateBill(bool: Boolean = true, id: ID, input: BillInput): Bill
  "更新预算"
  updateBudget(id: ID!, input: BudgetInput!, merge: Boolean = true): Budget
  "修改预算科目"
  updateBudgetAccount(input: BudgetAccountInput): BudgetAccount
  "步骤修改"
  updateBudgetAction(action: ID!, project: ID!, values: [PartyFeldValueInput]): Boolean
  "修改预算类别"
  updateBudgetCategory(input: BudgetCategoryInput, unitIds: [ID]): BudgetCategory
  "根据主键id修改预算内容信息"
  updateBudgetContent(
    "主键id"
    id: ID!, 
    input: BudgetContentUpdateInput, 
    merge: Boolean
  ): BudgetContent
  "根据主键id修改预算控制信息"
  updateBudgetControl(
    "主键id"
    id: ID!, 
    input: BudgetControlUpdateInput, 
    merge: Boolean
  ): BudgetControl
  "功能：根据主键ID修改预算编制"
  updateBudgetMake(id: ID!, input: BudgetMakeUpdateInput!, merge: Boolean = true): BudgetMake
  "根据主键id修改预算实体信息"
  updateBudgetModel(
    "主键id"
    id: ID!, 
    input: BudgetModelUpdateInput, 
    merge: Boolean
  ): BudgetModel
  "根据主键id修改预算期间信息"
  updateBudgetPeriod(
    "主键id"
    id: ID!, 
    input: BudgetPeriodUpdateInput, 
    merge: Boolean
  ): BudgetPeriod
  "修改预算编制任务"
  updateBudgetPlanning(input: BudgetPlanningInput): BudgetPlanning
  "预算进度设置"
  updateBudgetSchedule(
    "预算id"
    budget: ID!, 
    "标志位"
    flag: Sign!, 
    "流程id"
    flow: String!, 
    merge: Boolean = true, 
    "月份"
    month: String!
  ): Boolean
  "修改拆分明细"
  updateBudgetSplitDetailed(input: BudgetProjectDetailedInput): BudgetProjectDetailed
  "根据主键id修改预算科目表信息"
  updateBudgetSubject(
    "主键id"
    id: ID!, 
    input: BudgetSubjectUpdateInput, 
    merge: Boolean
  ): BudgetSubject
  "根据主键id修改科目目录表信息"
  updateBudgetSubjectCatalog(
    "主键id"
    id: ID!, 
    input: BudgetSubjectCatalogUpdateInput, 
    merge: Boolean
  ): BudgetSubjectCatalog
  "功能：根据主键ID修改预算任务信息"
  updateBudgetTask(id: ID!, input: BudgetTaskInput, merge: Boolean = true): BudgetTask
  "根据主键id修改预算类别信息"
  updateBudgetType(
    "主键id"
    id: ID!, 
    input: BudgetTypeUpdateInput, 
    merge: Boolean
  ): BudgetType
  "修改支部积分"
  updateCMSBranchIntegral(id: ID!, input: BranchIntegralInput, merge: Boolean = true): BranchIntegral
  "修改人员支部积分"
  updateCMSPeopleBranchIntegral(id: ID!, input: PeopleBranchIntegralInput, merge: Boolean = true): PeopleBranchIntegral
  "更新模块"
  updateCase(id: ID!, input: CaseCreateInput!, merge: Boolean = true): Case!
  updateCategory(id: ID!, input: CategoryInput): ProcessCategory
  updateCategoryStatus(id: ID!, status: Boolean!): Boolean
  "编辑栏目"
  updateChannel(id: ID!, input: ArticleChannelUpdateInput!, merge: Boolean = true): ArticleChannel
  "修改评论"
  updateComment(id: ID!, input: CommentInput!, merge: Boolean = true): Comment
  "更新组件"
  updateComponent(id: ID!, input: ComponentUpdateInput!, merge: Boolean = true): Component!
  "功能：根据主键id修改会议信息"
  updateCongressMeeting(id: ID!, input: CongressMeetingInput): Boolean
  "根据主键id修改会议信息(强制结束会议时调用)"
  updateCongressMeetingById(id: ID): Boolean
  "更新合同"
  updateContract(contract: ContractInput!, merge: Boolean = true): Contract
  "修改课程"
  updateCourse(id: ID!, input: CourseInput, merge: Boolean = true): Course
  "更新数据字典  id格式：\"type:code\""
  updateDataDictionary(id: ID!, input: DataDictionaryInput!): DataDictionary
  "更新数据源"
  updateDataSource(id: ID!, input: DataSourceUpdateInput!, merge: Boolean = true): DataSource
  "根据主键id修改API生成日志表信息"
  updateDdmApiLog(
    "主键id"
    id: ID!, 
    input: DdmApiLogUpdateInput, 
    merge: Boolean
  ): DdmApiLog
  "根据主键id修改院内决策申请表信息"
  updateDecisionApply(
    "主键id"
    id: ID!, 
    input: DecisionApplyUpdateInput, 
    merge: Boolean
  ): DecisionApply
  "功能：根据主键ID修改默认字段信息"
  updateDefaultModelField(id: ID!, input: DefaultModelFieldUpdateInput, merge: Boolean = true): ModelField
  updateDefineEvent(id: ID!, input: DefineEventInput!, merge: Boolean = true): DefineEvent
  updateDefineMessage(id: ID!, input: DefineMessageInput!, merge: Boolean = true): DefineMessage
  updateDefineNotice(id: ID!, input: DefineNoticeInput!, merge: Boolean = true): DefineNotice
  updateDefineRemind(id: ID!, input: DefineRemindInput!, merge: Boolean = true): DefineRemind
  "更新部门信息"
  updateDepartment(id: ID!, input: DepartmentUpdateInput!, merge: Boolean = true): Department
  "编辑部署"
  updateDeployment(category: String, deploymentId: String, key: String): Boolean
  "更新数据字典分类"
  updateDictionaryType(id: ID!, input: DataDictionaryTypeInput!): DataDictionaryType
  "修改版本信息"
  updateDjVersion(id: ID!, input: DjVersionUpdateInput, merge: Boolean = true): DjVersion
  "功能：根据主键id修改业务域"
  updateDomain(id: ID!, input: DomainUpdateInput, merage: Boolean = true): Domain
  "更新员工"
  updateEmployee(id: ID!, input: EmployeeUpdateInput!, merge: Boolean = true): Employee
  updateEmployeeEmail(emailId: ID!, employeeId: ID!, input: EmployeeEmailInput, merge: Boolean = true): EmployeeEmail
  "更新群组"
  updateEmployeeGroup(id: ID!, input: EmployeeGroupUpdateInput!, merge: Boolean = true): EmployeeGroup
  "修改组织机构人员标签(status值为2禁用-表示已被删除)"
  updateEmployeeLabel(input: GhEmployeeLabelInput!): Boolean
  updateEmployeePhone(employeeId: ID!, input: EmployeePhoneInput, merge: Boolean, phoneId: ID!): EmployeePhone
  "更新员工所在部门"
  updateEmployeePosition(input: EmployeePositionUpdateInput): Employee
  updateEntityuser(input: updateEntityuserInput): updateEntityuserPayload
  "根据主键id修改枚举信息"
  updateEnumeration(id: ID!, input: EnumerationUpdateInput, merge: Boolean = true): Enumeration
  "Upload one or many files"
  updateExam(input: updateExamInput): updateExamPayload
  updateExamandpaper(input: updateExamandpaperInput): updateExamandpaperPayload
  updateExamcondition(input: updateExamconditionInput): updateExamconditionPayload
  updateExaminationpaper(input: updateExaminationpaperInput): updateExaminationpaperPayload
  updateExampapertitle(input: updateExampapertitleInput): updateExampapertitlePayload
  updateExamreport(input: updateExamreportInput): updateExamreportPayload
  updateExamtopic(input: updateExamtopicInput): updateExamtopicPayload
  "更新专家信息"
  updateExpert(expert: ExpertInput!, id: ID, merge: Boolean = true): Expert
  "修改预算专家论证信息"
  updateExpertDetailService(
    "预算专家论证审批意见"
    entity: ExpertDetailInput
  ): ExpertDetail
  "专家论证信息批量操作"
  updateExpertDetailServiceBatch(
    "专家论证信息(医院同意数量、医院同意金额、论证意见)"
    expertDetails: [ExpertDetailInput]
  ): Boolean
  "更新专家论证场次"
  updateExpertScene(expertScene: ExpertSceneInput, id: ID, merge: Boolean = true): ExpertScene
  "专家论证批量操作"
  updateExpertSceneBatch(expertScenes: [ExpertSceneBatchInput]): Boolean
  "修改活动（含活动场次，图片、活动标签、报名规则、查看规则，若不填会被置空）"
  updateGhActivity(id: ID!, input: GhActivityUpdateInput): Boolean
  "更新活动基本信息"
  updateGhActivityBaseInfo(input: GhActivityBaseInfoInput): Boolean
  "更新可查看规则"
  updateGhActivityCanLookRules(id: ID!, rules: [GhActivityCanLookRuleUpdateInput]): Boolean
  "更新可报名规则"
  updateGhActivityCanSignUpRules(id: ID!, rules: [GhActivityCanSignUpRuleUpdateInput]): Boolean
  "更新活动图片"
  updateGhActivityImages(id: ID!, images: [GhActivityImageUpdateInput]): Boolean
  "更新活动单个场次"
  updateGhActivityPlace(input: GhActivityPlaceUpdateInput, placeId: ID!): Boolean
  updateGhActivitySign(id: ID!, input: GhActivitySignUpdateInput): GhActivitySign
  "更新活动标签"
  updateGhActivitySigns(id: ID!, signIds: [String]): Boolean
  updateGhAssocUserPosition(id: ID!, input: GhAssocUserPostionInput): Boolean
  updateGhAssocUsersStatus(input: [GhAssociationUserStatusInput]): Boolean
  updateGhAssociation(id: ID!, input: GhAssociationUpdateInput): GhAssociation
  "修改社团状态"
  updateGhAssociationStatus(id: ID!, remarks: String, status: Int!): GhAssociation
  "根据主键id修改我的历程信息"
  updateGhEmployeeJourney(
    "主键id"
    id: ID!, 
    input: GhEmployeeJourneyUpdateInput, 
    merge: Boolean
  ): GhEmployeeJourney
  updateGhEquipment(id: Int!, input: GhEquipmentInput): Boolean
  "修改器材预定"
  updateGhEquipmentReserve(id: Int!, input: GhEquipmentReserveInput): Boolean
  "修改器材类型"
  updateGhEquipmentType(id: Int!, input: GhEquipmentTypeInput): Boolean
  "更新社团活动报名人审核状态"
  updateGhPlaceUsersStatus(input: [GhActivityPlaceUserStatusInput]): Boolean
  "修改delegate"
  updateGraphQLDelegateDefinition(id: ID!, input: GraphQLDelegateInput): GraphQLDelegate
  "更新字段"
  updateGraphQLFieldDefinition(id: ID!, input: GraphQLFieldDefinitionUpdateInput!): GraphQLFieldDefinition
  "更新类型"
  updateGraphQLTypeDefinition(id: ID!, input: GraphQLTypeDefinitionUpdateInput!): GraphQLTypeDefinition
  "更新群组分类"
  updateGroupTypes(
    input: EmployeeGroupScopeUpdateInput!, 
    "组织id"
    organization: ID!
  ): EmployeeGroupScope
  "修改进口论证"
  updateImportArgument(
    "进口id"
    id: ID!, 
    "进口详情"
    importArgument: ImportArgumentInput!, 
    "merge"
    merge: Boolean = true
  ): ImportArgument
  "修改加分申请"
  updateIntegralApply(input: IntegralApplyInput): IntegralApply
  "根据主键id修改积分类别信息"
  updateIntegralCategory(id: ID!, input: IntegralCategoryUpdateInput, merge: Boolean): IntegralCategory
  "修改人员积分"
  updateIntegralEmployeeRules(input: [IntegralEmployeeRuleInput]): [IntegralEmployeeRule]
  "修改积分考核表"
  updateIntegralExamineForm(id: ID!, input: IntegralExamineFormInput): IntegralExamineForm
  "根据主键id修改积分规则信息"
  updateIntegralRegulation(id: ID!, input: IntegralRegulationUpdateInput, merge: Boolean): IntegralRegulation
  updateIntegrationRule(
    "输入参数"
    input: OperatingScoreInput
  ): OperatingScore
  "编辑互动交流"
  updateInteraction(id: ID!, input: InteractionInput): Interaction
  "更新任务"
  updateIssue(id: ID!, input: IssueUpdateInput!, merge: Boolean = true): Issue
  "更新派单规则"
  updateIssueAllocationRule(input: IssueAllocationRuleInput!, ruleId: ID): Boolean
  "修改自动评价规则"
  updateIssueAppraisalRule(input: IssueAppraisalRuleInput, merge: Boolean = true, ruleId: ID!): Boolean
  "修改故障概要"
  updateIssueFaultDescription(id: ID!, input: IssueFaultDescriptionInput, merge: Boolean = true): IssueFaultDescription
  "修改消息提醒规则"
  updateIssueMessageRule(input: IssueMessageRuleInput!, merge: Boolean = true, ruleId: ID!): Boolean
  "更新优先级"
  updateIssuePriority(id: ID!, input: IssuePriorityInput!, merge: Boolean = true): IssuePriority
  "修改页面"
  updateIssueScreen(id: ID!, input: IssueScreenInput, merge: Boolean = true): IssueScreen
  "修改状态"
  updateIssueStatus(id: ID!, input: IssueStateInput!, merge: Boolean = true): IssueStatus
  "修改任务类型分类"
  updateIssueType(id: ID!, input: IssueTypeInput, merge: Boolean = true): IssueType
  "更新任务类型"
  updateIssueTypeCategory(id: ID!, input: IssueTypeCategoryInput, merge: Boolean = true): Boolean
  "修改工作流"
  updateIssueWorkflow(id: ID!, input: IssueWorkflowInput, merge: Boolean = true): IssueWorkflow
  "编辑工作流方案"
  updateIssueWorkflowScheme(id: ID!, input: IssueWorkflowSchemeCreateInput, merge: Boolean = true): IssueWorkflowScheme
  "修改工作流方案设置的流程选择的问题类型"
  updateIssueWorkflowSchemeItem(id: ID!, issueTypes: [ID]!, merge: Boolean = true): IssueWorkflowSchemeItem
  "修改步骤"
  updateIssueWorkflowStep(id: ID!, merge: Boolean = true, name: String): IssueWorkflowStep
  "修改步骤操作"
  updateIssueWorkflowStepTransition(id: ID!, input: IssueWorkflowStepTransitionCreateInput, merge: Boolean = true): IssueWorkflowStep
  "更新职务信息"
  updateJob(id: ID!, input: JobUpdateInput!, merge: Boolean = true): Job
  updateJoincondition(input: updateJoinconditionInput): updateJoinconditionPayload
  "根据主键id修改知识库信息"
  updateKnowledge(id: ID, input: KnowledgeInput): Knowledge
  "根据主键id修改知识类型信息"
  updateKnowledgeType(id: ID, input: KnowledgeTypeInput): KnowledgeType
  "添加学习记录"
  updateLearningProgress(
    "课程ID"
    course: ID!, 
    "学习人"
    learner: ID!, 
    "章节ID"
    lesson: ID!, 
    "学习进度 0 - 100"
    progress: Int!, 
    "学习人类型"
    type: LearnerType!
  ): LessonRecord
  "修改章节"
  updateLesson(id: ID!, input: LessonInput, merge: Boolean = true): Lesson
  "功能：修改表结构信息(MYSQL)"
  updateMSDateTable(input: TableStructureInput): MSResponse
  "根据主键id修改项目代码管理信息"
  updateMange(
    "主键id"
    id: ID!, 
    input: MangeUpdateInput, 
    merge: Boolean
  ): Mange
  "update meeting"
  updateMeeting(input: updateMeetingInput): updateMeetingPayload
  "功能:修改文档信息"
  updateMeetingDocument(id: ID!, input: MeetingDocumentInput): Boolean
  updateMeetingPhoto(
    "用户id"
    id: ID!, 
    "图片id"
    photo: String!
  ): FileObject
  "修改会议录播"
  updateMeetingRecorded(
    "输入参数"
    input: MeetingRecordedInput
  ): MeetingRecorded
  "功能：根据主键id修改角色信息"
  updateMeetingRole(id: ID, input: MeetingRoleInput): Boolean
  "功能：根据主键id修改会议议题信息"
  updateMeetingTopic(id: ID, input: MeetingTopicInput): Boolean
  "修改会议类型"
  updateMeetingTypeSecurity(input: MeetingTypeSecurityInput, meetingTypeId: Int!): Boolean
  updateMeetingnotice(input: updateMeetingnoticeInput): updateMeetingnoticePayload
  updateMeetingreserve(input: updateMeetingreserveInput): updateMeetingreservePayload
  "update meetingRoom"
  updateMeetingroom(input: updateMeetingroomInput): updateMeetingroomPayload
  updateMeetingtype(input: updateMeetingtypeInput): updateMeetingtypePayload
  "update meetingVote"
  updateMeetingvote(input: updateMeetingvoteInput): updateMeetingvotePayload
  updateMeetingvotedetail(input: updateMeetingvotedetailInput): updateMeetingvotedetailPayload
  "根据主键id修改业务实体"
  updateModel(id: ID!, input: ModelUpdateInput, merge: Boolean = true): Model
  "功能：根据主键ID修改业务实体扩展信息"
  updateModelDataExpansion(id: ID, input: ModelDataExpansionUpdateInput, merge: Boolean): DataExpansion
  "功能：根据主键id修改实体字段信息"
  updateModelField(id: ID!, input: ModelFieldUpdateInput, merge: Boolean = true): ModelField
  "功能：根据主键ID修改实体字段过滤条件"
  updateModelFieldFilter(id: ID!, input: ModelFieldFilterUpdateInput, merge: Boolean = true): ModelFieldFilter
  "功能：根据主键ID修改业务实体扩展信息"
  updateModelInterface(id: ID, input: ModelInterfaceUpdateInput, merge: Boolean): ModelInterface
  "功能：根据主键id修改提案信息"
  updateMotion(id: ID!, input: MotionInput): Boolean
  "修改提案类型"
  updateMotionType(id: ID!, input: MotionTypeInput, merge: Boolean = true): Boolean
  updateNoticeTemplate(id: ID!, input: NoticeTemplateInput!, merge: Boolean = true): NoticeTemplate
  "功能：保存意见审批信息"
  updateOpinion(input: OpinionInput): Boolean
  "修改意见征集"
  updateOpinionCollect(id: ID!, input: OpinionCollectUpdateInput, merge: Boolean): OpinionCollect
  "修改意见类型"
  updateOpinionType(id: ID!, input: OpinionTypeUpdateInput, merge: Boolean): OpinionType
  "根据主键id修改人员表信息"
  updateOrgEmployee(
    "主键id"
    id: ID!, 
    input: OrgEmployeeUpdateInput, 
    merge: Boolean
  ): OrgEmployee
  "更新组织信息"
  updateOrganization(id: ID!, input: OrganizationUpdateInput!, merge: Boolean = true): Organization
  "更新组织人员状态"
  updateOrganizationEmployeeStatus(
    "组织人员状态Id"
    id: ID!, 
    "组织人员状态Id"
    input: OrganizationEmployeeStatusUpdateInput!, 
    "组织Id"
    organization: ID!
  ): OrganizationEmployeeStatus
  "修改分布提交"
  updatePartyAction(
    "修改分布提交入参"
    input: PartyApplyActionInput!
  ): Boolean
  "更新申请"
  updatePartyApplys(id: ID!, merge: Boolean = true, partyapplys: PartyApplysInput!): PartyApplys
  "更新考核"
  updatePartyAssessment(id: ID!, input: AssessmentInput, merge: Boolean = true): PartyAssessment
  "编辑"
  updatePartyEvaluate(input: PartyEvaluatesUpadateInput, merge: Boolean = true, where: ID!): PartyEvaluate
  "学习记录修改接口"
  updatePartyLearnRecord(input: LearnRecordInput, merge: Boolean = true, where: ID!): LearnRecord
  "编辑学习主题"
  updatePartyLearnTheme(input: LearnThemeInput, merge: Boolean = true, parsing: Boolean, where: ID!): LearnTheme
  "编辑班组"
  updatePartyTeam(input: TeamInput, merge: Boolean = true, where: ID!): Team
  updatePartybill(input: updatePartybillInput): updatePartybillPayload
  updatePartyexpenses(input: updatePartyexpensesInput): updatePartyexpensesPayload
  "更新付款"
  updatePayment(id: ID, merge: Boolean = true, payment: PaymentInput!): Payment
  updatePayscale(input: updatePayscaleInput): updatePayscalePayload
  updatePaystandard(input: updatePaystandardInput): updatePaystandardPayload
  "修改权限"
  updatePermission(
    "主键ID"
    id: ID!, 
    input: PermissionUpdateInput, 
    merge: Boolean = true
  ): Permission
  "修改权限分类"
  updatePermissionType(
    "主键ID"
    id: ID!, 
    input: PermissionTypeUpdateInput, 
    merge: Boolean = true
  ): PermissionType
  "修改轮播图"
  updatePhotos(
    "输入参数"
    input: [PhotoSetInput]
  ): [PhotoSet]
  "修改门户"
  updatePortal(id: ID!, input: PortalInput): Portal
  updateProcess(input: UpdateProcessInput): ProcessAppLocation
  updateProcessApplication(input: UpdateProcessAppLocationInput): ProcessAppLocation
  updateProcessForm(modelId: String!, processFormInput: ProcessFormInput): ProcessForm
  updateProcessModel(input: SaveModelInput, model: String!): ProcessModel
  "根据主键id修改项目信息"
  updateProject(flag: Boolean = true, id: ID, input: ProjectUpdateInput): Project
  "根据主键id修改合同信息"
  updateProjectContract(flag: Boolean = true, id: ID, input: ProjectContractUpdate): ProjectContract
  "根据主键id修改项目代码管理信息"
  updateProjectManagement(
    "主键id"
    id: ID!, 
    input: ProjectManagementUpdateInput, 
    merge: Boolean
  ): ProjectManagement
  "根据主键修改会议信息"
  updateProjectMeeting(flag: Boolean, id: ID!, input: ProjectMeetingInput): ProjectMeeting
  "根据主键id修改项目留言信息"
  updateProjectNote(id: ID, input: ProjectNoteUpdate, merge: Boolean = true): ProjectNote
  "更新预算拆分进度"
  updateProjectSchedule(id: ID!, merge: Boolean = true, projectSchedule: ProjectScheduleInput): ProjectSchedule
  "根据主键id修改项目主题信息"
  updateProjectTheme(id: ID, input: ProjectThemeUpdate, marge: Boolean = true): ProjectTheme
  "根据项目id、阶段id更新实际完成日期"
  updateProjectTime(input: ProjectTimeInput): Boolean
  "根据id修改密码"
  updatePwd(
    "id"
    id: ID!, 
    "新密码"
    newPwd: String!, 
    "旧密码"
    oldPwd: String!
  ): Boolean
  updateQuestionbank(input: updateQuestionbankInput): updateQuestionbankPayload
  "功能:根据主键id修改问卷信息"
  updateQuestionnaire(id: ID!, input: QuestionnaireInput): Boolean
  "update Questiontopic"
  updateQuestiontopic(input: updateQuestiontopicInput): updateQuestiontopicPayload
  "编辑学习目录"
  updateReadingNotes(id: ID!, input: ReadingNotesInput, merge: Boolean = true): ReadingNotes
  updateRelatedaccessory(input: updateRelatedaccessoryInput): updateRelatedaccessoryPayload
  "问卷模板1启用,0禁用"
  updateResearchAskStatus(id: Int!, status: Boolean = true): Boolean
  "修改常用问卷（注意：题目为矩阵量表时则题目选项一样）"
  updateResearchGeneralAsk(id: Int, input: ResearchAskInput): Boolean
  "修改矩阵单选、矩阵多选、矩阵量表问卷（相同题目选项问卷（场景：满意度调查/合格率））"
  updateResearchMatrixAsk(id: Int!, input: ResearchMatrixAskInput): Boolean
  "修改调查主题"
  updateResearchSubject(id: Int!, input: ResearchSubjectInput): Boolean
  "修改主题分类"
  updateResearchType(id: Int!, input: ResearchTypeInput): Boolean
  "更新角色"
  updateRole(id: ID!, input: RoleUpdateInput!, merge: Boolean = true): Role
  "修改角色分类"
  updateRoleType(
    "主键ID"
    id: ID!, 
    input: RoleTypeUpdateInput, 
    merge: Boolean = true
  ): RoleType
  "更新路由信息"
  updateRoute(id: ID!, input: RouteUpdateInput!, merge: Boolean = true): Route
  "修改服务"
  updateService(id: ID!, input: ServiceUpdateInput!): Service
  updateSheet(input: updateSheetInput): updateSheetPayload
  updateSheetchild(input: updateSheetchildInput): updateSheetchildPayload
  "会议签到"
  updateSingIn(employee: ID, meeting: ID): Boolean
  "更新拆分预算"
  updateSplitBudget(id: ID, merge: Boolean = true, project: BudgetProjectInput!): BudgetProject
  "修改阶段"
  updateStage(id: ID!, input: StageInput!, merge: Boolean = true): Stage
  "更新字段"
  updateStageField(id: ID!, input: StageFieldInput): StageField
  "更新字段配置"
  updateStageFieldConfigurationItem(id: ID!, input: StageFieldConfigurationItemInput, merge: Boolean = true): StageFieldConfigurationItem
  "修改权限"
  updateStagePermission(id: ID!, input: StagePermissionUpdateInput!, merge: Boolean): StagePermission
  "修改分隔符"
  updateStageSeparator(input: StageSeparatorUpdateInput): Boolean
  "修改流程"
  updateStageWorkflow(id: ID!, input: StageWorkflowInput, merge: Boolean = true): StageWorkflow
  "修该页面"
  updateStageWorkflowScreen(id: ID, input: StageWorkflowScreenInput, merge: Boolean = true): StageWorkflowScreen
  "修改步骤配置"
  updateStageWorkflowStep(id: ID!, input: StageWorkflowStepUpdateInput!, merge: Boolean = true): StageWorkflowStep
  "修改操作"
  updateStageWorkflowStepTransition(id: ID!, input: StageWorkflowStepTransitionInput!, merge: Boolean = true): StageWorkflowStepTransition
  "Upload one or many files"
  updateSummarybrief(input: updateSummarybriefInput): updateSummarybriefPayload
  "修改会议补录"
  updateSupplementaryMeeting(input: SupplementaryMeetingInput, where: ID!): SupplementaryMeeting
  "修改电话对应的人员"
  updateTelEmployee(input: telEmployeeInput, merge: Boolean, telId: ID): TelEmployee
  "修改"
  updateTemplate(input: TemplateUpdateInput, merge: Boolean = true, where: ID!): Template
  "修改文件"
  updateTemplateFile(input: TemplateFileInput!): TemplateFile
  "修改文件类目"
  updateTemplateFileTag(input: TemplateFileTagInput!, where: ID!): TemplateFileTag
  updateTests(input: updateTestsInput): updateTestsPayload
  updateTopiccollect(input: updateTopiccollectInput): updateTopiccollectPayload
  "修改用户"
  updateUser(employeeId: ID, id: ID, input: UserUpdateInput!, merge: Boolean = true): User
  "修改版本库"
  updateVersionLibrary(id: ID!, input: VersionDatabaseUpdateInput, merge: Boolean = true): VersionDatabase
  updateVoteoption(input: updateVoteoptionInput): updateVoteoptionPayload
  "升级路由版本"
  upgrader: Boolean
  "催办"
  urge(input: [UrgeInput]!, taskId: String!): Boolean
  "关注任务"
  watchIssue(issue: ID!, uid: ID!): Boolean
}

type NewEntityUser {
  meeting: NewMeeting
  user: ID
  userType: String
}

type NewMeeting {
  "参加会议的状态"
  attendStatus(employee: ID!): String
  "参会人"
  attendees: [NewEntityUser]
  "会议倒计时（分钟）"
  countdown: Int
  "创建时间"
  created_at: Date
  "发布组织"
  department: Department
  "结束时间"
  endTime: Date
  "附件"
  files: [FileObject]
  "是否上传会议纪要"
  haveSummary: Boolean
  id: ID
  "身份"
  identity(employee: ID!): [String]
  "会议说明"
  instruction: String
  "发布人"
  meetingCreator: Employee
  "会议地点"
  meeting_place: String
  "会议类型"
  meetingtypes: [NewMeetingType]
  "会议名称"
  name: String
  "签到方式"
  signWay: String
  "开始时间"
  startTime: Date
  "会议状态"
  status: String
}

type NewMeetingEdge {
  cursor: String
  node: NewMeeting
}

type NewMeetingType {
  id: ID
  meetingIsType: String
  "会议类型名称"
  meetingIsTypeName: String
}

"""
type ViewRecordConnection{
    # 总数据条数
    totalCount: Int
    # 每页显示条数
    pageSize: Int
    # 总页数
    totalPage: Int
    # 当前页
    currentPage: Int
    edges: [ViewRecordEdge]
    pageInfo: PageInfo
}

type ViewRecordEdge{
    cursor: String
    node: ViewRecord
}
"""
type NewMeetingsConnection {
  "当前页"
  currentPage: Int
  edges: [NewMeetingEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type NodeAttribute {
  handlingMode: HandlingMode
}

"非党员视图"
type NonPartyBIData {
  ageView: AgeView
  partyEducationView: PartyEducationView
  partyTitleView: PartyTitleView
  teamLeaderView: TeamLeaderView
}

type NoticeResponse {
  "通知时间"
  date(format: String): Date
  "通知详细ID"
  id: ID
  "通知主题"
  title: String
  "通知类型"
  type: NoticeType
}

type NoticeTemplate {
  code: String
  content: String
  id: ID
  name: String
  type: NoticeType
}

type NoticeTemplateConnection {
  "当前页"
  currentPage: Int
  edges: [NoticeTemplateEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type NoticeTemplateEdge {
  cursor: String
  node: NoticeTemplate
}

"通知"
type Notification {
  "聊天室 / 会话 / 渠道 / 类型"
  channel: NotificationChannel
  "消息内容"
  content: String
  "创建时间"
  createdAt: String
  """
    通知消息
  message: MessageCenter
  消息格式
  """
  format: MessageFormat
  "消息图标"
  icon: String
  "主键"
  id: ID
  "消息标题"
  title: String
}

"通知频道"
type NotificationChannel {
  "主键"
  id: ID
  "名称"
  name: String
}

type NumberField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: Float
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "格式"
  format: NumberFormat
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否主键"
  isPrimaryKey: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type OAUser {
  "用户账户"
  userAccounts: String
  "用户id"
  userId: String
  "用户名称"
  userName: String
}

type OAVendor {
  gsmc: String
  id: String
  khh: String
  yhzh: String
}

"OA门户返回节点"
type OaGatewayNode {
  layoutId: ID
  layoutName: String
  loginUsed: ID
  ownerModule: String
  portalMenuName: String
  portalTypeId: ID
  portalTypeName: String
}

"积分规则"
type OperatingScore {
  code: String
  enable: Boolean
  id: ID
  name: String
  score: Int
  type: String
}

type OperationEmployee {
  jobNumber: String
  name: String
}

type OperationPermission {
  attribute: JSON
  defaultSelection: Boolean
  disabled: Boolean
  label: String
  name: String
  param: [ConfigurationProperties]
}

type Opinion {
  "受理意见"
  acceptTheOpinion: String
  "审批意见"
  approvalOpinion: String
  "主键"
  id: ID
  "提案id"
  motionId: ID
  "提案落实"
  motionPracticable: MotionPracticable
  "满意度"
  motionSatisfaction: MotionSatisfaction
  "签署意见"
  signingOpinions: String
  "阶段"
  stage: Int
  "流程节点"
  step: Int
}

type OpinionCollect {
  "标识"
  code: String
  "内容"
  content: String
  "创建时间"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "组织•员工"
  employee: Employee
  "文件"
  file: String
  "附件数量"
  fileNumber: Int
  "id"
  id: ID
  "图片"
  img: String
  "意见类型"
  opinionType: OpinionType
  "回复内容"
  replyContent: String
  "回复文件"
  replyFile: String
  "回复图片"
  replyImg: String
  "意见编号"
  sn: String
  "是否未回复"
  status: Boolean
  "标题"
  title: String
  "修改日期"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
}

type OpinionCollectConnection {
  "当前页"
  currentPage: Int
  edges: [OpinionCollectEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type OpinionCollectEdge {
  cursor: String
  node: OpinionCollect
}

"意见征集"
type OpinionCollection {
  date: Date
  deptName: String
  employee: Employee
  id: ID
  opinion: String
  paths: [FileObject]
  title: String
}

"意见征集分页"
type OpinionCollectionConnection {
  currentPage: Int
  edges: [OpinionCollectionEdge]
  pageInfo: Int
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

"分页"
type OpinionCollectionEdge {
  cursor: String
  node: OpinionsCollection
}

"意见人员组别"
type OpinionEmployeeGroup {
  employee: Employee
  group: OpinionGroup
  id: ID
  isleader: Boolean
}

"意见组别"
type OpinionGroup {
  id: ID
  name: String
}

type OpinionType {
  "标识"
  code: String
  "id"
  id: ID
  "意见类型名称"
  name: String
  "意见征集"
  opinionCollect: [OpinionCollect]
  "状态"
  status: Boolean
}

type OpinionTypeConnection {
  "当前页"
  currentPage: Int
  edges: [OpinionTypeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type OpinionTypeEdge {
  cursor: String
  node: OpinionType
}

"OpinionValue"
type OpinionValue {
  key: ID
  opinionValue: String
}

"意见征集"
type OpinionsCollection {
  date: Date
  deptName: String
  employee: Employee
  group: OpinionGroup
  id: ID
  opinion: String
  paths: [FileObject]
  title: String
}

type Option {
  group: String
  name: String
  value: String
}

"选项类型表"
type OptionType {
  id: ID
  name: String
}

"人员表"
type OrgEmployee {
  "用户ID"
  UserId: String
  "头像"
  avatar: String
  avatarPath: String
  "生日"
  birthday(
    format: String, 
    "入参"
    input: String
  ): Date
  createTime(
    format: String, 
    "入参"
    input: String
  ): Date
  creator: String
  "邮件"
  email: String
  "部门信息"
  employeePositionsList: [EmployeePosition]
  "状态"
  employeeStatus: EmployeeStatus
  "英文名称"
  englishname: String
  "主键id"
  id: ID
  "工号"
  jobNumber: String
  "移动电话"
  mobile: String
  modifier: String
  modifyTime(
    format: String, 
    "入参"
    input: String
  ): Date
  "名称"
  name: String
  "组织ID"
  orgId: String
  orgid: String
  position: String
  "性别"
  sex: String
  signatureimgname: String
  "简称"
  sn: String
  "状态"
  status: String
  "员工标签"
  tags: String
  "电话"
  tel: String
  userordercode: String
  usersimplename: String
  usersuperbegin(
    format: String, 
    "入参"
    input: String
  ): Date
  usersuperend(
    format: String, 
    "入参"
    input: String
  ): Date
  zfBirthday_45fec00554(
    format: String, 
    "入参"
    input: String
  ): Date
  zfBirthday_8046cd826d(
    format: String, 
    "入参"
    input: String
  ): Date
}

"人员表"
type OrgEmployeeConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [OrgEmployeeEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type OrgEmployeeEdge {
  cursor: String
  node: OrgEmployee
}

type OrgInfo {
  "组织id"
  orgId: String
  "组织名称"
  orgName: String
}

type Organization {
  "创建时间"
  createdAt: Date
  "创建人"
  creator: String
  "部门类型"
  departmentTypes: [DepartmentType]
  "组织部门"
  departments(filter: DepartmentFilter): [Department]
  "组织下人员"
  employees(
    "过滤条件"
    filter: EmployeeFilter, 
    "排序"
    orderBy: OrderBy, 
    "分页页数"
    page: Int = 1, 
    "分页大小"
    pageSize: Int = 15
  ): [EmployeeConnection]
  id: String
  "组织职位"
  jobs(orderBy: OrderBy): [Job]
  "修改人"
  modifier: String
  "是否支持多部门"
  multiSectoral: Boolean
  "支持最多部门数"
  multiSectoralNumber: Int
  name: String
  parent: Organization
  remark: String
  "组织下的角色"
  roles(enabled: Boolean = true): [Role]
  "修改时间"
  updatedAt: Date
}

type OrganizationEmployeeStatus {
  "状态编码"
  code: String
  "ID"
  id: ID
  isDefault: Boolean
  "状态"
  name: String
  "所属组织"
  organization: Organization
}

type OrganizationResponse {
  data: OrganizationResponse
  "组织信息"
  orgs: [OrgInfo]
}

type OverdueHandling {
  autoHandling: Boolean
  autoHandlingStatus: Int
  dueHour: Int
  noticeContents: String
  noticeTypes: String
  open: Boolean
  sendNotice: Boolean
}

type PBIntegral {
  cursor: String
  node: PeopleBranchIntegral
}

"页信息"
type PageInfo {
  "数据页最后一个游标"
  endCursor: String
  "是否存在下一页"
  hasNextPage: Boolean
  "是否存在上一页"
  hasPreviousPage: Boolean
  "数据页第一个游标"
  startCursor: String
}

"党龄统计视图"
type PartyAgeDetailView {
  "数量"
  amount: Int
  "编码"
  code: String
  "姓名"
  name: String
  "性别"
  sex: String
}

"党龄统计详情视图"
type PartyAgeView {
  "部门名"
  deptName: String
  "党龄分布统计"
  detail: [PartyAgeDetailView]
  "女性人数"
  femaleAmount: Int
  "男性人数"
  maleAmount: Int
}

"党员发展概览数据"
type PartyApplyData {
  "组织或支部党员发展数量"
  amount: Int
  "支部"
  departmentDates: [PartyApplyView]
  "返回的集合信息"
  employees: [BranchData]
  "组织或支部id"
  id: ID
  "组织或支部名称"
  name: String
  "百分比柱状图"
  tabPercentView: [TabViewData]
  "树状图"
  tabView: [TabViewData]
}

type PartyApplyFile {
  "文件"
  files: [FileObject]
  "文件对应阶段"
  stage: Stage
  "文件对应步骤"
  step: StageWorkflowStep
}

type PartyApplyMessageConfigList {
  "是否显示"
  flag: String
  "消息内容"
  messageConfig: MessageConfig
  "消息对应阶段"
  stage: Int
  "消息对应步骤"
  step: Int
}

type PartyApplyRecord {
  "操作时间"
  createdAt: Date
  "操作者"
  creator: Employee
  "修改字段名"
  field: String
  "ID"
  id: ID
  "修改人姓名"
  name: String
  "修改后的值"
  newValue: String
  "修改前的值"
  oldValue: String
  "修改人所属组织"
  orgName: String
  "步骤名"
  step: String
}

type PartyApplyRecordConnection {
  "当前页"
  currentPage: Int
  edges: [PartyApplyRecordEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyApplyRecordEdge {
  cursor: String!
  node: PartyApplyRecord
}

"党员发展组织/部门数据概览"
type PartyApplyView {
  "部门编号"
  deptId: Int
  "部门名称"
  deptName: String
  "党员发展数量"
  partyAmount: Int
  "待办数"
  toDoNumber(
    "入参员工ID"
    employeeId: ID!
  ): Int
}

type PartyApplys {
  "入党志愿书"
  WYABfile: [FileObject]
  "入党志愿书编号"
  WYABsn: String
  "党委备案同意日期(确认为发展对象时间)"
  agreeDate: String
  "人员信息列表"
  applicant: Employee
  "入党申请日期"
  applyDate: String
  """
    发展党员工作归档材料目录表
  directoryfile:[FileObject]
  归档日期
  """
  archiveDate: String
  "申请人出生日期"
  birthday: String
  "所属支部"
  branch: Int
  "支部大会讨论会议时间(预备党员接受日期)"
  branchmeeting: String
  "支部大会会议决议"
  branchmeetingResults: String
  "预备党员支部大会会议决议文件"
  branchmeetingResultsfile: [FileObject]
  "支部大会会议决议备注"
  branchmeetingremark: String
  "所属支部名称"
  branchname: String
  "上级党委审批会议时间"
  committeeMeetingDate: String
  "上级党委审批会议讨论备注"
  committeeMeetingRemark: String
  "上级党委审批会议讨论结果"
  committeeMeetingResults: String
  "预备党员党委批复文件"
  committeeMeetingfile: [FileObject]
  "再上一级党委组织部门备案报告"
  committeeRecordReport: [FileObject]
  "指定联系人"
  contact: String
  "学位"
  degree(
    "数据字典类型"
    type: String
  ): String
  "支委会讨论日期"
  discussDate: String
  "支委会讨论备注"
  discussRemark: String
  "支委会讨论结果"
  discussResults: String
  "学历"
  education(
    "数据字典类型"
    type: String
  ): String
  "字段配置"
  fieldConfiguration: StageFieldConfiguration
  "动态字段值列表FieldValue"
  fieldValues: [FieldValue]
  """
    积极分子入党培养考察记录册
  rdpyInspectionfile:[FileObject]
  确认发展对象听取意见
  """
  fzdxOpinion: String
  "发展对象预审报告"
  fzdxPretrialReport: [FileObject]
  "发展对象预审报告提交时间"
  fzdxPretrialReportDate: String
  "发展对象备案报告"
  fzdxRecordfile: [FileObject]
  "发展对象备案报告上报时间"
  fzdxRecordfileDate: String
  "发展对象培训证书"
  fzdxTrainfile: [FileObject]
  "党委备案批复备注"
  fzdxreplyRemark: String
  "发展对象党委批复结果文件"
  fzdxreplyResultfile: [FileObject]
  id: ID
  "申请人身份证号"
  idCard: String
  "入党积极分子推荐表"
  jjfzRecommendfile: [FileObject]
  "积极分子备案报告上报时间"
  jjfzRecordDate: String
  "积极分子备案报告"
  jjfzRecordfile: [FileObject]
  "确认为积极分子日期"
  jjfzconfirmDate: String
  "极分子思想汇报"
  jjfzthoughtReports: [FileObject]
  "申请人姓名"
  name: String
  "申请人民族"
  national(
    "数据字典类型"
    type: String
  ): String
  "申请人籍贯"
  nativeplace(
    "数据字典类型"
    type: String
  ): String
  "宣誓日期"
  oathDate: String
  "消息配置"
  partyApplyMessageConfigs: [PartyApplyMessageConfigList]
  "修改操作记录"
  partyApplyRecords: [PartyApplyRecord]
  "预备期结束日期(转正日期)"
  perpareEndDate: String
  "申请人电话"
  phonenumber: String
  "照片"
  pic: [FileObject]
  "政审备注"
  politicsCarefulRemark: String
  "政审结论"
  politicsCarefulResults: String
  "发展对象政审表"
  politicsCarefulfile: [FileObject]
  "申请人职务"
  position: String
  "提交转正申请日期"
  positiveDate: String
  "支部大会讨论转正会议日期"
  positiveMeetingDate: String
  "支部大会讨论转正会议备注"
  positiveMeetingRemark: String
  "支部大会讨论转正会议结果"
  positiveMeetingResult: String
  "支部大会讨论转正会议记录表"
  positiveMeetingfile: [FileObject]
  "关于审议预备党员转正的报告"
  positiveReport: [FileObject]
  "关于审议预备党员转正的报告上报时间"
  positiveReportDate: String
  "转正申请书"
  positivefile: [FileObject]
  "预备期开始日期"
  prepareStartDate: String
  "党委预审意见"
  pretrialResults: String
  "发展对象党委预审意见文件"
  pretrialResultsfile: [FileObject]
  "党委预审意见备注"
  pretrialremark: String
  "入党培养考察记录册"
  rdpxInspectionfile: [FileObject]
  "入党申请人登记表"
  rdsqRegisterfile: [FileObject]
  "入党申请书"
  rdsqfile: [FileObject]
  "入党介绍人"
  recommender: String
  "党委备案意见"
  recordOpinion: String
  "党委备案意见备注"
  recordOpinionRemark: String
  "党委备案意见表"
  recordOpinionfile: [FileObject]
  "上级党委审批日期"
  replyDate: String
  "上级党委审批备注"
  replyRemark: String
  "上级党委审批结果"
  replyResult: String
  "党委备案批复结果"
  replyResults: String
  "关于审批预备党员的请示"
  replyYBDYReport: [FileObject]
  "关于审批预备党员的请示日期"
  replyYBDYReportDate: String
  "上级党委批复文件"
  replyfile: [FileObject]
  "支部委员会审查结论备注"
  reviewRemark: String
  "支部委员会审查结论"
  reviewResults: String
  "申请人性别"
  sex: String
  "阶段"
  stage: Stage
  """
    流程配置
  workflow: StageWorkflow
  阶段方案
  """
  stageScheme: StageWorkflowScheme
  "步骤"
  step: StageWorkflowStep
  "上级党委谈话日期"
  talkDate: String
  "上级党委谈话人"
  talker: String
  """
    宣誓词
  oathfile:[FileObject]
  预备党员转正思想报告
  """
  thoughtreports: [FileObject]
  "申请人职称"
  titles(
    "数据字典类型"
    type: String
  ): String
  "培训结束日期"
  trainEndDate: String
  "培训开始日期"
  trainStartDate: String
  "预备党员教育考察记录册文件"
  ybdyInspection: [FileObject]
}

type PartyApplysConnection {
  "当前页"
  currentPage: Int
  edges: [PartyApplysEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyApplysEdge {
  cursor: String
  node: PartyApplys
}

"考核"
type PartyAssessment {
  "考核详情"
  evaluates: [PartyEvaluateUser]
  "主键"
  id: ID
  "考核月份"
  month: Int
  "名称"
  name: String
  "考核年份"
  year: Int
}

"党员统计数据"
type PartyBIData {
  "年龄分布"
  ageView: AgeView
  "党龄分布"
  partyAgeView: PartyAgeView
  "学历分布"
  partyEducationView: PartyEducationView
  "职称分布"
  partyTitleView: PartyTitleView
  teamLeaderView: TeamLeaderView
}

"缴费统计表"
type PartyBill {
  "支付金额"
  amount: Float
  "党费缴纳报表"
  data: PartyBillData
  "部门"
  department: Int
  "员工编号"
  employee: ID
  "主键id"
  id: ID
  "月"
  month: Int
  "订单"
  payOrder: String
  "支付状态 PAY NOPAY"
  payState: String
  "支付日期"
  payTime: Date
  "支付方式"
  payWay: String
  "季度"
  quarter: Int
  "年"
  year: Int
}

type PartyBillConnection {
  "当前页"
  currentPage: Int
  edges: [PartyBillEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyBillData {
  "部门名称"
  departmentName: String
  "部门id"
  id: ID
  "key"
  key: ID
  "月"
  month: Int
  "部门名称"
  name: String
  "应缴党费合计"
  needAmount: String
  "现有党员人数"
  nowNumber: Int
  "实际缴纳合计"
  payAmount: String
  "季度"
  quarter: Int
  "上传党费人数"
  upNumber: Int
  "年"
  year: Int
}

type PartyBillEdge {
  cursor: String
  node: PartyBillData
}

"支部信息接口"
type PartyDepartmentInfoVIew {
  "支部人数"
  allNumber: Int
  "支部ID"
  id: Int
  "支部名称"
  name: String
}

"党费导入表"
type PartyDuesImport {
  "支部"
  departmentId: ID
  "名称"
  departmentName: String
  "员工编号"
  employee: ID
  "主键id"
  id: ID
  "月"
  month: Int
  "支付金额"
  payAmount: Float
  "季度"
  quarter: Int
  "姓名"
  userName: String
  "工号"
  userNumber: String
  "年"
  year: Int
}

type PartyDuesImportConnection {
  "当前页"
  currentPage: Int
  edges: [PartyDuesImportEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyDuesImportEdge {
  cursor: String
  node: PartyDuesImport
}

"学历统计详情视图"
type PartyEducationDetailView {
  "数量"
  amount: Int
  "编号"
  code: String
  "名称"
  name: String
}

"学历统计视图"
type PartyEducationView {
  "部门名称"
  deptName: String
  "学历分布统计"
  detail: [PartyEducationDetailView]
}

type PartyEvaluate {
  "获奖时间"
  awardTime: Date
  "所获荣誉"
  honor: String
  "ID"
  id: ID
  "荣誉级别"
  level: String
  "获奖人"
  winner: Employee
}

type PartyEvaluateConnection {
  "当前页"
  currentPage: Int
  edges: [PartyEvaluateEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyEvaluateEdge {
  cursor: String
  node: PartyEvaluate
}

"考核详情"
type PartyEvaluateUser {
  "年度平均得分"
  average: Int
  "用户所在部门"
  department: Department
  "用户"
  employee: Employee
  "用户所在组织"
  organization: Organization
  "评分情况"
  scoreResults: [ScoreResult]
}

type PartyExpensepy {
  createdAt: Date
  departmentId: String
  id: ID
  month: Int
  name: String
  payAmount: Float
  updatedAt: Date
  year: Int
}

type PartyExpensepyConnection {
  "当前页"
  currentPage: Int
  edges: [PartyExpensepyEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyExpensepyEdge {
  cursor: String
  node: PartyExpensepy
}

"经费"
type PartyFund {
  "年度经费额度"
  annualBurden: Float
  "部门"
  department: Department
  "经费支出明细"
  fundDetails(filter: PartyFundDetailFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyFundDetailConnection
  "主键"
  id: ID
  "组织"
  organization: Organization
  "剩余经费"
  remainFund: Float
  "经费支出金额"
  spend: Float
  "年度"
  year: Int
}

type PartyFundConnection {
  "当前页"
  currentPage: Int
  edges: [PartyFundEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyFundDeatilImportFail {
  "失败原因"
  failReason: String
  "工号"
  jobNumber: String
  "性别"
  name: String
  "支出金额"
  spendAmount: Float
  "事由"
  spendReason: String
}

"经费支出明细"
type PartyFundDetail {
  "申请人"
  applyUser: Employee
  "办理时间"
  handlingTime: String
  "主键"
  id: ID
  "经费剩余"
  remainFund: Float
  "支出金额"
  spendAmount: Float
  "支出理由"
  spendReason: String
}

type PartyFundDetailConnection {
  "当前页"
  currentPage: Int
  edges: [PartyFundDetailEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PartyFundDetailEdge {
  cursor: String
  node: PartyFundDetail
}

type PartyFundEdge {
  cursor: String
  node: PartyFund
}

type PartyFundImportFail {
  "额度"
  annualBurden: Float
  "部门名"
  department: String
  "年度"
  year: Int
}

type PartyFundOverView {
  "总额"
  annualBurden: String
  "费用类型"
  feeType: FeeType
  "组织id"
  organization: String
  "支部数据id"
  partyFundId: ID
  "余额"
  remainFund: String
  "支出"
  spendAmount: String
  "年份"
  year: String
}

"职称统计详情视图"
type PartyTitleDetailView {
  "数量"
  amount: Int
  "名称"
  name: String
}

"职称统计视图"
type PartyTitleView {
  "部门名称"
  deptName: String
  "职称分布统计"
  detail: [PartyEducationDetailView]
}

"年度考核明细"
type PartyYearAssessment {
  "得分项"
  assessmentItem: Int
  "用户"
  employee: Employee
  "主键"
  id: ID
  "月份"
  month: Int
  "得分"
  score: Int
  "年份"
  year: Int
}

"党费账单表"
type Partybill {
  amount: Float
  created_at: DateTime!
  department: Department
  departmentId: String
  id: ID!
  month: Int
  payOrder: String
  payState: ENUM_PARTYBILL_PAYSTATE
  payTime: DateTime
  payWay: ENUM_PARTYBILL_PAYWAY
  updated_at: DateTime!
  user: Entityuser
  userId: String
  year: Int
}

type PartybillAggregator {
  avg: PartybillAggregatorAvg
  count: Int
  max: PartybillAggregatorMax
  min: PartybillAggregatorMin
  sum: PartybillAggregatorSum
  totalCount: Int
}

type PartybillAggregatorAvg {
  amount: Float
  month: Float
  year: Float
}

type PartybillAggregatorMax {
  amount: Float
  month: Float
  year: Float
}

type PartybillAggregatorMin {
  amount: Float
  month: Float
  year: Float
}

type PartybillAggregatorSum {
  amount: Float
  month: Float
  year: Float
}

type PartybillConnection {
  currentPage: Int
  edges: [PartybillEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Partybill]
}

type PartybillEdge {
  cursor: String
  node: Partybill
}

"支部党费"
type Partyexpenses {
  created_at: DateTime!
  departmentId: String
  id: ID!
  month: Int
  name: String
  payAmount: Float
  updated_at: DateTime!
  year: Int
}

type PartyexpensesAggregator {
  avg: PartyexpensesAggregatorAvg
  count: Int
  max: PartyexpensesAggregatorMax
  min: PartyexpensesAggregatorMin
  sum: PartyexpensesAggregatorSum
  totalCount: Int
}

type PartyexpensesAggregatorAvg {
  month: Float
  payAmount: Float
  year: Float
}

type PartyexpensesAggregatorMax {
  month: Float
  payAmount: Float
  year: Float
}

type PartyexpensesAggregatorMin {
  month: Float
  payAmount: Float
  year: Float
}

type PartyexpensesAggregatorSum {
  month: Float
  payAmount: Float
  year: Float
}

type PartyexpensesConnection {
  currentPage: Int
  edges: [PartyexpensesEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Partyexpenses]
}

type PartyexpensesEdge {
  cursor: String
  node: Partyexpenses
}

type PayApply {
  "申请日期"
  applyDate: String
  "申请人"
  applyPerson: Employee
  "申请人工号"
  applyPersonNo: String
  "银行账户"
  bandAccount: String
  "合同id"
  contract: ProjectContract
  "合同条款id"
  contractClause: ContractClause
  "合同编号"
  contractNo: String
  "创建人"
  creator: String
  "货币单位"
  currencyUnit: String
  "申请部门"
  department: Department
  "申请部门"
  departmentName: String
  "办理状态（0：办理完毕  1：退回  2：取消  3：办理中）"
  handStatus: String
  id: String
  "发票扫描件"
  invoiceFiles: [FileObject]
  "支票发票号"
  invoiceNo: String
  "OA业务主键id"
  oaServiceId: String
  "开户行"
  openBank: String
  "其他附件"
  otherFiles: [FileObject]
  "付款金额"
  payAmount: String
  "付款类型"
  payType: String
  processInstanceId: String
  "项目名称"
  projectName: String
  "项目类型"
  projectType: String
  recordId: String
  "OA跳转路径"
  skipUrl: String
  "流程办理状态"
  status: String
  "支付对象"
  supportObj: String
  verifyCode: String
  "流程办理id"
  wfWorkId: String
}

type PayApplyConnection {
  currentPage: Int
  edges: [PayApplyEdges]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
}

type PayApplyEdges {
  cursor: String
  node: PayApply
}

type PayBudgetDetailStatistics {
  "预算金额"
  budgetAmount: Float
  "预算内容"
  budgetContent: String
  "本年度已执行预算金额"
  currYearExecuted: Float
  "较本年浮动"
  currentYearFloat: Float
  "预计年度执行预算金额"
  expectYearExecuted: Float
  "较上年浮动"
  floatLast: Float
  "下一年预算金额"
  nextYearBudget: Float
  "预算单元ID"
  unit: Department
}

"付款"
type Payment {
  "合同信息"
  contract: Contract
  "附件1列表"
  files: [FileObject]
  "医院付款银行回单"
  filesFive: [FileObject]
  "发票"
  filesFour: [FileObject]
  "其他附件"
  filesOther: [FileObject]
  "信息统计编报截图"
  filesSix: [FileObject]
  "外币折换人民币明细清单"
  filesThree: [FileObject]
  "附件2列表"
  filesTwo: [FileObject]
  "付款金额"
  fkMoney: Float
  "付款ID"
  id: ID
  "打印批次确认"
  print: String
  "预算拆分"
  project: BudgetProject
  "付款备注"
  remarks: String
  "阶段"
  stage: Stage
  "阶段方案"
  stageScheme: StageWorkflowScheme
  "流程实体"
  stageWorkflowInstance: StageWorkflowInstance
  "付款申请时间"
  startTime(format: String): Date
  "付款状态0审批中1审批完成2已付款3审批退回"
  status: String
  "步骤"
  step: StageWorkflowStep
  "审批步骤名称"
  stepName: String
  "招标日期"
  tenderTime: Date
}

type PaymentBatch {
  "付款时间"
  confirmData: String
  "创建时间"
  createdAt: Date
  "医院"
  hospitalName: String
  "id"
  id: ID
  "付款集合"
  payments: [Payment]
  "付款状态"
  status: String
  "本次支付合计金额"
  sumMoney: Float
  "已支付金额"
  sumPayMoney: Float
  "支付项目数"
  sumProject: Int
  "预算金额"
  sumProjectMoney: Float
  "预算余额"
  ysBalanceMoney: Float
}

type PaymentBatchConnection {
  "当前页"
  currentPage: Int
  edges: [PaymentBatchEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PaymentBatchEdge {
  cursor: String
  node: PaymentBatch
}

"分页查询付款"
type PaymentConnection {
  "当前页"
  currentPage: Int
  edges: [PaymentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页查询付款"
type PaymentEdge {
  cursor: String!
  node: Payment
}

type Payreport {
  departmentId: ID
  mustPayAmount: Long
  realPayAmount: Long
  uploadNumber: Long
}

"缴纳比例设置表"
type Payscale {
  created_at: DateTime!
  id: ID!
  partyMemberType: ENUM_PAYSCALE_PARTYMEMBERTYPE
  scale: Float
  updated_at: DateTime!
  wage: String
}

type PayscaleAggregator {
  avg: PayscaleAggregatorAvg
  count: Int
  max: PayscaleAggregatorMax
  min: PayscaleAggregatorMin
  sum: PayscaleAggregatorSum
  totalCount: Int
}

type PayscaleAggregatorAvg {
  scale: Float
}

type PayscaleAggregatorMax {
  scale: Float
}

type PayscaleAggregatorMin {
  scale: Float
}

type PayscaleAggregatorSum {
  scale: Float
}

type PayscaleConnection {
  currentPage: Int
  edges: [PayscaleEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Payscale]
}

type PayscaleEdge {
  cursor: String
  node: Payscale
}

"党费缴纳标准表"
type Paystandard {
  created_at: DateTime!
  department: Department
  departmentId: String
  id: ID!
  payAmount: Float
  quarter: String
  updated_at: DateTime!
  use: ENUM_PAYSTANDARD_USE
  userId: String
  userName: String
  userNumber: String
  year: Int
}

type PaystandardAggregator {
  avg: PaystandardAggregatorAvg
  count: Int
  max: PaystandardAggregatorMax
  min: PaystandardAggregatorMin
  sum: PaystandardAggregatorSum
  totalCount: Int
}

type PaystandardAggregatorAvg {
  payAmount: Float
  year: Float
}

type PaystandardAggregatorMax {
  payAmount: Float
  year: Float
}

type PaystandardAggregatorMin {
  payAmount: Float
  year: Float
}

type PaystandardAggregatorSum {
  payAmount: Float
  year: Float
}

type PaystandardConnection {
  currentPage: Int
  edges: [PaystandardEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Paystandard]
}

type PaystandardEdge {
  cursor: String
  node: Paystandard
}

type PeopleBranchIntegral {
  "支部积分"
  branchIntegral: Int
  "支部名称"
  branchName: String
  "编号"
  id: ID
  "姓名"
  peopleName: String
}

type PeopleBranchIntegralConnection {
  "当前页"
  currentPage: Int
  edges: [PBIntegral]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type Permission {
  "类型"
  category: PermissionCategory
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "返回授权列表(grant permission)"
  grantPermissions: [GrantPermission]
  "授予对象"
  grants: [SecurityScope]
  id: String
  "权限名称"
  name: String
  "权限分类"
  permissionType: PermissionType
  "资源类型"
  resourceType: String
}

"权限分页接口"
type PermissionConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [PermissionEdge]
  "页面信息"
  pageInfo: PageInfo
  "页面大小"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"权限分页实体"
type PermissionEdge {
  "这是一个cursor"
  cursor: String
  "这是一个cursor"
  node: Permission
}

"权限分类"
type PermissionType {
  "这是一个分类的描述"
  description: String
  "这是一个分类的id"
  id: ID
  "这是一个分类的名称"
  name: String
  "这是一个分类的权限列表"
  permissions: [Permission]
  "这是一个分类的排序"
  sort: Int
}

"分页接口"
type PermissionTypeConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [PermissionTypeEdge]
  "页面信息"
  pageInfo: PageInfo
  "页面大小"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"权限分类分页"
type PermissionTypeEdge {
  "这是一个cursor"
  cursor: String
  "这是一个Edge Node"
  node: PermissionType
}

type Phone {
  id: ID
  "电话"
  phone: String
  "状态"
  status: PhoneStatus
}

"轮播图返回参数"
type PhotoSet {
  "主键id"
  id: ID
  "访问链接"
  imageLink: String
  "位置"
  localhost: String
  "组织id"
  organizationId: ID
  "图片id"
  path: FileObject
}

"图片信息"
type Pic {
  "显示名"
  picName: String
  "图片Url"
  picUrl: String
}

type PicList {
  "图片列表"
  pics: [Pic]
}

type Portal {
  "应用"
  application: Application
  "门户组件配置"
  component: ComponentConfigurate
  "创建时间"
  createdAt: Date
  "创建人"
  creator: Employee
  "是否为默认门户"
  default: Boolean
  "描述"
  description: String
  "图标"
  icon: IconConfigurate
  "主键"
  id: ID
  "序号"
  index: Int
  "修改人"
  modifier: Employee
  "名称"
  name: String
  "路由级连地址"
  path: [String]
  "系统数据"
  system: Boolean
  "门户类型"
  type: PortalType
  "更新时间"
  updatedAt: Date
  "是否启用"
  useable: Boolean
  "可查看范围"
  viewable: [String]
}

"职务"
type Position {
  "所属部门"
  department: Department
  "职位描述信息"
  description: String
  id: ID
  name: String
  "职位拥有的角色"
  roles: [Role]
}

"PreSelectorRule"
type PreSelectorRule {
  type: ProcessScopeType
  value: [String]
}

type ProcessAppLocation {
  appDefinition: AppDefinition
  createTime: Date
  description: String
  id: String
  key: String
  modelEditorJson: String
  modelType: Int
  name: String
  namespace: String
  simpleFormModel: SimpleFormModel
  updateTime: Date
}

type ProcessAppLocationConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessAppLocationEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessAppLocationEdge {
  cursor: String!
  node: ProcessAppLocation
}

type ProcessCategory {
  disabled: Boolean
  explain: String
  id: ID
  name: String
  parentCategory: ProcessCategory
  processDefinitions: [ProcessDefinition]
}

type ProcessCategoryConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessCategoryEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessCategoryEdge {
  cursor: String!
  node: ProcessCategory
}

type ProcessDefinition {
  "流程分类"
  category: ProcessCategory
  "流程部署ID"
  deploymentId: String
  "流程描述"
  description: String
  "是否有起始表单"
  hasStartFormKey: Boolean
  "流程ID"
  id: String
  "流程key"
  key: String
  "流程名称"
  name: String
  "节点属性"
  nodeAttribute: [FlowElement]
  "起始表单"
  startForm: FormModel
  "流程版本"
  version: Int
}

type ProcessDefinitionConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessDefinitionEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessDefinitionEdge {
  cursor: String!
  node: ProcessDefinition
}

type ProcessDepartment {
  id: String
  name: String
}

type ProcessEmployee {
  "生日"
  birthday: String
  department: ProcessDepartment
  "E-mail"
  email: String
  "主键id"
  id: ID
  "工号"
  jobNumber: String
  "移动电话"
  mobile: String
  "名称"
  name: String
  "固定电话"
  tel: String
}

type ProcessForm {
  category: FormType
  component: String
  description: String
  id: ID
  key: String
  modelId: Model
  name: String
  outcomeVariableName: String
  processFormJson: JSON
  version: Int
}

type ProcessFormConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessFormEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessFormEdge {
  cursor: String!
  node: ProcessForm
}

type ProcessInstance {
  "活动节点"
  activity: [ActiveNode]
  """
        assignee:[String]
  当前处理人
  """
  assigneePosition: [Authority]
  "当前任务集合"
  currentTasks: [Task]
  "流程key"
  definitionKey: String
  "流程描述"
  description: String
  "流程表单"
  formData: [FormModel]
  "流程实例ID"
  id: String
  "流程名称"
  name: String
  "流程定义id"
  processDefinitionId: String
  "流程当前状态"
  processInsState: String
  "任务信息"
  relevantTask: Task
  "起始表单数据"
  startFromData: FormModel
  "发起时间"
  startTime: Date
  "发起人"
  startUser: Employee
  "任务列表"
  tasks(type: StateEnum!): [Task]
}

type ProcessInstanceConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessInstanceEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessInstanceEdge {
  cursor: String!
  node: ProcessInstance
}

type ProcessModel {
  category: ProcessCategory
  description: String
  empId: String
  id: String
  key: String
  modelEditorJson: JSON
  name: String
  scope: String
  updateTime: Date
}

type ProcessModelConnection {
  "当前页"
  currentPage: Int
  edges: [ProcessModelEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProcessModelEdge {
  cursor: String!
  node: ProcessModel
}

type Processes {
  "老流程tableId"
  pool0ldprocessFormid: String
  "老流程processId"
  pool0ldprocessId: String
  "ezFLOW定义id"
  poolEzflowprocessDefid: String
  "ezflow表单key"
  poolEzflowprocessFormKey: String
  "ezFLOW流程key"
  poolEzflowprocessKey: String
  "流程id"
  poolProcessId: String
  "流程名"
  poolProcessName: String
  "流程类型：0：老 1：ezFLOW"
  poolProcessType: String
}

type Project {
  "关联立项"
  approval: ProjectApproval
  "子项目集合"
  childrens: [Project]
  "主办科室"
  department: Department
  "项目文档"
  documents: [ProjectDocument]
  "项目负责人"
  dutyPerson: Employee
  "项目截止日期"
  endDate(format: String): Date
  "字段配置"
  fieldConfiguration: StageFieldConfiguration
  "动态字段值列表FieldValue"
  fieldValues: [FieldValue]
  "项目附件"
  files: [FileObject]
  """
    项目合同
  contracts:[ProjectContract]
  项目完成日期
  """
  finishDate: Date
  "主键id"
  id: ID
  "待办任务数"
  issueNum: Int
  "任务总数"
  issueTotalNum: Int
  "会议"
  meetings: [ProjectMeeting]
  "项目名称"
  name: String
  "项目编号"
  no: String
  "关联项目（父项目）"
  parent: Project
  "项目参与人"
  persons: [ProjectPerson]
  "立项金额"
  projectAmount: Float
  "立项日期"
  projectDate: String
  "项目描述"
  projectDesc: String
  "项目阶段日期记录"
  projectTimes: [ProjectTime]
  "关联采购"
  purchaseTender: PurchaseTender
  """
    状态
     status:Int @dict
  项目当前阶段
  """
  stage: Stage
  "阶段方案"
  stageScheme: StageWorkflowScheme
  "项目开始日期"
  startDate(format: String): Date
  "状态名称"
  statusName: String
  "项目当前步骤"
  step: StageWorkflowStep
  "招标金额"
  tenderAmount: Float
  "招标日期"
  tenderDate: String
  "项目主题"
  themes: [ProjectTheme]
  "项目类型"
  type(
    "数据字典类型"
    type: String
  ): String
}

type ProjectApproval {
  "申请日期"
  applyDate: String
  "申请人id"
  applyPerson: Employee
  "申报理由"
  applyReason: String
  "项目大类"
  bigType: String
  "预算金额"
  budgetAmount: Float
  "预算编号"
  budgetNo: String
  "部门id"
  department: Department
  "申请部门"
  departmentName: String
  "办理状态（0：办理完毕  1：退回  2：取消  3：办理中）"
  handStatus: String
  id: String
  "是否预算内"
  isBudget: String
  "OA业务主键id"
  oaServiceId: String
  "ppt文件"
  pptFiles: [FileObject]
  "预估金额"
  predictAmount: Float
  processInstanceId: String
  "项目名称"
  projectName: String!
  recordId: String
  "OA跳转路径"
  skipUrl: String
  "项目小类"
  smallType: String
  "办理状态"
  status: String
  """
    关系项目
  project:Project
  是否上会(需要上院务会、不需要上院务会)
  """
  upperConference: String
  verifyCode: String
  "流程办理id"
  wfWorkId: String
  "年度预算"
  yearBudget: String
}

type ProjectApprovalConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectApprovalEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectApprovalEdge {
  cursor: String
  node: ProjectApproval
}

type ProjectConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectContract {
  "仲裁诉讼受理机关"
  acceptCompany: String
  "金额"
  amount: Float
  "申请日期"
  applyDate: String
  "申请人"
  applyPerson: Employee
  "发票"
  bills: [Bill]
  "预算名称"
  budgetName: String
  "预算编号"
  budgetNo: String
  "验收日期"
  checkDate: Date
  "违约赔偿条款"
  compensateClause: String
  "内容"
  content: String
  "合同条款"
  contractClauses: [ContractClause]
  "合同文本格式"
  contractFormat: String
  "申请部门"
  department: Department
  "申请部门"
  departmentName: String
  "负责人"
  dutyPerson: Employee
  "合同有效期"
  effectiveDate: String
  "合同失效日期"
  effectiveEndDate: String
  "合同生效日期"
  effectiveStartDate: String
  "附件"
  files: [FileObject]
  "财务处合同编号"
  financeNo: String
  "资金来源"
  fundSource: String
  "三一重大编号"
  greatNo: String
  "办理状态（0：办理完毕  1：退回  2：取消  3：办理中）"
  handStatus: String
  id: ID
  "是否审计审价"
  isAudit: String
  "申请人工号"
  jobNumber: String
  "明细"
  name: String
  "编号"
  no: String
  "OA业务id"
  oaServiceId: String
  "付款申请"
  payApplies: [PayApply]
  "收付方式"
  paymentType: String
  processInstanceId: String
  "关联项目"
  project: Project
  "甲方标识"
  purchaseFlag: String
  "甲方"
  purchaseName: String
  "采购编号"
  purchaseNo: String
  "采购方式"
  purchaseType: String
  "应收金额"
  receivableAmount: Float
  recordId: String
  "备注"
  remark: String
  "签收日期"
  signDate: Date
  "OA跳转路径"
  skipUrl: String
  "分类"
  sort: String
  "合同状态"
  status: String
  "招标编号"
  tenderNo: String
  "类型"
  type: String
  "最后更新日期"
  updatedAt(format: String): Date
  "乙方标识"
  vendorFlag: String
  "供应商"
  vendorName: String
  verifyCode: String
  "质保期"
  warrantyPeriod: String
  "流程办理id"
  wfWorkId: String
}

type ProjectDocument {
  "上传时间"
  createdAt(format: String): Date
  "文档附件"
  files: [FileObject]!
  id: ID
  "项目id"
  project: Project!
  "项目阶段"
  stage: Stage!
  "上传人名称"
  uploadPersonName: String
}

"分页结果对象"
type ProjectDocumentConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectDocumentEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectDocumentEdge {
  cursor: String
  node: ProjectDocument
}

type ProjectEdge {
  cursor: String
  node: Project
}

"项目代码管理"
type ProjectManagement {
  "地址"
  address: String
  "创建日期"
  createdAt(
    format: String, 
    "入参"
    input: String
  ): Date
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "语言类型"
  developmentLanguage: String
  "负责人"
  duty: String
  "主键id"
  id: ID
  "修改人"
  modifier: String
  "名称"
  name: String
  "产品"
  product: String
  "项目类型"
  productType: ProjectType
  "修改日期"
  updatedAt(
    format: String, 
    "入参"
    input: String
  ): Date
}

"项目代码管理"
type ProjectManagementConnection {
  "当前页"
  currentPage: Int
  "数据集"
  edges: [ProjectManagementEdge]
  "每页显示大小"
  pageSize: Int
  "总记录"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页结果集"
type ProjectManagementEdge {
  cursor: String
  node: ProjectManagement
}

type ProjectMeeting {
  "会议地址"
  address: String
  "关联子会议"
  childs: [ProjectMeeting]
  "会议内容"
  content: String
  "会议相关附件"
  files: [FileObject]!
  "主键id"
  id: ID
  "会议时间"
  meetingDate(format: String): Date
  "会议名称"
  name: String!
  "组织人"
  orgPerson: Employee
  "关联会议Id"
  parent: ProjectMeeting
  "会议参与人"
  persons: [MeetingPerson]
  "项目"
  project: Project
  "会议类型"
  type: String
  "上传人姓名"
  uploadPerson: Employee
}

"分页结果对象"
type ProjectMeetingConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectMeetingEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectMeetingEdge {
  cursor: String
  node: ProjectMeeting
}

type ProjectNote {
  "讨论内容"
  content: String!
  "评论时间"
  createdAt(format: String): Date
  id: ID!
  "评论人名称"
  reviewPerson: Employee
}

type ProjectNoteConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectNoteEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectNoteEdge {
  cursor: String
  node: ProjectNote
}

type ProjectPerson {
  "参与人"
  user: Employee
}

"预算拆分进度"
type ProjectSchedule {
  "完成时间"
  completedate: String
  "备注"
  description: String
  "流程id"
  flow: String
  "主键"
  id: ID
  "计划时间"
  plandate: String
}

type ProjectTheme {
  "发布日期"
  createdAt(format: String): Date
  id: ID!
  "发布人名称"
  publishPerson: Employee
  "讨论主题"
  title: String!
}

type ProjectThemeConnection {
  "当前页"
  currentPage: Int
  edges: [ProjectThemeEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ProjectThemeEdge {
  cursor: String
  node: ProjectTheme
}

type ProjectTime {
  "实际完成日期"
  actualFinishDate: Date
  "主键id"
  id: ID
  "计划完成日期"
  preFinishDate: Date
  "项目阶段"
  stage: Stage
}

type Property {
  "匹配类型"
  criterions: [Criterion]
  "字段名"
  name: String
  "显示名称"
  title: String
}

type PurchaseTender {
  "申请日期"
  applyDate: Date
  "申请人"
  applyPerson: Employee
  "申请人工号"
  applyPersonNo: String
  "相关审批流程"
  approvalFlow: String
  "审批编号"
  approvalNo: String
  "预算编号"
  budgetNo: String
  "预算项目"
  budgetProject: String
  "申请部门"
  department: Department
  "申请部门"
  departmentName: String
  "办理状态（0：办理完毕  1：退回  2：取消  3：办理中）"
  handStatus: String
  id: ID
  "是否院内公开"
  isPublish: String
  "OA业务主键id"
  oaServiceId: String
  processInstanceId: String
  "非预算项目"
  project: Project
  "采购编号"
  purchaseNo: String
  recordId: String
  "OA跳转路径"
  skipUrl: String
  status: String
  "招标文件"
  tenderFiles: [FileObject]
  verifyCode: String
  "流程办理id"
  wfWorkId: String
}

type PurchaseTenderConnection {
  "当前页"
  currentPage: Int
  edges: [PurchaseTenderEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type PurchaseTenderEdge {
  cursor: String
  node: PurchaseTender
}

type Query {
  "查询我能发起的流程"
  BpmGetUserProcessByModuleIdsNew(bpmGetUserProcessByModuleIdsNewFilter: BpmGetUserProcessByModuleIdsNewFilter): BpmGetUserProcessByModuleIdsNewResponse
  "查询我的收文列表"
  GetReceiveFileBox(getReceiveFileBoxFilter: GetReceiveFileBoxFilter): GetReceiveFileBoxResponse
  "查询进口论证详情"
  ImportArgumentDailyConnections(filter: ImportArgumentDetailFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ImportArgumentDailyConnection
  "查询信息列表"
  InformationGetMobileList(informationGetMobileListFilter: InformationGetMobileListFilter): InformationGetMobileListResponse
  "查询文件"
  YsDocuments(filter: YsDocumentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): YsDocumentConnection
  activities(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Activity]
  activitiesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ActivityConnection
  activity(id: ID!): Activity
  "查询单个接口"
  api(id: ID!): Api
  "查询某个类型"
  apiType(id: ID!): ApiType
  "类型树查询"
  apiTypes: [ApiType]
  "应用信息"
  appDingInfo(where: ID!): AppDingInfo
  "查询单个应用的信息"
  application(id: ID!, protocol: ApplicationProtocol): Application
  "查询单个应用分类"
  applicationType(id: ID): ApplicationType
  "查询单个应用分类列表"
  applicationTypes: [ApplicationType]
  "所有的应用"
  applications(filter: ApplicationFilter): [Application]
  "查询单个手机应用"
  apply(id: ID): Apply
  "查询所有手机应用"
  applys: [Apply]
  "履职明细分页查询"
  archive(
    "履职id"
    id: ID, 
    "page"
    page: Int, 
    "pageSize"
    pageSize: Int
  ): ArchiveDetailConnection
  "履职分页查询"
  archives(
    "过滤条件"
    filter: ArichiveFiletr, 
    "page"
    page: Int, 
    "pageSize"
    pageSize: Int
  ): ArchivesConnection
  "单个文章"
  article(id: ID!): Article
  """
    文章权限
  articlePermissions(category: ArticleCategory!): [Permission]
  根据ID获取文章栏目
  """
  articleChannel(id: ID!): ArticleChannel
  "文章栏目"
  articleChannels(filter: ArticleChannelFilter, orderBy: OrderBy, organization: ID!): [ArticleChannel]
  articleReadStatistics(filter: ArticleReadStatisticsFilter!): [ArticleReadStatistics]
  "文章标签"
  articleTags(filter: ArticleChannelFilter, orderBy: OrderBy, organization: ID!): [ArticleTag]
  "全部文章"
  articles(filter: ArticleFilter, orderBy: OrderBy, organization: ID!, page: Int = 1, pageSize: Int = 15): ArticleConnection
  "根据任务id查询附件"
  attachments(emp: ID, taskId: String): [Attachment]
  "查询鉴权信息"
  authentication(agentId: ID!, url: String!): Authentication
  "根据主键id查询发票明细"
  bill(id: ID): Bill
  "单条预算查询"
  budget(id: ID!): Budget
  "根据ID查询子集预算科目"
  budgetAccount(id: ID): [BudgetAccount]
  "查询树集结构预算科目"
  budgetAccounts: [BudgetAccount]
  "根据ID查询信息根据ID查询预算类别"
  budgetCategory(id: ID): BudgetCategory
  "分页查询预算类别"
  budgetCategorys(filter: BudgetCategoryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetCategoryConnection
  "根据主键ID获取预算内容信息"
  budgetContent(
    "主键id"
    id: ID!
  ): BudgetContent
  "分页查询预算内容信息"
  budgetContents(
    "过滤对象"
    filter: BudgetContentFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetContentConnection
  "根据主键ID获取预算控制信息"
  budgetControl(
    "主键id"
    id: ID!
  ): BudgetControl
  "分页查询预算控制信息"
  budgetControls(
    "过滤对象"
    filter: BudgetControlFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetControlConnection
  "功能：获取门诊收入预算编制默认明细数据"
  budgetMZReceiptDetails(budgetType: ID!, unit: ID!): [BudgetMZReceiptDetail]
  "功能：根据主键ID查询预算编制"
  budgetMake(id: ID!): BudgetMake
  "功能：根据任务ID查询对应的编制数据"
  budgetMakeByMakeTask(id: ID): BudgetMake
  "功能：分页查询预算编制"
  budgetMakes(filter: BudgetMakeFilter, order: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetMakeConnection
  "根据主键ID获取预算实体信息"
  budgetModel(
    "主键id"
    id: ID!
  ): BudgetModel
  "分页查询预算实体信息"
  budgetModels(
    "过滤对象"
    filter: BudgetModelFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetModelConnection
  "根据主键ID获取预算期间信息"
  budgetPeriod(
    "主键id"
    id: ID!
  ): BudgetPeriod
  "分页查询预算期间信息"
  budgetPeriods(
    "过滤对象"
    filter: BudgetPeriodFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetPeriodConnection
  "根据ID查询信息根据ID查询预算编制任务"
  budgetPlanning(id: ID): BudgetPlanning
  "分页查询预算编制任务"
  budgetPlannings(filter: BudgetPlanningFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetPlanningConnection
  "单条项目查询"
  budgetProject(id: ID!): BudgetProject
  "项目详情列表"
  budgetProjectDetaileds(filter: BudgetProjectDetailedFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetProjectDetailedConnection
  "查询所有预算拆分"
  budgetProjects(filter: BudgetProjectFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetProjectConnection
  "根据主键ID获取预算科目信息"
  budgetSubject(
    "主键id"
    id: ID!
  ): BudgetSubject
  "根据主键ID获取科目目录表信息"
  budgetSubjectCatalog(
    "主键id"
    id: ID!
  ): BudgetSubjectCatalog
  "分页查询科目目录表信息"
  budgetSubjectCatalogs(
    "过滤对象"
    filter: BudgetSubjectCatalogFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetSubjectCatalogConnection
  "分页查询预算科目表信息"
  budgetSubjects(
    "过滤对象"
    filter: BudgetSubjectFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetSubjectConnection
  "根据ID查询信息根据ID查询预算任务"
  budgetTask(id: ID): BudgetTask
  "分页查询预算任务"
  budgetTasks(filter: BudgetTaskFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetTaskConnection
  "根据主键ID获取预算类别信息"
  budgetType(
    "主键id"
    id: ID!
  ): BudgetType
  "分页查询预算类别信息"
  budgetTypes(
    "过滤对象"
    filter: BudgetTypeFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): BudgetTypeConnection
  "功能：根据预算类别获取其对应的预算单元ID集"
  budgetUnits(budgetType: ID!): [ID]
  "查询所有预算"
  budgets(filter: BudgetFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BudgetConnection
  "查询单个"
  case(id: String): Case
  "查询全部"
  cases(filter: CaseFilter): [Case]
  "查询评论"
  comments(filter: CommentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, targetId: String, targetType: CommentTargetType!): CommentConnection
  component(id: ID!): Component
  "全部组件"
  components(filter: ComponentFilter): [Component]!
  "查询默认组"
  congressGroup: [DefEmpGroup]
  "功能：根据主键id查询会议信息"
  congressMeeting(id: ID!): CongressMeeting
  "会议议程查询接口"
  congressMeetingAgenda: [MeetingAgenda]
  "获取会议类型"
  congressMeetingType(
    "会议id"
    meetingId: ID!
  ): String
  "功能：分页查询会议信息"
  congressMeetings(filter: CongressMeetingFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, userId: ID): CongressMeetingConnection
  "查询默认角色用户"
  congressRoleUser: [DefUserRole]
  "查询当前所有咨询人"
  consultantses: [Consultants]
  contacts(filter: ContactFilter, scope: ID!): [Contact]
  "单条合同查询"
  contract(id: ID): Contract
  "查询所有合同"
  contracts: [Contract]
  contractsByProjectId(projectId: ID!): [ProjectContract]
  "根据ID查询课程详情"
  course(id: ID!): Course
  "查询所有课程"
  courses(filter: CourseFilter, page: Int = 1, pageSize: Int = 15): CourseConnection
  "功能：获取当前数据库版本"
  currentModelVersion: ModelVersion
  "根据数据字典id，查询数据字典"
  dataDictionary(id: ID): DataDictionary
  "查询数据字典分类列表"
  dataDictionaryTypes: [DataDictionaryType]
  "数据字典分页显示"
  dataDictionarys(filter: DataDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): SystemDictionaryConnection
  "查询操作日志"
  dataLogs(filter: DataLogFilter): [DataLog]!
  "查询单个数据源"
  dataSource(id: ID): DataSource
  "数据源查询"
  dataSources(filter: DataSourceFilter): [DataSource]
  "预算汇总统计"
  dataStatistics(
    "过滤条件"
    filter: DataStatisticsFilter
  ): [DataStatistics]
  "获取汇总明细"
  dataStatisticsDetails(
    "过滤条件"
    filter: DataStatisticsFilter
  ): [DataStatisticsDetail]
  "单个数据同步"
  dataTransmission(id: ID!): DataTransmission
  "查询单个任务"
  dataTransmissionTask(id: ID!): DataTransmissionTask
  "查询单个任务日志"
  dataTransmissionTaskLogs(filter: DataTransmissionTaskLogFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DataTransmissionTaskLogConnection
  "查询单个任务"
  dataTransmissionTasks(filter: DataTransmissionTaskFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DataTransmissionTaskConnection
  "数据同步"
  dataTransmissions: [DataTransmission]
  "根据主键ID获取API生成日志表信息"
  ddmApiLog(
    "主键id"
    id: ID!
  ): DdmApiLog
  "分页查询API生成日志表信息"
  ddmApiLogs(
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): DdmApiLogConnection
  "根据主键ID获取院内决策申请表信息"
  decisionApply(
    "主键id"
    id: ID!
  ): DecisionApply
  "分页查询院内决策申请表信息"
  decisionApplys(
    "过滤对象"
    filter: DecisionApplyFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): DecisionApplyConnection
  "根据主键ID获取字段方案信息"
  defaultFieldFeature(name: ID): DefaultFieldFeature
  "查询字段方案集"
  defaultFieldFeatures(filter: DefaultFieldFeatureFilter): [DefaultFieldFeature]
  defineEvents(filters: DefineEventFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DefineEventConnection
  defineMessages(filters: DefineMessageFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DefineMessageConnection
  defineNotices(filters: DefineNoticeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DefineNoticeConnection
  defineReminds(filters: DefineRemindFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DefineRemindConnection
  "根据id查询委托"
  delegate(id: ID): GraphQLDelegate
  "查询委托"
  delegates(filter: DelegateFilterInput): [GraphQLDelegate]
  "单个部门"
  department(id: ID!): Department
  "查询所有部门类型"
  departmentTypes(organization: ID!): [DepartmentType]
  "全部部门"
  departments(filter: DepartmentFilter, organization: ID!): [Department]
  "部署列表"
  deployments(orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DeploymentConnection
  "功能：获取startCommit到endCommit的文件数据集（整个版本库更改过的）"
  diffLogs(code: String!, endCommit: String, startCommit: String): [LogResponse]
  dingtalk: Dingtalk
  "钉钉数据源"
  dingtalkDataSource(id: ID): DingtalkDataSource
  "查询全部的钉钉数据源"
  dingtalkDataSources(filter: DataSourceFilter): [DingtalkDataSource]
  "查询指令"
  directiveDefinitions(filter: GraphQLDirectiveFilter): [GraphQLDirective]
  "目录树"
  directoryTree: [Directory]
  "查询文档"
  documents(filter: DocumentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DocumentConnection
  "功能：获取业务域树形结构"
  domains(filter: DomainFilter): [DomainTree]
  "查询草稿"
  drafts(input: DraftFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DraftConnection
  "单个员工"
  employee(id: ID!, idType: EmployeeIdType = id): Employee
  "查询所有字段组及下属字段"
  employeeFieldGroups(filter: EmployeeFieldGroupFilter): [EmployeeFieldGroup]
  "查询单个群组"
  employeeGroup(id: ID!): EmployeeGroup
  "根据组织获取人员分组使用范围"
  employeeGroupScopes(organization: ID!): [EmployeeGroupScope]
  "查询全部群组"
  employeeGroups(name: String, organization: ID, scope: String): [EmployeeGroup]
  "查询会议角色"
  employeeRoleGroups(groupId: ID, meeting: ID): [EmployeeRoleGroups]
  "人员分页"
  employees(
    "过滤条件"
    filter: EmployeeFilter, 
    "排序"
    orderBy: OrderBy, 
    "组织ID"
    organization: ID!, 
    "分页页数"
    page: Int = 1, 
    "分页大小"
    pageSize: Int = 15
  ): EmployeeConnection
  "查询多个部门里的人"
  employeesByDepIds(ids: [ID]!): [Employee]
  entityuser(id: ID!): Entityuser
  entityusers(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Entityuser]
  entityusersConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): EntityuserConnection
  "根据主键id查询枚举"
  enumeration(id: ID!): Enumeration
  "获取枚举集"
  enumerations(filter: EnumerationFilter): [Enumeration]
  "功能：查询当前会议测评"
  evaluation(meetingId: ID): QuestionnaireMsg
  exam(id: ID!): Exam
  examandpaper(id: ID!): Examandpaper
  examandpapers(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Examandpaper]
  examandpapersConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExamandpaperConnection
  examcondition(id: ID!): Examcondition
  examconditions(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Examcondition]
  examconditionsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExamconditionConnection
  examinationpaper(id: ID!): Examinationpaper
  examinationpapers(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Examinationpaper]
  examinationpapersConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExaminationpaperConnection
  exampapertitle(id: ID!): Exampapertitle
  exampapertitles(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Exampapertitle]
  exampapertitlesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExampapertitleConnection
  examreport(id: ID!): Examreport
  examreports(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Examreport]
  examreportsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExamreportConnection
  exams(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Exam]
  examsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExamConnection
  examtopic(id: ID!): Examtopic
  examtopics(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Examtopic]
  examtopicsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExamtopicConnection
  "查询导入后的操作人信息"
  excelEmployees(
    "filter"
    filter: ExcelEmployeeFilter, 
    page: Int, 
    pageSize: Int
  ): ExcelEmployeeConnection
  "单条专家信息查询"
  expert(id: ID!): Expert
  "单条专家信息查询"
  expertScene(id: ID!): ExpertScene
  "查询所有论证场次"
  expertScenes(filter: ExpertSceneFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExpertSceneConnection
  "查询所有专家信息"
  experts(filter: ExpertFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ExpertConnection
  "功能：根据条件导出对应的预算汇总数据"
  exportBudgetSummaryDataList(
    "单位ID集"
    hospitals: [ID]!, 
    "预算年度"
    year: String!
  ): [BudgetReport]
  "功能：获取指定医院年度预算预算类别统计数据(导出用)"
  exportDataStatisticsDetails(
    "医院ID集"
    ids: [ID]!, 
    "年度"
    year: String!
  ): [ExportStatisticsDetail]
  "OA 数据源"
  ezofficeDataSource(id: ID): EZOfficeDataSource
  "查询全部的OA数据源"
  ezofficeDataSources(filter: DataSourceFilter): [EZOfficeDataSource]
  "根据graphqlargumentsfielddefinition的id，查询对象字段信息"
  fieldDefinition(id: ID!): GraphQLFieldDefinition
  "根据业务id，查询与该业务相关的全部自定义字段值"
  fieldValues(category: StageWorkflowCategory, projectId: ID!): [StageWorkflowFieldValue]
  "根据文件id,查询文件"
  file(id: String): FileObject
  filter(id: ID): Filter
  filterConfigurations(organization: ID!, uid: ID!): [DataDictionaryType]
  filters: [Filter]
  "查询征集意见组别"
  findAllGroup: [OpinionGroup]
  "查询轮播图"
  findAllPhotoSet(
    "位置"
    localhost: String, 
    "组织id"
    organizationId: ID
  ): [PhotoSet]
  "根据id查询支部积分"
  findCMSBranchIntegralById(id: ID!): BranchIntegral
  "分页查询"
  findCMSBranchIntegralPage(filter: BranchIntegralFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): BranchIntegralConnection
  "根据id查询人员支部积分"
  findCMSPeopleBranchIntegralById(id: ID!): PeopleBranchIntegral
  "分页查询"
  findCMSPeopleBranchIntegralPage(filter: PeopleBranchIntegralFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PeopleBranchIntegralConnection
  "移动端：当前登录人查看视频权限"
  findCurrentLookAuthority(
    "过滤查询条件"
    filter: LookAuthorityFilter
  ): [MeetingRecorded]
  "根据预算拆分ID查询文件列表"
  findDocumentByProjectId(id: ID!): [Document]
  "功能：会议结果统计"
  findEvaluationResult(meeting: ID): EvaluationStatistics
  "查看已完成的会议列表"
  findFinishMeeting(
    "过滤查询条件"
    filter: MeetingRecordedFilter
  ): [CongressMeeting]
  "查询所有表单，使用表单时调用，返回所有的"
  findForms: [ProcessForm]
  "查询历史记录"
  findHistorRecord(object: ID, type: String): [HistoryRecord]
  findIntegrationRule: [OperatingScore]
  "功能：获取上一年基本支出预算编制明细"
  findLastYearBudgetByBasePay(budgetType: ID!, unit: ID!): [BudgetBasePayDetail]
  "功能：获取上一年预算编制明细(基本支出)"
  findLastYearBudgetDetail(budgetType: ID!, unit: ID!): [BudgetBasePayDetail]
  "查看会议录播分页"
  findMeetingRecorded(
    "过滤分页条件"
    filter: MeetingRecordedFilter, 
    "pageSize"
    orderBy: OrderBy, 
    "page"
    page: Int, 
    "pageSize"
    pageSize: Int
  ): MeetingRecordedConnection
  "查询会议角色人员"
  findMeetingUserRole(
    "会议id"
    meetingId: ID
  ): [Employee]
  "移动端：履职记录"
  findMobileArchive(filter: ArichiveFiletr): MobileArchive
  findOpinionCollection(input: OpinionCollectionFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): OpinionCollectionConnection
  findOpinionCollectionDetail(
    "人员id"
    id: ID
  ): OpinionsCollection
  findOpinionCollections(
    "人员id"
    id: ID
  ): [OpinionsCollection]
  findOptionType: [OptionType]
  "分页查询学习目录"
  findPageReadingNotes(filter: ReadingNotesFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ReadingNotesConnection
  "党费缴纳列表 分页查询"
  findPartyBillPage(filter: PartyBillFilter, orderBy: OrderBy, organization: String, page: Int = 1, pageSize: Int = 15): PartyBillConnection
  "党费导入 分页查询"
  findPartyDuesImportPage(filter: PartyDuesImportFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyDuesImportConnection
  "查询主席团名单"
  findPresidiumList(
    "会议id"
    meetingId: ID
  ): [Employee]
  findProcessCategorys: [ProcessCategory]
  "根据主键查询详情"
  findReadingNotesById(id: ID): ReadingNotes
  "查询角色列表(新)"
  findRoles(
    "过滤"
    filter: RoleFilter, 
    orderBy: OrderBy, 
    page: Int = 1, 
    pageSize: Int = 15
  ): RoleConnection
  "移动端：查询开始的会议议程各节点时间"
  findStartMeetingAgenda: [MeetingAgenda]
  "关注"
  follows(filter: FollowsFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): FollowsConnection
  fundDetails(filter: PartyFundDetailFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyFundDetailConnection
  getAllChannel(getAllChannel: getAllChannelRequest): GetAllChannelResponse
  "查询所有索引"
  getAllIndex: [String]
  "获取批量办理按钮"
  getBatchButton(taskId: [String]): [Button]
  "获取批量办理任务的集合"
  getBatchTasks(name: String, taskIds: [String]): [BatchTaskModel]
  "根据模块类型查询该类型统计数：党员、党支部、统战、正式、预备、积极分子 数量"
  getByPartyStatisticalNumber(input: CodeType): Statistical
  "通过分类及上级编码查询数据字典"
  getDataDictionarysByType(parentCode: String, type: String!): [DataDictionary]
  getDetailResult(workflowRequest: GetDetailResultRequest): JSON
  "获取版本信息"
  getDjVersionList(filter: DjVersionFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): DjVersionConnection
  "发起时获取下一环节办理活动(ezform)"
  getEZFormFlowFindNextActivity(input: WorkflowRequestInput): WorkflowResponse
  "获取表单字典数据"
  getFormDictionaryData(input: WorkflowRequestInput): JSON
  "获取流程办理人"
  getHandleUsers(input: UserRequestInput): UserResponse
  "获取微信js加密签名"
  getJsApiSignature(url: String): WxJsapiSignature
  "获取最新未结束的电话记录"
  getLastLogByPass(pass: Int!): TelLog
  "获取OA收件箱"
  getMailReceiveBoxList(getMailReceiveBoxListFilter: GetMailReceiveBoxListFilter): GetMailReceiveBoxListResponse
  "根据流程名称获取流程表单"
  getNewFormByProcessName(getNewFormByProcessNameRequest: GetNewFormByProcessNameRequest): JSON
  "通知通告总条数"
  getNoticeNum(getRemindInfoRequest: GetRemindInfoRequest): GetRemindInfoResponse
  "通知通告"
  getNotices(noticeRequest: NoticeRequest): [NoticeResponse]
  "获取OA组织信息"
  getOAOrganizations(input: OrganizationRequestInput): OrganizationResponse
  "获取oa门户"
  getOaGatewayByEmployeeId(applicationId: ID!, empId: ID!): GetOaGatewayResponse
  "获取党龄"
  getPartyStanding(employeeId: ID!): String
  getPortalInfoList(getPortalInfoListRequest: GetPortalInfoListRequest): GetPortalInfoListResponse
  "根据类型查询字段配置表"
  getStageFieldConfigurationList(category: StageWorkflowCategory): [StageFieldConfiguration]
  getStageFieldList(filter: StageFieldFilter, orderBy: OrderBy, page: Int, pageSize: Int): StageFieldConnection
  "党建查询所有阶段"
  getStageList(category: StageWorkflowCategory): [Stage]
  "查询权限列表"
  getStagePermissionList(filter: StagePermissionFilter, orderBy: OrderBy, page: Int, pageSize: Int): StagePermissionConnection
  "查询某个流程全部步骤(添加阶段id查询条件)"
  getStageSteps(stageId: ID, workflow: ID!): [StageWorkflowStep]
  "根据类型查询流程方案list"
  getStageWorkflowSchemeList(category: StageWorkflowCategory): StageWorkflowScheme
  "查询步骤操作"
  getStageWorkflowStepTransitionList(filter: StageWorkflowStepTransitionFilter, orderBy: OrderBy, page: Int, pageSize: Int): StageWorkflowStepTransitionConnection
  getTouristAccount: TouristAccount
  "根据登录用户ID查询用户信息"
  getUserInfoByUserId(id: String!): UserInfo
  getWeekReadTime(filter: ArticleReadRecordFilter): Int
  "起时获取下一环节办理活动（form）"
  getWorkflowFirstNextList(input: WorkflowRequestInput): WorkflowResponse
  ghActivities(
    "员工ID"
    employeeId: Int, 
    filter: GhActivityFilter, 
    moblieInvoke: Int = 0, 
    orderBy: OrderBy, 
    "页数"
    page: Int = 1, 
    "行数"
    pageSize: Int = 15
  ): GhActivityConnection
  "查询活动(管理员查询)"
  ghActivitiesByAdmin(
    "filter"
    filter: GhActivityFilter, 
    "orderBy"
    orderBy: OrderBy, 
    "page"
    page: Int! = 1, 
    "pageSize"
    pageSize: Int! = 15
  ): GhActivityConnection
  "查询单个活动"
  ghActivity(
    "id"
    id: ID
  ): GhActivity
  "查询单个场次"
  ghActivityPlace(id: ID): GhActivityPlace
  ghActivityPlaceUser(
    filter: GhActivityPlaceUserFilter, 
    orderBy: OrderBy, 
    "页数"
    page: Int = 1, 
    "行数"
    pageSize: Int = 15
  ): GhActivityPlaceUserConnection
  "查询活动场次"
  ghActivityPlaces(actId: ID, deleted: Boolean = false): [GhActivityPlace]
  ghActivitySigns(
    filter: GhActivitySignFilter, 
    orderBy: OrderBy, 
    "page"
    page: Int, 
    pageSize: Int
  ): GhActivitySignConnection
  ghAssocPositions: [GhAssocPosition]
  ghAssocUsers(filter: GhAssocUserFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): GhAssocUserConnection
  ghAssociation(id: ID!): GhAssociation
  ghAssociations(
    filter: GhAssociationFilter, 
    "移动端列表调用传1"
    mobileInvoke: Int, 
    orderBy: OrderBy, 
    page: Int, 
    pageSize: Int = 15
  ): GhAssociationConnection
  "根据主键ID获取我的历程信息"
  ghEmployeeJourney(
    "主键id"
    id: ID!
  ): GhEmployeeJourney
  "分页查询我的历程信息"
  ghEmployeeJourneys(
    "过滤对象"
    filter: GhEmployeeJourneyFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): GhEmployeeJourneyConnection
  "查询标签用户"
  ghEmployeeLabelUsers(filter: GhEmployeeLabelUserFilter, orderBy: OrderBy, page: Int, pageSize: Int): GhEmployeeLabelUserConnection
  "查询组织机构人员标签"
  ghEmployeeLabels(filter: GhEmployeeLabelFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): GhEmployeeLabelConnection
  "查询器材相关信息(根据id查询)"
  ghEquipment(id: Int!): GhEquipment
  "查询器材预定(根据id查询)"
  ghEquipmentReserve(id: Int!): GhEquipmentReserve
  "查询器材预定"
  ghEquipmentReserves(filter: GhEquipmentReserveFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): GhEquipmentReserveConnection
  "查询器材类型基本内容(根据id查询)"
  ghEquipmentType(id: Int!): GhEquipmentType
  "查询器材类型基本内容"
  ghEquipmentTypes(filter: GhEquipmentTypeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): GhEquipmentTypeConnection
  ghEquipments(filter: GhEquipmentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): GhEquipmentConnection
  "查询单个群组分类"
  groupType(
    "群组分类id"
    id: ID!
  ): EmployeeGroupScope
  "查询全部群组分类"
  groupTypes(
    "群组分类名称"
    name: String, 
    "组织id"
    organization: ID!
  ): [EmployeeGroupScope]
  guideToCheck(code: String): GuideToCheckResult
  "根据ID查询进口论证"
  importArgument(id: ID): ImportArgument
  "查询所有进口论证"
  importArguments(filter: ImportArgumentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ImportArgumentConnection
  "功能：根据条件统计收入预算明细信息"
  incomeBudgetDetailStatistics(filter: ReportFilter!): [IncomeBudgetDetailStatistics]
  "功能：初始化接口基础配置"
  initConfig: JSON
  "加分申请列表"
  integralApplys(filter: IntegralApplyFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralApplyConnection
  "根据主键ID获取积分类别信息"
  integralCategory(id: ID!): IntegralCategory
  "分页查询积分类别信息"
  integralCategorys(filter: IntegralCategoryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralCategoryConnection
  "单个积分人员"
  integralEmployee(id: ID!): IntegralEmployee
  "人员积分明细"
  integralEmployeeRules(filter: IntegralEmployeeRuleFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralEmployeeRuleConnection
  "积分人员列表"
  integralEmployees(filter: IntegralEmployeeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralEmployeeConnection
  "查询积分考核表的规则列表"
  integralExamineFormRules(id: ID!): [IntegralRegulation]
  "积分考核表查询"
  integralExamineForms(filter: IntegralExamineFormFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralExamineFormConnection
  "根据主键ID获取积分规则信息"
  integralRegulation(id: ID!): IntegralRegulation
  "分页查询积分规则信息"
  integralRegulations(filter: IntegralRegulationFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IntegralRegulationConnection
  "互动交流"
  interaction(id: ID!): Interaction
  "互动交流分页接口"
  interactions(filter: InteractionFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, uid: ID!): InteractionConnection
  "是否可以退出报名(前三十分钟可退出)"
  isExit(
    "人员id"
    employeeId: Int!, 
    "场次id"
    placeId: Int!
  ): Boolean
  issue(id: ID!): Issue
  """
      projectWorkFlows:[StageWorkflow]
  获取所有指定类型的自动派单规则条件
  """
  issueAllocationRule(code: IssueAllocationRuleEnum!, organization: ID!): [IssueCondition]
  "所有的评价详情"
  issueAppraisalRuleInfos: [IssueAppraisalRuleInfo]
  "所有的自动评价规则"
  issueAppraisalRules: [IssueAppraisalRule]
  "查询单条故障类型"
  issueFaultDescription(id: ID): IssueFaultDescription
  "查询故障列表"
  issueFaultDescriptions(filter: IssueFalutDescriptionFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IssueFaultDescriptionConnection
  issueFieldConfiguration(id: ID!): IssueFieldConfiguration
  issueFieldConfigurationScheme(id: ID!): IssueFieldConfigurationScheme
  issueFieldConfigurationSchemes: [IssueFieldConfigurationScheme]
  issueFieldConfigurations: [IssueFieldConfiguration]
  "查询初始化状态 方案的id，问题类型的id"
  issueInitializateStatus(scheme: ID!, type: ID!): IssueStatus
  "所有消息规则"
  issueMessageRules: [IssueMessageRule]
  "根据问题id,项目id，查询所有操作记录"
  issueOperateLog(issue: ID!, project: ID!): [WorkflowSchedule]
  "查询某个权限方案的列表"
  issuePermissionScheme(id: ID!): IssuePermissionScheme
  "查询全部权限方案"
  issuePermissionSchemes: [IssuePermissionScheme]
  "分页查询优先级"
  issuePrioritys(filter: IssuePriorityFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IssuePriorityConnection
  issueProject(id: ID!): IssueProject
  "分页查询状态"
  issueStatuss(filter: IssueStatusFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IssueStatusConnection
  "查询单个问题类别"
  issueTypeCategory(id: ID): IssueTypeCategory
  "查询全部任务类型方案"
  issueTypeSchemes: [IssueTypeScheme]
  "查询全部任务类型"
  issueTypes: [IssueType]
  "查询一个工作流"
  issueWorkflow(id: ID!): IssueWorkflow
  "查询一个工作流方案"
  issueWorkflowScheme(id: ID): IssueWorkflowScheme
  "查询全部工作流方案"
  issueWorkflowSchemes: [IssueWorkflowScheme]
  "根据问题id,操作id,查询状态"
  issueWorkflowStatus(tran: ID!, type: ID!, workflow: ID!): IssueStatus
  "查询全部工作流"
  issueWorkflows: [IssueWorkflow]
  "分页查询任务"
  issues(filter: IssueFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): IssueConnection
  "全部职务"
  jobs(orderBy: OrderBy, organization: ID!): [Job]
  joincondition(id: ID!): Joincondition
  joinconditions(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Joincondition]
  joinconditionsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): JoinconditionConnection
  "根据年度,所属支部,查询是否已存在"
  judgeUniqueness(deptId: Int, year: String): Boolean
  "关键字查询"
  keywordQuery(filter: KeyWordQueryFilter, orderBy: String, page: Int = 1, pageSize: Int = 15, parameter: String): BudgetProjectConnection
  "根据主键id查询知识库信息"
  knowledge(id: ID): Knowledge
  knowledgeTypes: [KnowledgeType]
  "分页查询知识库信息"
  knowledges(filter: KnowledgeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 10): KnowledgeConnection
  "留言意见"
  leavings(filter: LeavingFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LeavingsConnection
  "查询章节详情"
  lesson(id: ID!): Lesson
  """
    查询学习人关联的课程
   learners(filter: LearnerFilter, page: Int= 1, pageSize:Int = 15, orderBy: OrderBy): LearnerConnection
  查询学习记录
  """
  lessonRecords(filter: LessonRecordFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LessonRecordConnection
  "通话记录计数"
  logTelCount(filter: LogTelCountFilter): TelLogsCount
  "功能：获取指定版本库所有历史数据"
  logs(code: String!): [LogResponse]
  "根据主键ID获取项目代码管理信息"
  mange(
    "主键id"
    id: ID!
  ): Mange
  "分页查询项目代码管理信息"
  manges(
    "过滤对象"
    filter: MangeFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): MangeConnection
  "根据会议类型查询人"
  meeintTypeEmployees(department: ID!, type: String!): [Employee]
  meeting(id: ID!): Meeting
  "功能:根据主键查询文档信息"
  meetingDocument(id: ID): MeetingDocument
  "功能：分页查询会议文档信息"
  meetingDocuments(filter: MeetingDocumentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingDocumentConnection
  "功能：查询会议测评明细"
  meetingEvaluation(filter: MeetingEvaluationFilter): MeetingEvaluation
  "根据主键id查询会议角色信息"
  meetingRole(id: ID!): MeetingRole
  "功能：分页查询角色信息"
  meetingRoles(filter: MeetingRoleFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingRoleConnection
  "功能：获取每个阶段新增的议题"
  meetingTopics(input: MeetingTopicFilter): [MeetingTopic]
  "查询会议类型对应的默认参会人规则"
  meetingTypeSecurity(type: String!): MeetingTypeSecurity
  "根据人查询能发起的会议List(全部)"
  meetingTypeSecurityList(filter: MeetingTypeFilter): [MeetingTypeSecurity]
  "根据人查询能发起的会议"
  meetingTypeSecuritys(uid: ID!): [MeetingTypeSecurity]
  meetingnotice(id: ID!): Meetingnotice
  meetingnotices(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingnotice]
  meetingnoticesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingnoticeConnection
  meetingreserve(id: ID!): Meetingreserve
  meetingreserves(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingreserve]
  meetingreservesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingreserveConnection
  meetingroom(id: ID!): Meetingroom
  meetingrooms(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingroom]
  meetingroomsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingroomConnection
  meetings(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meeting]
  meetingsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingConnection
  meetingtype(id: ID!): Meetingtype
  meetingtypes(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingtype]
  meetingtypesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingtypeConnection
  meetingvote(id: ID!): Meetingvote
  meetingvotedetail(id: ID!): Meetingvotedetail
  meetingvotedetails(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingvotedetail]
  meetingvotedetailsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingvotedetailConnection
  meetingvotes(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Meetingvote]
  meetingvotesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MeetingvoteConnection
  "应用"
  microapps(id: String): [Microapp]
  "功能：根据主键id查询业务实体"
  model(id: ID!): Model
  "功能：查询单个"
  modelExpansion(id: ID): DataExpansion
  "功能：分页查询业务实体扩展"
  modelExpansions(filter: ModelFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ModelExpansionConnection
  "功能：获取字段类型集"
  modelFiledTypes(filter: ModelFiledTypeFilter): [ModelFiledType]
  "功能：查询单个"
  modelInterface(id: ID): ModelInterface
  "功能：分页查询业务实体扩展"
  modelInterfaces(filter: ModelFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ModelInterfaceConnection
  "功能：获取实体操作日志集"
  modelLogs(model: ID): [ModelLog]
  "功能：分页查询业务实体集"
  models(filter: ModelFilter): [Model]
  "功能：根据主键id查询提案明细"
  motion(id: ID): Motion
  "功能：获取提案编号"
  motionNumber: String
  "根据ID查询提案类型"
  motionType(id: ID!): MotionType
  "分页查询提案类型"
  motionTypes(filter: MotionTypeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): MotionTypeConnection
  "功能：分页查询提案信息"
  motions(filter: MotionFilter, filterAll: MotionFilterAll, id: ID, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, transactStatus: TransactStatus): MotionConnection
  "根据身份和用户查询会议"
  newEntityUsers(filter: NewEntityUserFilter): [NewEntityUser]
  "会议"
  newMeetings(filter: NewMeetingFilter): [NewMeeting]
  "下一任务节点"
  nextUserTask(empId: String, flowElementId: ID, map: JSON, preApprover: ID, processDefinitionModelId: ID): [FlowElement]
  noPartyBIEmployeeData(filter: BiDetailViewFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int): EmployeeConnection
  noPartyDepartmentInfo: [PartyDepartmentInfoVIew]
  nonPartyBIData(department: ID): NonPartyBIData
  notes: String
  noticeTemplates(filters: NoticeTemplateFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): NoticeTemplateConnection
  "查询某个人的全部通知 uid为用户id"
  notifications(uid: ID!): [Notification]
  "获取人员信息"
  oaEmployees(filter: OAEmployeeFilter, page: Int = 1, pageSize: Int = 15): EmployeeConnection
  "获取供应商信息"
  oaVendors: VendorResponse
  "获取十院在线党校链接"
  onlineSchool(sn: String): String
  "获取所有的按钮"
  operationPermissions: [OperationPermission]
  "根据id查询意见类型"
  opinionCollect(id: ID!): OpinionCollect
  "查询意见征集列表"
  opinionCollects(filter: OpinionCollectFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): OpinionCollectConnection
  opinionEmployeeGroup(uid: ID!): OpinionEmployeeGroup
  "根据id查询意见类型"
  opinionType(id: ID!): OpinionType
  "查询意见类型列表"
  opinionTypes(filter: OpinionTypeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): OpinionTypeConnection
  opinionValueSettings(key: ID): [OpinionValue]
  "根据主键ID获取人员表信息"
  orgEmployee(
    "主键id"
    id: ID!
  ): OrgEmployee
  "分页查询人员表信息"
  orgEmployees(
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): OrgEmployeeConnection
  "组织•单个组织"
  organization(id: ID!): Organization
  "单个部门人员状态查询"
  organizationEmployeeStatus(
    "主键"
    id: ID!
  ): OrganizationEmployeeStatus
  "全部部门人员状态查询"
  organizationEmployeeStatuss(
    "过滤条件"
    filter: OrganizationEmployeeStatusFilter, 
    "组织id"
    organization: ID
  ): [OrganizationEmployeeStatus]
  "组织•组织列表"
  organizations(filter: OrganizationFilter): [Organization]
  "通过ID查询申请人所有文件"
  partyApplyFiles(id: ID!): [PartyApplyFile]
  "查看操作记录"
  partyApplyRecords(filter: PartyApplyRecordFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyApplyRecordConnection
  "查询考核列表"
  partyAssessment(id: ID): PartyAssessment
  "分页查询讯考核列表"
  partyAssessments(filter: AssessmentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): AssessmentConnection
  "党员统计查询接口"
  partyBIData(
    "部门ID"
    department: ID
  ): PartyBIData
  "党员统计人员详情查询接口"
  partyBIEmployeeData(
    "过滤条件"
    filter: BiDetailViewFilter, 
    "排序"
    orderBy: OrderBy, 
    "页数"
    page: Int = 1, 
    "页长"
    pageSize: Int = 15
  ): EmployeeConnection
  "查询用户评奖次数"
  partyCounts(uId: ID!): Int
  "根据传入departmentId和stageId查询党员发展数据"
  partyDepartmentData(
    "部门编号"
    department: ID, 
    "党员类型"
    type: String
  ): PartyApplyData
  "支部信息接口"
  partyDepartmentInfo: [PartyDepartmentInfoVIew]
  "党员教育统计"
  partyEducationData(
    "用户id"
    employee: ID
  ): ReadingTime
  "分页查询"
  partyEvaluates(filter: PartyEvaluateFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyEvaluateConnection
  partyExpensespy(filter: PartyExpenseFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, uid: ID): PartyExpensepyConnection
  "移动端概览"
  partyFundOverview(department: ID, organization: ID!, year: String!): [PartyFundOverView]
  "查询已有记录的年份"
  partyFundYear(organization: ID!): [Int]
  "查看单个学习记录"
  partyLearnRecord(id: ID): LearnRecord
  "查询学习记录"
  partyLearnRecords(filter: LearnRecordFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LearnRecordConnection
  "查询单个学习主题"
  partyLearnTheme(id: ID): LearnTheme
  "学习主题分页查询"
  partyLearnThemes(filter: LearnThemeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): LearnThemeConnection
  "班组管理分页查询"
  partyTeams(filter: TeamFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TeamConnection
  "查询某个用户的年度考核"
  partyUserYearAssessments(user: ID, year: String): [PartyAssessment]
  "党员管理 带组组长 查询统计接口"
  partyWithTeamLeaderData(
    "组织id"
    organization: ID!
  ): WithTeamLeaderData
  "查询年度考核统计"
  partyYearAssessmentStatistics(filter: AssessmentStatisticFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): AssessmentStatisticConnection
  "查询年度考核明细"
  partyYearAssessments(departmentId: ID, employeeId: ID, organizationId: String, year: Int): [PartyYearAssessment]
  "查询单个申请人信息"
  partyapply(uid: ID!): PartyApplys
  "查询所有申请人列表"
  partyapplys(filter: PartyApplysFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyApplysConnection
  partybill(id: ID!): Partybill
  partybills(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Partybill]
  partybillsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartybillConnection
  partyexpense(id: ID!): Partyexpenses
  partyexpenses(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Partyexpenses]
  partyexpensesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PartyexpensesConnection
  "分页查询各支部个年度经费"
  partyfunds(filter: PartyFundFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15, uid: ID): PartyFundConnection
  "分页查询付款申请信息"
  payApplys(filter: PayApplyFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PayApplyConnection
  "功能：根据条件统计支出预算明细信息"
  payBudgetDetailStatistics(filter: ReportFilter!): [PayBudgetDetailStatistics]
  "单条付款查询"
  payment(id: ID): Payment
  "根据ID查询"
  paymentBatch(id: ID): PaymentBatch
  "查询所有付款批次"
  paymentBatchs(filter: PaymentBatchFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PaymentBatchConnection
  "付款进度明细报表"
  paymentDetailed(filter: PaymentDetailedFilter): [JSON]
  "项目支付情况统计报表"
  paymentStatistics(filter: PaymentStatisticsFilter): [JSON]
  "付款进度汇总报表"
  paymentSummary(filter: PaymentSummaryFilter): [JSON]
  "查询所有付款信息"
  payments(filter: PaymentFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PaymentConnection
  payscale(id: ID!): Payscale
  payscales(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Payscale]
  payscalesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PayscaleConnection
  paystandard(id: ID!): Paystandard
  paystandards(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Paystandard]
  paystandardsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PaystandardConnection
  "查询权限分类列表"
  permissionTypes(
    "过滤"
    filter: PermissionTypeFilter, 
    orderBy: OrderBy, 
    page: Int = 1, 
    pageSize: Int = 15
  ): PermissionTypeConnection
  "查询权限列表"
  permissions(
    "过滤"
    filter: PermissionFilter, 
    orderBy: OrderBy, 
    page: Int = 1, 
    pageSize: Int = 15
  ): PermissionConnection
  "根据门户id，查询门户"
  portal(id: ID!): Portal
  "查询应用门户配置"
  portals(applicationId: ID!): [Portal]
  "查询所有的职位"
  positions(
    "过滤条件"
    filter: PositionFilter, 
    "组织id"
    organization: ID!
  ): [Position]
  processApplication(modelId: ID!, modelType: String): ProcessAppLocation
  "查询流程应用"
  processApplications(filter: ModelFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessAppLocationConnection
  processCategory(id: ID!): ProcessCategory
  processCategorys(filter: ProcessCategoryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessCategoryConnection
  processDefinition(key: String): ProcessDefinition
  "获取流程定义列表"
  processDefinitions(filter: ProcessDefinitionFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessDefinitionConnection
  processForm(modelId: ID!): ProcessForm
  "查询所有表单，定义表单时调用"
  processForms(filter: FormFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessFormConnection
  "获取单条流程实例子"
  processInstance(processInstanceId: String!): ProcessInstance
  "获取流程实例"
  processInstances(filter: ProcessInstanceFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessInstanceConnection
  processModel(modelId: ID!): ProcessModel
  "查询流程定义"
  processModels(filter: ProcessModelFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProcessModelConnection
  "根据主键id查询项目明细"
  project(id: ID!): Project
  "根据主键id查询立项明细"
  projectApproval(id: ID!): ProjectApproval
  "分页查询立项信息"
  projectApprovals(filter: ProjectApprovalFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProjectApprovalConnection
  "根据主键id查询合同明细"
  projectContract(id: ID): ProjectContract
  "分页查询合同信息"
  projectContracts(filter: ContractDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ContractConnection
  "分页查询项目文档信息"
  projectDocuments(filter: ProjectDocumentDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 10): ProjectDocumentConnection
  "根据主键ID获取项目代码管理信息"
  projectManagement(
    "主键id"
    id: ID!
  ): ProjectManagement
  "分页查询项目代码管理信息"
  projectManagements(
    "过滤对象"
    filter: ProjectManagementFilter, 
    "排序规则例如：id_desc"
    orderBy: OrderBy, 
    "当前页"
    page: Int = 1, 
    "每页显示大小"
    pageSize: Int = 15
  ): ProjectManagementConnection
  "查询会议明细"
  projectMeeting(id: ID): ProjectMeeting
  "分页查询分页信息"
  projectMeetings(filter: MeetingDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 10): ProjectMeetingConnection
  "分页查找项目留言"
  projectNotes(orderBy: OrderBy, page: Int = 1, pageSize: Int = 10, themeId: ID!): ProjectNoteConnection
  "分页查询项目讨论主题"
  projectThemes(orderBy: OrderBy, page: Int = 1, pageSize: Int = 10, projectId: ID!): ProjectThemeConnection
  "分页查询项目信息"
  projects(filter: ProjectDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ProjectConnection
  "据主键id查询招标采购明细"
  purchaseTender(id: ID!): PurchaseTender
  "分页查询采购招标信息"
  purchaseTenders(filter: PurchaseTenderDictionaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): PurchaseTenderConnection
  queryAmount(userId: ID, year: String): Amount
  "查询预算用户"
  queryEmployeePosition(filter: EmployeePositionFilter, orderBy: OrderBy, organization: ID!, page: Int = 1, pageSize: Int = 15): EmployeePositionConnection
  "会议分页接口"
  queryMeetings(filter: NewMeetingFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): NewMeetingsConnection
  queryMyExams(examState: ExamState, user: ID!): [Exam]
  queryMyMeetings(filter: MeetingCondition, user: ID!, user_type: String): [Meeting]
  queryMyWrongQuestions(bankId: ID, userId: ID!): WrongQuestiontopic
  queryPaperTopic(examinationPaperId: ID!, filter: PaperTitleFilter): [Questiontopic]
  queryPartyExpenses(
    "filter"
    filter: PartyExpenseFilter, 
    "orderBy"
    orderBy: OrderBy, 
    "page"
    page: Int, 
    "pageSize"
    pageSize: Int, 
    "uid"
    uid: ID
  ): QueryPartyExpenseConnection
  queryPayReport(departmentId: ID, month: Long, year: Long): Payreport
  "应缴党费"
  queryPayStandard(
    "季度"
    quarter: String, 
    "人员id"
    uid: ID!, 
    "年份"
    year: Int
  ): Paystandard
  questionbank(id: ID!): Questionbank
  questionbanks(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Questionbank]
  questionbanksConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): QuestionbankConnection
  "功能:根据主键id查询问卷明细"
  questionnaire(id: ID!): Questionnaire
  "分页查询问卷信息"
  questionnaires(filter: QuestionnaireFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): QuestionnaireConnection
  questiontopic(id: ID!): Questiontopic
  questiontopics(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Questiontopic]
  questiontopicsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): QuestiontopicConnection
  "阅件"
  readings(filter: ReadingFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ReadingsConnection
  relatedaccessories(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Relatedaccessory]
  relatedaccessoriesConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): RelatedaccessoryConnection
  relatedaccessory(id: ID!): Relatedaccessory
  "查询单个调查问卷"
  researchAsk(id: Int!): ResearchAsk
  "查询调查问卷"
  researchAsks(filter: ResearchAskFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchAskConnection
  "根据年度,所属支部,查询是否已存在"
  researchJudgeUniquenessByYearAndDept(deptId: Int, moduleCode: String, year: String): Boolean
  "查询被调查人员汇总表详情"
  researchStatBeingSummaryById(id: Int!): ResearchStatBeingSummary
  "查询被调查人问卷List"
  researchStatBeingSummarys(filter: ResearchStatBeingSummaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchStatBeingSummaryConnection
  "查询问卷问答题汇总数据"
  researchStatEssayQuestion(filter: ResearchStatEssayFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchStatEssayConnection
  "查询调查人问卷详情"
  researchStatJoinSummaryById(id: Int!): ResearchStatJoinSummary
  "查询调查人问卷List"
  researchStatJoinSummarys(filter: ResearchStatJoinSummaryFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchStatJoinSummaryConnection
  "党建三侧汇评结果汇总-显示各被测试部门统计结果"
  researchStatModuleDepts(askId: Int, isBeingDept: Boolean, moduleCode: String, organizationId: String, year: String): [ResearchAsk]
  "查询调查主题内容"
  researchSubject(id: Int!): ResearchSubject
  "查询调查主题内容"
  researchSubjects(filter: ResearchSubjectFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchSubjectConnection
  "查询调查主题行数"
  researchSubjectsCount(filter: ResearchSubjectFilter!): Int
  "查询测评结果汇总List"
  researchSummaryResults(filter: ResearchSummaryResultFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchSummaryResultConnection
  """
    查询调查问卷相关信息
  查询单个调查主题分类
  """
  researchType(id: Int!): ResearchType
  "查询调查主题分类"
  researchTypes(filter: ResearchTypeFilter!, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ResearchTypeConnection
  "查询测评"
  review(id: ID!): Review
  "测评分页查询"
  reviews(filter: ReviewFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): ReviewConnection
  "财务角色的部门接口"
  rightDepartments(
    "账号"
    jobNumber: String!, 
    "组织id"
    organization: ID!, 
    "当前部门路径"
    path: String!, 
    "职务"
    position: String!
  ): [Department]
  "根据用户id查询当前角色信息"
  roleEmp(employeeId: ID, motionId: ID, step: ID): Boolean
  "查询角色分类列表"
  roleTypes(
    "过滤"
    filter: RoleTypeFilter, 
    orderBy: OrderBy, 
    page: Int, 
    pageSize: Int
  ): RoleTypeConnection
  roles(organization: ID!): [Role]
  "单个路由"
  route(id: ID): Route
  "获取全部的路由信息"
  routes(filter: RouteFilter, path: String): [Route]
  "所有 Query"
  schema(id: ID!): GraphQLSchema
  "功能：获取所有的数据库"
  schemas(filter: SchemaStructureFilter!): [DBSchema]
  scopesAnalysis(ids: [ID]): [SecurityScope]
  "查询某个页面分配的全部字段"
  screen(id: ID): IssueScreen
  "查询全部页面"
  screens: [IssueScreen]
  "内容搜索"
  search(indexName: String, organization: [String]!, pageNum: Int, pageSize: Int, queryParams: String!): [BaseResultTemplate]
  "搜索建议"
  searchSuggestion(indexName: String, organization: [String], prefix: String): [String]
  "功能：获取每个议题各组组长总结"
  searchTopicDiscuss(filter: TopicDiscussFilter): [MeetingTopic]
  "查询授权范围"
  securityScopes(context: ContextInput, ids: [ID], organization: ID): [SecurityScope]
  "查询单个服务"
  service(id: ID!): Service
  "查询所有网关版本"
  serviceVersions(code: String!): [ServiceVersion]
  "查询全部服务 可根据名称查询"
  services(filter: ServiceFilterInput): [Service]
  sheet(id: ID!): Sheet
  sheetchild(id: ID!): Sheetchild
  sheetchildren(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Sheetchild]
  sheetchildrenConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): SheetchildConnection
  sheets(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Sheet]
  sheetsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): SheetConnection
  "查询预算拆分当前编号budgetProject"
  splitBudgetSn(ysId: ID): String
  "根据workflow为审批流程的id，project为预算拆分的id，查询审批记录"
  stageApprovalLog(project: ID!, workflow: ID!): [StageSchedule]
  "查询字段配置"
  stageFieldConfiguration(id: ID!): StageFieldConfiguration
  "查询字段库"
  stageFields(category: StageWorkflowCategory, config: ID!): [StageFieldConfigurationItem]
  "查询某个权限方案的列表"
  stagePermissionScheme(id: ID!): StagePermissionScheme
  "查询全部权限方案"
  stagePermissionSchemes: [StagePermissionScheme]
  "查询全部分割线"
  stageSeparators(category: StageWorkflowCategory): [StageSeparator]
  "查询单个步骤"
  stageStep(id: ID!): StageWorkflowStep
  "查询每一步中每个页面中每个tabPane的版本记录 id为版本的id"
  stageStepFieldVersion(id: ID!): StageStepFieldSaveVersion
  "查询流程的全部步骤"
  stageSteps(workflow: ID!): [StageWorkflowStep]
  "查询单个流程 id为流程id，step是步骤的id"
  stageWorkflow(id: ID!): StageWorkflow
  "根据审批流程实例的id，查询审批页面"
  stageWorkflowInstance(id: ID!): StageWorkflowInstance
  "根据用户id，查询该用户的全部审批流程"
  stageWorkflowInstanceAll(filter: StageWorkflowInstanceFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StageWorkflowInstanceConnection
  "按流程查询进口论证"
  stageWorkflowInstanceByImportArgument(ImportArgumentFilter: ImportArgumentFilter, filter: StageWorkflowInstanceFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StageWorkflowInstanceConnection
  "按流程查询付款"
  stageWorkflowInstanceByPayment(ImportArgumentFilter: ImportArgumentFilter, filter: StageWorkflowInstanceFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StageWorkflowInstanceConnection
  "查询该流程执行到具体步骤"
  stageWorkflowSchemem(schemeId: ID!, stepId: ID): StageWorkflowScheme
  "查询单个页面"
  stageWorkflowScreen(id: ID!): StageWorkflowScreen
  "查询全部界面"
  stageWorkflowScreens(category: StageWorkflowCategory, scheme: ID!): [StageWorkflowScreen]
  "查询某个类型的全部流程"
  stageWorkflows(category: StageWorkflowCategory): [StageWorkflowScheme]
  "查询全部阶段"
  stages(category: StageWorkflowCategory): [Stage]
  "全部星星类型"
  starTypes: [StarType]
  "查询加星的人"
  stargazers(filter: StargazerFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StargazerConnection
  "查询星星"
  stars(filter: StarFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StarConnection
  "存储器"
  storage(id: ID!): Storage
  "全部存储器"
  storages: [Storage]
  "功能：根据编制任务ID查询其子任务对应的编制明细(makeTask:编制任务ID)"
  summaryBudgetMake(makeTask: ID!): [BudgetMake]
  "根据医院ID和年度查询该医院项目招标完成率，合同签定率，申请支付率"
  summaryDetailed(hospital: String!, year: String!): [JSON]
  summarybrief(id: ID!): Summarybrief
  summarybriefs(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Summarybrief]
  summarybriefsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): SummarybriefConnection
  "按年份医院查询每年每家医院预算总金额，招标完成总金额，合同总金额，付款总金额"
  summarystatistics(hospital: String!, year: String!): [JSON]
  "会议补录详情"
  supplementaryMeeting(id: ID!): SupplementaryMeeting
  "会议补录分页接口"
  supplementaryMeetings(filter: SupplementaryMeetingFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): SupplementaryMeetingConnection
  "功能：根据实体名称获取同步日志集"
  syncLogs(model: ID): [SyncLog]
  "根据条件查询表集合"
  tables(filter: TableFilter!): [Table]
  "功能：获取版本库指定标签对应的数据信息"
  tagData(code: String!, tagName: String!): LogResponse
  "功能:获取版本库所有标签对应的数据信息"
  tagDatas(code: String!): [LogResponse]
  "功能：获取版本库标签信息"
  tags(filter: TagFilter): [Tag]
  "获取单个任务"
  task(taskId: String): Task
  "获取任务"
  tasks(filter: TaskFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TaskConnection
  "党员管理带组组长 党办统计各支部"
  teamLeaderDepartments(
    "组织id"
    organizationId: ID!, 
    "是否是党员"
    status: Boolean!
  ): [DBWithTeamLeaderData]
  "查询单个"
  telEmployee(id: ID): TelEmployee
  "查询电话对应的人员"
  telEmployees: [TelEmployee]
  telLog(id: ID): TelLog
  "电话记录"
  telLogs(filter: TelLogsFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TelLogsConnection
  "绑定电话盒子的电话号和通道"
  telPassLogs: [TelPassLog]
  "查询模板"
  template(id: ID!): Template
  "按模板类型查询"
  templateList(filter: TemplateFilter): [Template]
  "查询单个文件类目"
  templatefileTag(id: ID!): TemplateFileTag
  "查询文件类目"
  templatefileTags(name: String, organization: ID!, status: Boolean): [TemplateFileTag]
  "分页查询文件"
  templatefiles(filter: TemplateFileFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TemplateFileConnection
  "模板分页查询"
  templates(filter: TemplateFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TemplateConnection
  test(id: ID!): Tests
  tests(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Tests]
  testsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TestsConnection
  "功能：查询小组成员发表的意见"
  topicDiscuss(meeting: ID!, publishPerson: ID!, scene: DiscussScene, topic: ID!): MeetingTopic
  topiccollect(id: ID!): Topiccollect
  topiccollects(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Topiccollect]
  topiccollectsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): TopiccollectConnection
  "根据graphqltypedefinitions的id，查询type信息"
  typeDefinition(id: ID!): GraphQLTypeDefinition
  "根据graphqltypedefinitions的id，查询type信息"
  typeDefinitions(filter: TypeDefinitionFilter): [GraphQLTypeDefinition]
  "催办列表"
  urges(filter: urgeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): UrgeConnection
  "查询单个用户"
  user(id: ID): User
  userAnnouncements(filters: UserMessageFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): UserMessageConnection
  "查询用户权限是否拥有权限"
  userPermissionsStatus(
    "权限列表，中间逗号分隔"
    permissions: String, 
    "用户ID"
    userId: Int
  ): String
  userSysnotices(filters: UserMessageFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): UserMessageConnection
  "查询所有用户"
  users(filter: userFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): UserConnection
  "当前版本"
  version: String
  versionLibraries: [VersionDatabase]
  vesion: String
  "观察记录接口"
  viewRecords(filter: ViewRecordFilter): ViewRecordData
  "系统•当前登录用户"
  viewer: LoginUser
  "判断是否加星"
  viewerHasStarred(galaxy: ID!, starType: ID!, uid: ID): Boolean
  "功能：获取议题表决结果统计"
  voteStatistics(meeting: ID!, stages: [ID]!): [VoteStatistics]
  voteoption(id: ID!): Voteoption
  voteoptions(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): [Voteoption]
  voteoptionsConnection(filter: JSON, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): VoteoptionConnection
  "功能：根据流程id查询其对应的流程步骤"
  workFlowSteps(workFlow: ID): [WorkflowStep]
  "获取OA我的待办OA我的待阅"
  workflowSearchDeals(page: Int = 1, pageSize: Int = 15, workflowFilter: WorkflowFilter): WorkfloResponse
}

"QueryPartyExpense"
type QueryPartyExpense {
  "createdAt"
  createdAt: Date
  "departmentId"
  departmentId: String
  "id"
  id: ID
  "month"
  month: Int
  "name"
  name: String
  "payAmount"
  payAmount: Float
  "updatedAt"
  updatedAt: Date
  "year"
  year: Int
}

"QueryPartyExpenseConnection"
type QueryPartyExpenseConnection {
  "currentPage"
  currentPage: Int
  "edges"
  edges: [QueryPartyExpenseEdge]
  "pageInfo"
  pageInfo: PageInfo
  "pageSize"
  pageSize: Int
  "totalCount"
  totalCount: Int
  "totalPage"
  totalPage: Int
}

"QueryPartyExpenseEdge"
type QueryPartyExpenseEdge {
  "cursor"
  cursor: String
  "node"
  node: QueryPartyExpense
}

type QuestionBanks {
  id: Int
  questionTopicNumber: Int
  questionTopics: [Questiontopic]
  question_bank_name: String
}

"题库表"
type Questionbank {
  code: String
  craete_time: DateTime
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  exampapertitles(limit: Int, sort: String, start: Int, where: JSON): [Exampapertitle]
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  questionNumber: Int
  question_bank_name: String
  question_number: Int
  questiontopics(limit: Int, sort: String, start: Int, where: JSON): [Questiontopic]
  updated_at: DateTime!
}

type QuestionbankAggregator {
  avg: QuestionbankAggregatorAvg
  count: Int
  max: QuestionbankAggregatorMax
  min: QuestionbankAggregatorMin
  sum: QuestionbankAggregatorSum
  totalCount: Int
}

type QuestionbankAggregatorAvg {
  question_number: Float
}

type QuestionbankAggregatorMax {
  question_number: Float
}

type QuestionbankAggregatorMin {
  question_number: Float
}

type QuestionbankAggregatorSum {
  question_number: Float
}

type QuestionbankConnection {
  currentPage: Int
  edges: [QuestionbankEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Questionbank]
}

type QuestionbankEdge {
  cursor: String
  node: Questionbank
}

type Questionnaire {
  "创建时间"
  createdAt(format: String): Date
  "版本"
  edition: Int
  "主键id"
  id: ID
  "问卷名称"
  name: String
  "评测类型"
  types: [IndexType]
  "更新日期"
  updatedAt(format: String): Date
}

type QuestionnaireConnection {
  "当前页"
  currentPage: Int
  edges: [QuestionnaireEdge]
  pageInfo: PageInfo
  "每页记录数"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type QuestionnaireEdge {
  cursor: String
  node: Questionnaire
}

type QuestionnaireMsg {
  edition: Int
  id: ID
  name: String
  orgId: ID
  types: [IndexType]
}

"题目表"
type Questiontopic {
  answer_key: String
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  exampapertitles(limit: Int, sort: String, start: Int, where: JSON): [Exampapertitle]
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  options: [Voteoption]
  orgid: String
  question_name: String
  question_type: ENUM_QUESTIONTOPIC_QUESTION_TYPE
  questionbank: Questionbank
  right_answers: String
  sheetchildren(limit: Int, sort: String, start: Int, where: JSON): [Sheetchild]
  topiccollects(limit: Int, sort: String, start: Int, where: JSON): [Topiccollect]
  updated_at: DateTime!
}

type QuestiontopicAggregator {
  count: Int
  totalCount: Int
}

type QuestiontopicConnection {
  currentPage: Int
  edges: [QuestiontopicEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Questiontopic]
}

type QuestiontopicEdge {
  cursor: String
  node: Questiontopic
}

type Reading {
  "内容"
  content: String
  id: ID
  "是否已读"
  isRead: Boolean
  "收件人"
  receiver: String
  "发送时间"
  sendTime: Date
  "发件人"
  sender: String
  "主题"
  subject: String
  "类型"
  type: ReadingEnum
}

type ReadingEdge {
  cursor: String!
  node: Reading
}

type ReadingNotes {
  "书目名称"
  bibliographyName: String
  "用户id"
  employeeId: ID
  "用户"
  employeeName: String
  "附件"
  files: [FileObject]
  "主键id"
  id: ID
  "心得体会"
  learningExperience: String
  "学习时间"
  learningTime: Date
  "党小组id"
  partyGroup: ID
  "党小组"
  partyGroupName: String
}

type ReadingNotesConnection {
  "当前页"
  currentPage: Int
  edges: [ReadingNotesEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ReadingNotesEdge {
  cursor: String
  node: ReadingNotes
}

"阅读时长列表"
type ReadingTime {
  "课程节数"
  courseNumber: Int
  "累计 阅读时长"
  minutes: Int
  "近五个月 阅读时长"
  monthHours: JSON
  "本周阅读时长"
  weekHours: Int
}

type ReadingsConnection {
  "当前页"
  currentPage: Int
  edges: [ReadingEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ReceiveFileBox {
  "流水号"
  byteNumber: String
  "创建人姓名"
  createEmp: String
  "创建人组织"
  createdOrg: String
  "创建人日期"
  createdTime: String
  "公文id"
  id: ID
  "公文主题"
  title: String
  "正文类型"
  wordType: String
  "拟稿单位"
  writeOrg: String
}

"相关资料"
type RelatedAccessory {
  "实体ID"
  entityId: ID
  "实体类型"
  entityType: String
  "相关附件id"
  id: ID
  "相关附件名称"
  name: String
  "相关附件"
  uploadFile: FileObject
}

"相关附件表"
type Relatedaccessory {
  accessory_descript: String
  accessory_type: String
  code: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  file: JSON
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  operator: String
  operatorPerson: Entityuser
  orgid: String
  updated_at: DateTime!
  upload_file: String
  upload_time: DateTime
}

type RelatedaccessoryAggregator {
  count: Int
  totalCount: Int
}

type RelatedaccessoryConnection {
  currentPage: Int
  edges: [RelatedaccessoryEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Relatedaccessory]
}

type RelatedaccessoryEdge {
  cursor: String
  node: Relatedaccessory
}

type RelationField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否级联保存"
  isCascadeSave: Boolean
  "是否级联更新"
  isCascadeUpdate: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否唯一"
  isUnique: Boolean
  "标签集"
  labels: [String]
  "中间实体名称"
  middleModel: String
  "名称"
  name: String
  "关系字段"
  relationField: ModelField
  "关系实体"
  relationModel: Model
  "关系类型"
  relationType: RelationType
  "排序字段"
  sort: Int
}

type ResearchAsk {
  "创建日期"
  createdAt: Date
  "发布人员工信息"
  creator: Employee
  "是否删除"
  deleted: Boolean
  "描述"
  description: String
  "id"
  id: Int
  moduleCode: String
  "问卷名称"
  name: String
  "组织机构id"
  organizationId: String
  "题目"
  questions: [ResearchAskQuestion]
  "类型"
  researchType: ResearchType
  "题目选项是否相同"
  sameQuestionOptions: Boolean
  "状态(1启动,0停用)"
  status: Boolean
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: Employee
}

type ResearchAskConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchAskEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchAskEdge {
  cursor: String
  node: ResearchAsk
}

type ResearchAskOption {
  "测评时是否选中"
  checked: Boolean
  "是否默认选中"
  defaultChecked: Boolean
  "测评时填写的内容"
  fillContent: String
  "id"
  id: Int
  "测评时录入的分数"
  inputScore: Float
  "选项名称"
  name: String
  "统计结果-题目占比"
  resultQtPercent: Float
  "选项结果-总数"
  resultTotal: Int
  "选项结果-总被选择数"
  resultTotalChecked: Int
  "统计结果-总占比"
  resultTotalPercent: Float
  "分值"
  score: Float
  "排序"
  sort: Int
  "统计名称（若有且类型一致，则按此名称最终多添加一份统计结果"
  statName: String
}

type ResearchAskQuestion {
  "关联的子题目列表"
  children: [ResearchAskQuestion]
  "id"
  id: Int
  "题目名称"
  name: String
  "是否必填"
  optionRequired: Boolean
  "选项类型, one单选,more多选,judge判断,fill问答,scoring打分,onesame矩阵单选（选项单选，所有题目相同选项组）,moresame矩阵多选（选项多选，所有题目相同选项组）,scoringsame矩阵量表（选项是打分题，所有题目相同选项组）"
  optionType: String
  "选项"
  options: [ResearchAskOption]
  "统计结果-题目平均分"
  resultAverageScore: Float
  "横向对比-三测评-测评结果汇总-侧面统计所属支部列表或被测评支部占比列表"
  resultBeingDepts: [ResearchBeingObject]
  "横向对比-三测评-群众测党员-被测评对象占比列表"
  resultBeingObjects(subjectId: Int!): [ResearchBeingObject]
  "横向对比-三测评-群众测党员-被测评对象占比列表"
  resultBeingStat(subjectId: Int!): [ResearchStat]
  "横向对比-三测评-群众测党员-选项列表，如果是量表，则是子题目选项列表"
  resultBeingStatOptions: [ResearchAskOption]
  "根据主题查询题目统计结果"
  resultStat(subjectId: Int!): [ResearchStat]
  "统计结果-题目合格率"
  resultStatNamePercent: Float
  "统计结果-[统计名称=统计名称占比？]"
  resultStatNames: [String]
  "统计结果-选项占比列表或选项列表"
  resultStatOptions: [ResearchAskOption]
  "排序"
  sort: Int
}

type ResearchBeingObject {
  "被测评部门信息"
  department: Department
  "被测评人员信息"
  employee: Employee
  "id"
  id: Int
  "被测评名称"
  name: String
  "侧面统计时所属支部或被测评支部统计结果-平均分"
  resultAverageScore: Float
  "侧面统计时所属支部或被测评支部统计结果-[统计名称=统计名称占比]"
  resultStatNames: [String]
  "侧面统计时所属支部或被测评支部统计结果-选项占比列表"
  resultStatOptions: [ResearchAskOption]
  "备用字段1（党建：现任职务）"
  spare1: String
  "备用字段2（党建：拟任职务）"
  spare2: String
  "被测评对象类型"
  type: String
  "被测评ID"
  value: String
}

type ResearchJoinObject {
  "公共的所有人"
  allPerson: Boolean
  "部门ID"
  deptId: Int
  "员工id"
  employeeId: Int
  "id"
  id: Int
  "院内所有部门"
  innerDept: Boolean
}

type ResearchPaper {
  "被测评名称"
  beingObjectName: String
  "被测评对象类型"
  beingObjectType: String
  "被测评ID"
  beingObjectValue: String
  "创建时间"
  createAt: Date
  "Employee对象"
  employee: Employee
  "结束时间"
  endAt: Date
  "是否完成"
  finished: Boolean
  "分页索取试卷题目"
  getQuestions(page: Int, pageSize: Int): [ResearchAskQuestion]
  id: Int
  "参加测评员工ID"
  joinEmployeeId: String
  "参加测评姓名"
  joinObjectName: String
  "测评人手机号"
  personMobile: String
  "类型"
  personType: String
  "测评群众随机号"
  personUuid: String
  "试卷得分(选项带有分值或打分题的合计总分)"
  score: Float
  "党建：现任职务"
  spare1: String
  "党建：拟任职务"
  spare2: String
  "主题ID"
  subject: ResearchSubject
  "主题名称"
  subjectName: String
  "是否有效"
  valid: Boolean
}

type ResearchPaperAnswer {
  "答题时间"
  createdAt: Date
  "参与测评人员信息"
  employee: Employee
  "填写内容"
  fillContent: String
  "id"
  id: Int
  "录入分值"
  inputScore: Float
  "参与测评人员id"
  joinEmployeeId: Int
  "参与测评人员名称"
  joinObjectName: String
  "模块类型"
  moduleCode: String
  "选项id"
  optionId: Int
  "选项名称"
  optionName: String
  "题目选项自带分值"
  optionScore: Float
  "统计名称（若有且类型一致，则按此名称添加统计)"
  optionStatName: String
  "选项类型, onesame矩阵单选（选项单选，所有题目相同选项组）,moresame矩阵多选（选项多选，所有题目相同选项组）,scoringsame矩阵量表（选项是打分题，所有题目相同选项组）"
  optionType: String
  "组织机构id"
  organizationId: String
  "试卷id"
  paper: ResearchPaper
  "父题目id"
  parentQuestionId: Int
  "父题目名称"
  parentQuestionName: String
  "题目id"
  questionId: Int
  "题目名称"
  questionName: String
  "最终得分"
  resultScore: Float
}

type ResearchStat {
  "选项平均分 = totalCheckedScore / total"
  averageScore: Float
  "被测评名称"
  beingObjectName: String
  "被测评对象类型， dept部门，employee员工"
  beingObjectType: String
  "被测评ID"
  beingObjectValue: String
  "id"
  id: Int
  "选项ID"
  optionId: Int
  "选项名称"
  optionName: String
  "选项统计名称"
  optionStatName: String
  "量表时，上级题目ID"
  parentQuestionId: Int
  "量表时，上级题目名称"
  parentQuestionName: String
  "本题某选项答案占比 = totalChecked/total"
  percent: Float
  "题目ID"
  questionId: Int
  "题目名称"
  questionName: String
  "统计分类， option代表选项占比、 opstatname单个题目选项统计名称统计， optotal选项综合统计、opstattotal量表题目综合统计"
  statType: String
  "问卷主题ID"
  subjectId: Int
  "问卷主题名称"
  subjectName: String
  "本题答案总数"
  total: Int
  "本题本选项答案总数"
  totalChecked: Int
  "本题选项选择总分"
  totalCheckedScore: Float
  "总体平均分（注意题目类型为矩阵量表打分）"
  totalityAverage: Float
  "总体合格率或满意度标示（注意题目类型为矩阵单多选）"
  totalityPassPercent: Float
}

type ResearchStatBeingSummary {
  "被调查人汇总统计(AB类型)"
  askSummary(personType: String): ResearchAsk
  "被调查人汇总统计(AB类型)"
  askSummaryByPersonType(personType: String!): ResearchAsk
  "被测评次数"
  beingNum: Int
  "被测评名称"
  beingObjectName: String
  "备用字段1（党建：现任职务）"
  beingObjectSpare1: String
  "备用字段2（党建：拟任职务）"
  beingObjectSpare2: String
  "被测评对象类型"
  beingObjectType: String
  "被测评ID"
  beingObjectValue: String
  "部门对象"
  department: Department
  "Employee对象"
  employee: Employee
  "id"
  id: Int
  "主题id"
  subject: ResearchSubject
  "主题id"
  subjectId: Int
  "主题名称"
  subjectName: String
}

type ResearchStatBeingSummaryConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchStatBeingSummaryEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchStatBeingSummaryEdge {
  cursor: String
  node: ResearchStatBeingSummary
}

type ResearchStatEssayConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchStatEssayEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchStatEssayEdge {
  cursor: String
  node: ResearchPaperAnswer
}

type ResearchStatJoinSummary {
  "创建发起日期"
  createdAt: Date
  "Employee对象"
  employee: Employee
  "填写次数"
  fillNum: Int
  "完成是否"
  finished: Boolean
  "完成度说明"
  finishedNumInfo: String
  "id"
  id: Int
  "参加测评员工ID"
  joinEmployeeId: Int
  "参加测评姓名"
  joinObjectName: String
  "问卷List"
  paperList: [ResearchPaper]
  "测评人手机号"
  personMobile: String
  "测评人群众随机号"
  personUuid: String
  "主题id"
  subject: ResearchSubject
  "主题id"
  subjectId: Int
  "主题名称"
  subjectName: String
  "是否提交"
  submit: Boolean
  "提交时间"
  submitAt: Date
}

type ResearchStatJoinSummaryConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchStatJoinSummaryEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchStatJoinSummaryEdge {
  cursor: String
  node: ResearchStatJoinSummary
}

type ResearchSubject {
  "问卷"
  ask: ResearchAsk
  "调查被测评对象表"
  beingObjects: [ResearchBeingObject]
  "创建日期"
  createdAt: Date
  "创建者信息"
  creator: Employee
  "是否删除，1删除 true，0否 false"
  deleted: Boolean
  "所属部门"
  department: Department
  "描述"
  description: String
  "结束时间"
  endTime: Date
  "是否已结束，时间过了就算结束(0-未开始,1-进行中,2已结束)"
  ended: Int
  "id"
  id: Int
  "调查参与测评对象表"
  joinObjects: [ResearchJoinObject]
  "参与人完成状态返回"
  joinSummary(input: ResearchJoinPersonInput!): ResearchStatJoinSummary
  "主题名称"
  name: String
  "发布状态 (0未发布，1已发布)"
  publishStatus: Int
  "开始时间"
  startTime: Date
  "被测评对象概要统计列表"
  statBeingSummaries: [ResearchStatBeingSummary]
  "已提交数量"
  submitNum: Int
  "调查分类"
  type: ResearchType
  "未提交数量"
  unSubmitNum: Int
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: Employee
  "问卷年度"
  year: String
}

type ResearchSubjectConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchSubjectEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchSubjectEdge {
  cursor: String
  node: ResearchSubject
}

type ResearchSummaryResult {
  "部门id"
  deptId: Int
  "测评类别"
  moduleCode: String
  "已测评支部数"
  num: Int
  "主题id"
  subjectId: Int
  "年度"
  year: String
}

type ResearchSummaryResultConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchSummaryResultEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchSummaryResultEdge {
  cursor: String
  node: ResearchSummaryResult
}

type ResearchType {
  "创建日期"
  createdAt: Date
  "发布人员工信息"
  creator: Employee
  "描述"
  description: String
  "id"
  id: Int
  "类型编码"
  moduleCode: String
  "分类名称"
  name: String
  "组织机构id"
  organizationId: String
  "排序"
  sort: Int
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: Employee
}

type ResearchTypeConnection {
  "当前页"
  currentPage: Int
  edges: [ResearchTypeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ResearchTypeEdge {
  cursor: String
  node: ResearchType
}

type Response {
  "响应消息"
  message: String
  "响应结果"
  result: Boolean
}

type Result {
  "投票结果"
  name: String
  "投票数"
  num: Int
}

type Review {
  "所属支部"
  branch: Department
  "统计结果"
  count(testee: ID): [ReviewCount]
  "测评时间止"
  endTime: Date
  "最终评价"
  finalAssessment(testee: ID): [FinalAssessment]
  "ID"
  id: ID
  "是否完成"
  isCompleted(appraiser: ID): Boolean
  "名称"
  name: String
  "消息提醒"
  remind: Boolean
  "测评时间起"
  startTime: Date
  "状态"
  status: ReviewStatus
  "使用模板"
  template: Template
  "已测评"
  tested(appraiser: ID!, testee: ID): [ReviewDetails]
}

type ReviewConnection {
  "当前页"
  currentPage: Int
  edges: [ReviewEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type ReviewContent {
  "ID"
  id: ID
  "选项"
  options: [ReviewOption]
  "分值"
  score: String
  "题目"
  topic: String
}

type ReviewCount {
  "测评人"
  appraiser: ID
  "平均分"
  average: Int
  "测评内容"
  content: ReviewContent
  "票数"
  count: Int
  "选项"
  option: ReviewOption
  "得分数"
  score: String
  "被测评人"
  testee: Employee
}

type ReviewDetails {
  "测评人"
  appraiser: Employee
  "测评时间"
  createdAt: Date
  "ID"
  id: ID
  "评测结果"
  results: [ReviewResult]
  "测评"
  review: Review
  "被测评人"
  testee: Employee
}

type ReviewEdge {
  cursor: String
  node: Review
}

type ReviewOption {
  "ID"
  id: ID
  "选项名"
  name: String
}

type ReviewResult {
  "ID"
  id: ID
  "结果"
  result: String
  "题目ID"
  topic: ID
}

type Role {
  "角色代码"
  code: String
  "返回授权部门"
  departments: [Department]
  "描述"
  description: String
  "返回授权组"
  employeeGroups: [EmployeeGroup]
  "是否启用（true/false 默认为true）"
  enabled: Boolean
  "主键id"
  id: ID
  "角色名称"
  name: String
  "组织id"
  orgId: ID
  "所属机构"
  organization: Organization
  "返回授权列表(grant permission)"
  permissions: [Permission]
  "返回授权岗位"
  positions: [Position]
  "角色描述"
  roleDesc: String
  "这是一个角色的分类"
  roleType: RoleType
  "角色范围"
  scope: RoleScope
  "用户列表"
  users: [User]
}

type RoleAuth {
  "步骤id"
  step: ID
}

"角色接口类"
type RoleConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [RoleEdge]
  "页面信息"
  pageInfo: PageInfo
  "页面大小"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"角色Edge"
type RoleEdge {
  "cursor"
  cursor: String
  "node"
  node: Role
}

"角色范围"
type RoleScope {
  "是否可用"
  enabled: Boolean
  "id"
  id: String
  "名称"
  name: String
  "角色"
  roles(
    "组织ID"
    organization: ID!
  ): [Role]
}

"角色分类实体"
type RoleType {
  "这是一个分类的描述"
  description: String
  "这是一个分类的id"
  id: ID
  "这是一个分类的名称"
  name: String
  "这是一个分类的角色列表"
  roles: [Role]
  "这是一个分类的排序"
  sort: Int
}

"角色分页接口"
type RoleTypeConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [RoleTypeEdge]
  "页面信息"
  pageInfo: PageInfo
  "页面大小"
  pageSize: Int
  "总记录数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"角色分页实体"
type RoleTypeEdge {
  "这是一个cursor"
  cursor: String
  "这是一个cursor"
  node: RoleType
}

type Route {
  "路由对应的应用"
  application: Application
  "需要提供的权限"
  authority: [String]
  "必须登录"
  authorized: Boolean
  "组件"
  component: RouteComponent
  "路由配置"
  configuration: JSON
  "是否启用"
  enabled: Boolean
  "在菜单中隐藏子节点"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "在菜单中隐藏"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  id: ID
  "序号"
  index: Int
  "路由层级"
  level: Int
  "菜单名称"
  name: String
  "父路由"
  parent: Route
  "树路径"
  path: String
  "路由所属类型"
  protocol: ApplicationProtocol
  "重定向"
  redirect: String
  "子路由"
  routes: [Route]
  "路由类型"
  type: RouteType
}

type RouteComponent {
  "渲染组件"
  id: ID
  "组件配置数据"
  props: JSON
  "路由配置"
  routeWrapper: RouteComponentWrapper
  "模版"
  template: String
}

type RouteComponentWrapper {
  "渲染组件"
  id: ID
  "组件配置数据"
  props: JSON
  "模版"
  template: String
}

type Rule {
  "规则"
  code: String
  "统计规则人数"
  count(entity: ID): Int
  "id"
  id: ID
  "是否默认"
  isDefault(type: String): Boolean
  "名称"
  name: String
  "解析结果数据类型"
  resultType: String
}

"评分结果"
type ScoreResult {
  "得分项"
  assessmentItem: Int
  "主键id"
  id: ID
  "扣分原因"
  pointReason: String
  "得分"
  score: Int
}

type SecurityScope {
  filter: JSON
  id: ID
  name: String
  type: SecurityType
  value: SecurityScopeValue
}

type Service {
  "描述"
  description: String
  "url"
  endpoints: ServiceEndpoint
  "graphql路径"
  graphql: String
  "健康检查"
  healthCheck: ServiceHealthCheck
  "服务地址"
  host: String
  "英文名"
  id: ID
  "排序"
  index: Int
  "名称"
  name: String
  "状态"
  state: ServiceState
  "状态"
  status: ServiceStatus
}

type ServiceEndpoint {
  "外网URL"
  development_graphql: String
  "集群URL"
  graphql: String
  "restful接口"
  restful: String
}

type ServiceHealthCheck {
  method: String
  path: String
  port: Int
}

type ServiceStatus {
  graphql: String
  health: String
}

type ServiceVersion {
  "创建时间"
  createdAt: Date
  "创建人"
  creator: String
  "描述"
  description: String
  "名称"
  name: String
  "版本号"
  versionCode: String
}

"答题卡"
type Sheet {
  createTime: Long
  create_start_time: DateTime
  created_at: DateTime!
  exam: Exam
  examinationpaper: Examinationpaper
  hand_examination: Boolean
  id: ID!
  pass: Boolean
  reExamine: Boolean
  remainTime: Int
  rightNumber: Int
  rightRate: Long
  score: String
  sheetchildren(limit: Int, sort: String, start: Int, where: JSON): [Sheetchild]
  submitAnswer: Boolean
  updated_at: DateTime!
  user: String
  wrongNumber: Int
}

type SheetAggregator {
  avg: SheetAggregatorAvg
  count: Int
  max: SheetAggregatorMax
  min: SheetAggregatorMin
  sum: SheetAggregatorSum
  totalCount: Int
}

type SheetAggregatorAvg {
  remainTime: Float
}

type SheetAggregatorMax {
  remainTime: Float
}

type SheetAggregatorMin {
  remainTime: Float
}

type SheetAggregatorSum {
  remainTime: Float
}

type SheetConnection {
  currentPage: Int
  edges: [SheetEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Sheet]
}

type SheetEdge {
  cursor: String
  node: Sheet
}

"答题卡子表"
type Sheetchild {
  answer: String
  created_at: DateTime!
  id: ID!
  questiontopic: Questiontopic
  result: Boolean
  sheet: Sheet
  updated_at: DateTime!
}

type SheetchildAggregator {
  count: Int
  totalCount: Int
}

type SheetchildConnection {
  currentPage: Int
  edges: [SheetchildEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Sheetchild]
}

type SheetchildEdge {
  cursor: String
  node: Sheetchild
}

type SimpleFormModel {
  description: String
  fields: [FormField]
  key: String
  name: String
  outcomeVariableName: String
  outcomes: [FormOutcome]
  version: Int
}

"阶段"
type Stage {
  "主键"
  id: ID
  "名称"
  name: String
  "排序字段"
  sort: Int
  """
    上级阶段
  parent: Stage
  阶段下面包含的步骤 value为表达式中传入参数
  """
  steps(value: String): [StageWorkflowStep]
}

"字段"
type StageField {
  "是自定义字段还是预设字段"
  category: FieldCategory
  "创建时间"
  createdAt: Date
  "删除标识"
  deleted: Boolean
  id: ID
  "label"
  label: String
  "名称"
  name: String
  "options"
  options: String
  "渲染器 select,input,file,date"
  renderer: String
  "是否必填"
  required: Boolean
  "字段类型"
  type: StageFieldType
}

type StageFieldConfiguration {
  fields: [StageFieldConfigurationItem]
  id: ID
  "名称"
  name: String
}

"字段配置"
type StageFieldConfigurationItem {
  "审批表单审批意见默认值"
  defaultValue: String
  "主键"
  id: ID
  "label"
  label: String
  "名称"
  name: String
  "获取配置"
  options(key: String): JSON
  "渲染器"
  renderer: String
  "是否必填"
  required: Boolean
  "字段类型"
  type: StageFieldType
}

"StageFieldConnection"
type StageFieldConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [StageFieldEdge]
  "pageInfo"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"StageFieldEdge"
type StageFieldEdge {
  "cursor"
  cursor: String
  "node"
  node: StageField
}

type StageGrantPermission {
  id: ID
  "权限"
  permission: StagePermission
  "人类型"
  securityType: StageSecurityType
  "对应的用户或者其他"
  value: String
}

"权限"
type StagePermission {
  "编码"
  code: String
  "创建时间"
  createdAt: Date
  "描述"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "权限关联信息"
  permissions: [StageGrantPermission]
  "类型"
  type: String
}

"StagePermissionConnection"
type StagePermissionConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [StagePermissionEdge]
  "pageInfo"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"StagePermissionEdge"
type StagePermissionEdge {
  "cursor"
  cursor: String
  "node"
  node: StagePermission
}

"权限方案"
type StagePermissionScheme {
  "描述"
  description: String
  "权限"
  grants: [StageGrantPermission]
  "主键id"
  id: ID
  "名称"
  name: String
}

type StageSchedule {
  "批示意见"
  approvalValue: String
  "经办人"
  assignee: Employee
  "时间"
  createdAt: String
  "审批意见列表"
  fieldValues: [FieldNameValue]
  "主键"
  id: ID
  "项目"
  project: ID
  "步骤"
  step: StageWorkflowStep
  "操作"
  tran: StageWorkflowStepTransition
  "工作流"
  workflow: StageWorkflow
}

"界面中包含的TabPane"
type StageScreenTabPane {
  "Tab 里的字段"
  fields: [StageFieldConfigurationItem]
  id: ID
  "名称"
  name: String
}

"分隔符"
type StageSeparator {
  "描述"
  description: String
  "主键"
  id: ID
  "名称"
  name: String
  "级别"
  rank: Int
}

"步骤页面版本"
type StageStepFieldSaveVersion {
  "字段的值"
  fieldValues: [StageStepFieldValue]
  "主键"
  id: ID!
  "操作人"
  operator: String
  "步骤"
  step: StageWorkflowStep
  "类型"
  type: StageOperatorType
  "版本号"
  version: String
  "流程"
  workflow: StageWorkflow
}

type StageStepFieldValue {
  "字段名称"
  name: String
  "字段类型"
  type: String
  "字段值"
  value: String
}

"流程"
type StageWorkflow {
  "分类"
  category: StageWorkflowCategory
  "主键ID"
  id: ID
  "流程名称"
  name: String
  "对应的阶段"
  stages: [Stage]
  "默认模板还是新模板"
  type: StageWorkflowType
}

"字段值"
type StageWorkflowFieldValue {
  "字段"
  field: StageField
  "主键"
  id: ID
  "业务id"
  project: ID
  "阶段"
  stage: Stage
  "步骤"
  step: StageWorkflowStep
  "值"
  value: String
  "对应版本"
  version: StageStepFieldSaveVersion
}

"流程实例"
type StageWorkflowInstance {
  "总会计师审核"
  chiefAccountant: [Employee]
  "创建时间"
  createdAt: String
  "创建人"
  creator: String
  "创建人员"
  creatorEmployee: Employee
  "部门"
  department: Department
  "审核人员"
  financialAuditEmployee: [Employee]
  "该步骤是否有某个权限"
  grants(departmentId: ID, user: ID): Boolean
  "主键"
  id: ID
  "进口论证"
  importArguments: ImportArgument
  "付款"
  payments: Payment
  "项目"
  project: ID
  "可以回退的步骤"
  returnSteps: [StageWorkflowStep]
  "申康财务审核经办人"
  skFinancialAuditEmployee: [Employee]
  "阶段"
  stage: Stage
  "流程方案"
  stageSchemem: StageWorkflowScheme
  "流程实例的状态  为'back'时，返回至创建页面 为'end'时，返回至列表页"
  status: String
  "当前步骤"
  step: StageWorkflowStep
  "类型"
  type: StageWorkflowInstanceType
}

"流程实例分页"
type StageWorkflowInstanceConnection {
  "当前页"
  currentPage: Int
  edges: [StageWorkflowInstanceEdg]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type StageWorkflowInstanceEdg {
  cursor: String
  node: StageWorkflowInstance
}

"阶段方案"
type StageWorkflowScheme {
  "字段方案"
  configuration: StageFieldConfiguration
  "描述"
  description: String
  "对应字段的值"
  fieldValues(category: StageWorkflowCategory, projectId: ID): [FieldNameValue]
  "主键"
  id: ID
  "名称"
  name: String
  "界面"
  screens: [StageWorkflowScreen]
  "流程id"
  workflow: StageWorkflow
}

"界面"
type StageWorkflowScreen {
  "描述"
  description: String
  "已分配的所有字段"
  fields: [StageFieldConfigurationItem]
  "主键id"
  id: ID
  "名称"
  name: String
  "域"
  tabs: [StageScreenTabPane]
  "标题"
  title: String
}

"步骤"
type StageWorkflowStep {
  "该步骤的介绍"
  description: String
  "是否为第一步"
  firstStep: Boolean
  "判断是审批流程还是普通流程"
  flag: String
  "该步骤是否有某个权限"
  grants(user: ID): Boolean
  "主键"
  id: ID
  "名称"
  name: String
  "用于标识"
  otherId: ID
  "权限"
  permissionValues: [String]
  "级别"
  rank: Int
  "可以回退的步骤"
  returnSteps: [StageWorkflowStep]
  "界面"
  screen: StageWorkflowScreen
  "separator"
  separator: StageSeparator
  "排序字段"
  sort: Int
  "该步骤是否已经执行"
  status: StageWorkflowStepStatus
  "跳转到下一个步骤的操作"
  transitions: [StageWorkflowStepTransition]
  "类型"
  type: StageType
  "历史版本"
  versions: [StageStepFieldSaveVersion]
}

"跳转到下一个步骤的操作"
type StageWorkflowStepTransition {
  "描述"
  description: String
  "下一个步骤"
  destination: StageWorkflowStep
  id: ID
  "名称"
  name: String
  "类型"
  type: StageWorkflowStepTransitionType
}

"StageWorkflowStepTransitionConnection"
type StageWorkflowStepTransitionConnection {
  "当前页"
  currentPage: Int
  "edges"
  edges: [StageWorkflowStepTransitionConnection]
  "pageInfo"
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"StageWorkflowStepTransitionEdge"
type StageWorkflowStepTransitionEdge {
  "cursor"
  cursor: String
  "node"
  node: StageWorkflowStepTransition
}

type Star {
  createdAt: Date
  creator: ID
  galaxy: String
  id: ID
  modifier: ID
  readingTime: Int
  starType: StarType
  stargazer: Employee
  updatedAt: Date
  value: StarValue
  valueType: String
}

type StarConnection {
  "当前页"
  currentPage: Int
  edges: [StarEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type StarEdge {
  cursor: String!
  node: Star!
}

type StarType {
  id: ID
  name: String
  valueType: String
}

type StargazerConnection {
  "当前页"
  currentPage: Int
  edges: [StargazerEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type StargazerEdge {
  node: Employee!
  starredAt: Date!
}

type Starrable {
  "信徒"
  followers(filter: StarrableEmployeeFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): EmployeeConnection
  id: ID
  "观星者"
  stargazers(filter: StarrableStargazerFilter, orderBy: OrderBy, page: Int = 1, pageSize: Int = 15): StargazerConnection
  "用户是否已加星标"
  viewerHasStarred: Boolean!
}

type Statistical {
  "code"
  code: String
  "创建时间"
  createTime: Date
  "执行语句"
  execStatement: String
  "编号"
  id: ID
  "功能模块"
  model: String
  "修改时间"
  modifyTime: Date
  "备注"
  remark: String
  "适用范围"
  scope: String
  "模块类型"
  type: String
  "取数值"
  value: Float
  "map"
  values: JSON
}

"文件存储器"
type Storage {
  "配置参数"
  configs: StorageConfigs
  "描述"
  description: String
  "ID"
  id: ID!
  "名称"
  name: String
  "目录树"
  tree: [Directory]
  "类型"
  type: String
}

type StorageConfigs {
  accessKeyId: String
  accessKeySecret: String
  baseDir: String
  bucketName: String
  endpoint: String
}

type StringField implements ModelField {
  "字符长度"
  characterMaxLength: Int
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否主键"
  isPrimaryKey: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type Subscription {
  updateRoute: Route
}

"纪要_简报"
type Summarybrief {
  code: String
  content: String
  create_departid: String
  create_time: DateTime
  created_at: DateTime!
  creator: String
  creatorPerson: Entityuser
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  id: ID!
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  relateAccessorys: [Relatedaccessory]
  title: String
  updated_at: DateTime!
}

type SummarybriefAggregator {
  count: Int
  totalCount: Int
}

type SummarybriefConnection {
  currentPage: Int
  edges: [SummarybriefEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Summarybrief]
}

type SummarybriefEdge {
  cursor: String
  node: Summarybrief
}

"补录会议"
type SupplementaryMeeting {
  "参会人"
  attend: String
  "签到负责人"
  checkIn: String
  "发布人"
  creator: Employee
  "部门"
  department: Department
  "文件"
  files: [FileObject]
  "主持人"
  host: String
  "ID"
  id: ID
  "会议类型"
  meetingtypes: [MeetingTypeSecurity]
  "会议主题/会议名"
  name: String
  "会议地点"
  place: String
  "记录人"
  recorder: String
  "召开时间"
  startTime: Date
}

type SupplementaryMeetingConnection {
  "当前页"
  currentPage: Int
  edges: [SupplementaryMeetingEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type SupplementaryMeetingEdge {
  cursor: String
  node: SupplementaryMeeting
}

type SyncLog {
  "同步日志"
  createdAt: Date
  "同步人"
  creator: OperationEmployee
  "描述"
  description: String
}

type SystemDictionaryConnection {
  "当前页"
  currentPage: Int
  edges: [SystemEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type SystemEdge {
  cursor: String
  node: DataDictionary
}

"党员类型概览"
type TabViewData {
  "党员类型"
  type: TabViewDataType
  "党员类型数量"
  value: String
}

type Table {
  "是否已同步"
  isAsync: Boolean
  "表名称"
  name: String
  "表描述"
  tableComment: String
}

type TableStructure {
  "表对应的列集"
  columns: [ColumnStructure]
  "表对应的约束"
  constraints: [ConstraintStructure]
  "是否已同步"
  isAsync: Boolean
  "表名称"
  name: String
  "表描述"
  tableComment: String
}

type Tag {
  "提交ID"
  commitId: String
  "描述"
  message: String
  "标签名称"
  tagName: String
}

type Task {
  "节点信息"
  activity: [ActiveNode]
  "审批意见"
  agreeComment: [FlowableComment]
  assignee: Employee
  candidateUser: [SecurityScope]
  "开始日期"
  createTime: Date
  "当前表单"
  currentForm: FormModel
  "描述"
  description: String
  "到期时间"
  dueDate: Date
  "表单数据"
  formData: [FormModel]
  "表单key"
  formKey: String
  "办理方式"
  handlingMode: HandlingMode
  "办理提示-标题"
  handlingTips: HandlingTips
  "任务id"
  id: String
  "任务名称"
  name: String
  "操作权限"
  operationPermission: [Button]
  "过期处理"
  overdueHandling: OverdueHandling
  "任务的委托人"
  owner: String
  preSelector: [PreSelectorRule]
  "优先级"
  priority: Int
  "流程实例id"
  processInstance: ProcessInstance
}

type TaskConnection {
  "当前页"
  currentPage: Int
  edges: [TaskEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type TaskEdge {
  cursor: String!
  node: Task
}

"班组"
type Team {
  "召集人"
  convener: Employee
  "部门"
  department: Department
  "主键"
  id: ID
  "班组名称"
  name: String
  "班组成员"
  teamMembers: [Employee]
}

type TeamConnection {
  "当前页"
  currentPage: Int
  edges: [TeamEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type TeamEdge {
  cursor: String
  node: Team
}

"带组组长视图"
type TeamLeaderView {
  noPartyProportion: String
  notParty: Int
  party: Int
  partyProportion: String
  total: Int
}

type TelEmployee {
  "人员"
  employee: Employee
  "主键ID"
  id: ID
  "通道"
  pass: Int
  "电话号"
  tel: String
}

type TelLog {
  "接听时间"
  answerDate(format: String): Date
  "响铃时间"
  bellDate(format: String): Date
  "主键ID"
  id: ID
  "发起人信息"
  initiatorSection: Employee
  "工单信息"
  issueInfo: Issue
  "挂机时间"
  nOAnswerDate(format: String): Date
  "电话号"
  number: String
  "通道"
  pass: Int
  "用户ID"
  receiver: Employee
  "录音序号"
  serialNumber: String
  "状态"
  status: TelLogStatusEnum
  "通话时长"
  times: Int
  "类型"
  type: TelLogTypeEnum
}

type TelLogEdge {
  cursor: String
  node: TelLog
}

"分页查询状态"
type TelLogsConnection {
  "当前页"
  currentPage: Int
  edges: [TelLogEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type TelLogsCount {
  "建单"
  issusId: String
  "已接"
  notmals: String
  "未接"
  nots: String
}

type TelPassLog {
  "id"
  id: ID
  "对应通道"
  pass: Int
  "电话号"
  tel: String
}

type Template {
  "测评内容"
  content: [ReviewContent]
  "ID"
  id: ID
  "名称"
  name: String
  "备注"
  remark: String
  "测评类型"
  reviewType: ReviewType
  "模板类型"
  templateType: TemplateType
}

type TemplateConnection {
  "当前页"
  currentPage: Int
  edges: [TemplateEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type TemplateEdge {
  cursor: String
  node: Template
}

type TemplateFile {
  "创建人名称"
  author: String
  "文件"
  file: FileObject
  "ID"
  id: ID
  "类别id"
  tagId: Int
  "类别名称"
  tagName: String
  """
    大小
     size: Float
  下载次数
  """
  times: Int
  "上传时间"
  updatedAt: Date
}

type TemplateFileConnection {
  "当前页"
  currentPage: Int
  edges: [TemplateFileEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type TemplateFileEdge {
  cursor: String
  node: TemplateFile
}

type TemplateFileTag {
  "编号"
  code: String
  "描述"
  description: String
  "包含文件"
  files: [TemplateFile]
  "ID"
  id: ID
  "名称"
  name: String
  "所属组织"
  organization: Organization
  "启用状态"
  status: Boolean
}

"""
沈德符 
sss 
"""
type TestUser {
  id: ID!
  name: String
}

type Tests {
  age: String
  created_at: DateTime!
  id: ID!
  name: String
  type: ENUM_TESTS_TYPE
  updated_at: DateTime!
}

type TestsAggregator {
  count: Int
  totalCount: Int
}

type TestsConnection {
  currentPage: Int
  edges: [TestsEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Tests]
}

type TestsEdge {
  cursor: String
  node: Tests
}

type TextField implements ModelField {
  "数据库字段名"
  databaseColumnName: String
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "主键id"
  id: ID
  "是否生成创建时字段"
  isCreateField: Boolean
  "存储值为列表，而不是单个值"
  isList: Boolean
  "是否必填"
  isRequired: Boolean
  "是否系统字段"
  isSystem: Boolean
  "是否响应字段"
  isTypeField: Boolean
  "是否唯一"
  isUnique: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "标签集"
  labels: [String]
  "名称"
  name: String
  "排序字段"
  sort: Int
}

type TjItem {
  "医生确认"
  bz: String
  "小组名称"
  grpnam: String
  "检查项目"
  item: String
  "房间号"
  roomno: String
}

type TopicDiscuss {
  "发表内容"
  content: String
  "小组信息"
  group: MeetingGroup
  "发表日期"
  publishDate(format: String): Date
  "发表人"
  publishPerson: OrgEmployee
  "类型（意见、总结）"
  type: DiscussType
}

"题目收藏表"
type Topiccollect {
  created_at: DateTime!
  id: ID!
  questiontopic: Questiontopic
  remove: Boolean
  updated_at: DateTime!
  user: String
}

type TopiccollectAggregator {
  count: Int
  totalCount: Int
}

type TopiccollectConnection {
  currentPage: Int
  edges: [TopiccollectEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Topiccollect]
}

type TopiccollectEdge {
  cursor: String
  node: Topiccollect
}

"游客账号"
type TouristAccount {
  "密码"
  pwd: String
  "用户名"
  username: String
}

type TypeSatisfied {
  "总票数"
  allNum: Int
  "评测类别名称"
  name: String
  "不满意票数"
  satisfiedNum: Int
  "满意票数"
  totalNum: Int
}

type Unit {
  id: ID
  "部门名称"
  name: String
}

type Urge {
  id: ID
  "意见"
  opinion: String
  "关注流程"
  processInstance: ProcessInstance
  "时间"
  time: Date
}

type UrgeConnection {
  "当前页"
  currentPage: Int
  edges: [UrgeEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type UrgeEdge {
  cursor: String!
  node: Urge
}

type User {
  "创建时间"
  createdAt: Date
  "创建人"
  creator: String
  "部门名称上下级串（格式...parentDeptName.SelfDeptName），多部门时逗号间隔"
  deptsNodesNames: String
  "员工信息"
  emplyee: Employee
  "是否启用"
  enabled: Boolean
  id: ID
  "管理员姓名"
  nickName: String
  "登录密码"
  password: String
  "权限"
  permissions(permissionKey: String, resourceType: String): [GrantPermission]
  "角色"
  roles: [Role]
  "电话"
  tel: String
  "修改时间"
  updatedAt: Date
  "修改人"
  updator: String
  "登录名"
  username: String
}

type UserConnection {
  "当前页"
  currentPage: Int
  edges: [UserEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type UserEdge {
  cursor: String
  node: User
}

type UserInfo {
  name: String
  orgname: String
}

type UserMessage {
  employeeId: ID
  id: ID
  message: Message
  read: Boolean
}

type UserMessageConnection {
  "当前页"
  currentPage: Int
  edges: [UserMessageEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

type UserMessageEdge {
  cursor: String
  node: UserMessage
}

type UserResponse {
  "用户数据集"
  data: UserResponse
  users: [OAUser]
}

type VendorResponse {
  vendors: [OAVendor]
}

type VersionDatabase {
  "描述"
  description: String
  "显示名称"
  displayName: String
  "主键id"
  id: ID
  "名称"
  name: String
  "分类集"
  types: [VersionLibraryType]
}

type VersionLibraryType {
  "编码（系统自定生成不可以更改）"
  code: String
  "显示名称"
  displayName: String
  "主键ID"
  id: ID
  "是否存在数据（存在数据不可删除）"
  isExistsData: Boolean
  "名称"
  name: String
}

type ViewRecord {
  "ID"
  id: ID
  "查看时间"
  updatedAt: Date
  "观察者"
  viewer: Employee
}

type ViewRecordData {
  "已读"
  read: [ViewRecord]
  "未读"
  unread: [ViewRecord]
}

type Volume {
  id: ID
  mimeTypes: [String]
  name: String
  path: String
  storage: Storage
}

type VoteResult {
  "结果名称"
  name: String
  "统计结果"
  num: Int
}

type VoteStatistics {
  "创建类型状态"
  createType: String
  "议题名称"
  name: String
  "表决结果集"
  results: [VoteResult]
}

"选项库"
type Voteoption {
  add_time: DateTime
  created_at: DateTime!
  entity_id: String
  entity_type: String
  id: ID!
  meetingvotedetail: Meetingvotedetail
  name: String
  select: Boolean
  updated_at: DateTime!
}

type VoteoptionAggregator {
  count: Int
  totalCount: Int
}

type VoteoptionConnection {
  currentPage: Int
  edges: [VoteoptionEdge]
  pageInfo: PageInfo
  pageSize: Int
  totalCount: Int
  totalPage: Int
  values: [Voteoption]
}

type VoteoptionEdge {
  cursor: String
  node: Voteoption
}

type WeChatCPDataSource {
  id: ID
}

"带组组长统计"
type WithTeamLeaderData {
  "党办"
  dbInformations: [DBWithTeamLeaderData]
  "全院 人数"
  dbNumber: Int
  employees(
    "组织ID"
    organization: ID
  ): [Employee]
  "带组组长人数"
  leaderNumber: Int
  "占比"
  percentage: String
  "支部"
  zbInformation(
    "部门id"
    department: ID!, 
    "组织id"
    organization: ID!
  ): ZBWithTeamLeaderData
}

type WorkfloResponse {
  count: Int
  items: [DealWith]
  pageCount: Int
}

type WorkflowActivity {
  activities: [WorkflowActivity]
  "活动id"
  activityId: String
  "activityName"
  activityName: String
  "活动类型"
  activityType: String
  "对应的办理人Id"
  scopeId: String
  "对应的办理人"
  scopeName: String
}

type WorkflowContent {
  "活动名称"
  activityName: String
  "审批内容"
  content: String
  id: ID
}

type WorkflowResponse {
  "form取值"
  activities: [WorkflowActivity]
  "ezform取值"
  activity: WorkflowActivity
  data: WorkflowResponse
}

type WorkflowSchedule {
  "经办人"
  assignee: Employee
  "创建时间"
  createdAt: Date
  "主键"
  id: ID
  "操作名称"
  transition: IssueWorkflowStepTransition
}

type WorkflowStep {
  "主键id"
  id: ID
  "步骤名称"
  name: String
}

type WrongQuestiontopic {
  questionBanks: [QuestionBanks]
  wrongNumber: Int
}

"微信签名配置"
type WxJsapiSignature {
  appId: String
  nonceStr: String
  signature: String
  timestamp: String
  url: String
}

type YsDocument {
  "上传时间"
  createdAt: String
  "字段属性"
  files: [FileObject]
  id: ID
  "字段中文名"
  title: String
}

"分页查询预算"
type YsDocumentConnection {
  "当前页"
  currentPage: Int
  edges: [YsDocumentEdge]
  pageInfo: PageInfo
  "每页显示条数"
  pageSize: Int
  "总数据条数"
  totalCount: Int
  "总页数"
  totalPage: Int
}

"分页查询预算"
type YsDocumentEdge {
  cursor: String!
  node: YsDocument
}

"返回支部数据"
type ZBWithTeamLeaderData {
  "人员信息"
  employees: [Employee]
  "带组组长人数"
  leaderNumber: Int
  "占比"
  percentage: String
  "支部 人数"
  zbNumber: Int
}

type createActivityPayload {
  activity: Activity
}

type createEntityuserPayload {
  entityuser: Entityuser
}

type createExamPayload {
  exam: Exam
}

type createExamandpaperPayload {
  examandpaper: Examandpaper
}

type createExamconditionPayload {
  examcondition: Examcondition
}

type createExaminationpaperPayload {
  examinationpaper: Examinationpaper
}

type createExampapertitlePayload {
  exampapertitle: Exampapertitle
}

type createExamreportPayload {
  examreport: Examreport
}

type createExamtopicPayload {
  examtopic: Examtopic
}

type createJoinconditionPayload {
  joincondition: Joincondition
}

type createMeetingPayload {
  meeting: Meeting
}

type createMeetingnoticePayload {
  meetingnotice: Meetingnotice
}

type createMeetingreservePayload {
  meetingreserve: Meetingreserve
}

type createMeetingroomPayload {
  meetingroom: Meetingroom
}

type createMeetingtypePayload {
  meetingtype: Meetingtype
}

type createMeetingvotePayload {
  meetingvote: Meetingvote
}

type createMeetingvotedetailPayload {
  meetingvotedetail: Meetingvotedetail
}

type createPartybillPayload {
  partybill: Partybill
}

type createPartyexpensesPayload {
  partyexpense: Partyexpenses
}

type createPayscalePayload {
  payscale: Payscale
}

type createPaystandardPayload {
  paystandard: Paystandard
}

type createQuestionbankPayload {
  questionbank: Questionbank
}

type createQuestiontopicPayload {
  questiontopic: Questiontopic
}

type createRelatedaccessoryPayload {
  relatedaccessory: Relatedaccessory
}

type createSheetPayload {
  sheet: Sheet
}

type createSheetchildPayload {
  sheetchild: Sheetchild
}

type createSummarybriefPayload {
  summarybrief: Summarybrief
}

type createTestsPayload {
  test: Tests
}

type createTopiccollectPayload {
  topiccollect: Topiccollect
}

type createVoteoptionPayload {
  voteoption: Voteoption
}

type deleteActivityPayload {
  activity: Activity
}

type deleteEntityuserPayload {
  entityuser: Entityuser
}

type deleteExamPayload {
  exam: Exam
}

type deleteExamandpaperPayload {
  examandpaper: Examandpaper
}

type deleteExamconditionPayload {
  examcondition: Examcondition
}

type deleteExaminationpaperPayload {
  examinationpaper: Examinationpaper
}

type deleteExampapertitlePayload {
  exampapertitle: Exampapertitle
}

type deleteExamreportPayload {
  examreport: Examreport
}

type deleteExamtopicPayload {
  examtopic: Examtopic
}

type deleteJoinconditionPayload {
  joincondition: Joincondition
}

type deleteMeetingPayload {
  meeting: Meeting
}

type deleteMeetingnoticePayload {
  meetingnotice: Meetingnotice
}

type deleteMeetingreservePayload {
  meetingreserve: Meetingreserve
}

type deleteMeetingroomPayload {
  meetingroom: Meetingroom
}

type deleteMeetingtypePayload {
  meetingtype: Meetingtype
}

type deleteMeetingvotePayload {
  meetingvote: Meetingvote
}

type deleteMeetingvotedetailPayload {
  meetingvotedetail: Meetingvotedetail
}

type deletePartybillPayload {
  partybill: Partybill
}

type deletePartyexpensesPayload {
  partyexpense: Partyexpenses
}

type deletePayscalePayload {
  payscale: Payscale
}

type deletePaystandardPayload {
  paystandard: Paystandard
}

type deleteQuestionbankPayload {
  questionbank: Questionbank
}

type deleteQuestiontopicPayload {
  questiontopic: Questiontopic
}

type deleteRelatedaccessoryPayload {
  relatedaccessory: Relatedaccessory
}

type deleteSheetPayload {
  sheet: Sheet
}

type deleteSheetchildPayload {
  sheetchild: Sheetchild
}

type deleteSummarybriefPayload {
  summarybrief: Summarybrief
}

type deleteTestsPayload {
  test: Tests
}

type deleteTopiccollectPayload {
  topiccollect: Topiccollect
}

type deleteVoteoptionPayload {
  voteoption: Voteoption
}

type fraction {
  average: String
  sum: String
}

type updateActivityPayload {
  activity: Activity
}

type updateEntityuserPayload {
  entityuser: Entityuser
}

type updateExamPayload {
  exam: Exam
}

type updateExamandpaperPayload {
  examandpaper: Examandpaper
}

type updateExamconditionPayload {
  examcondition: Examcondition
}

type updateExaminationpaperPayload {
  examinationpaper: Examinationpaper
}

type updateExampapertitlePayload {
  exampapertitle: Exampapertitle
}

type updateExamreportPayload {
  examreport: Examreport
}

type updateExamtopicPayload {
  examtopic: Examtopic
}

type updateJoinconditionPayload {
  joincondition: Joincondition
}

type updateMeetingPayload {
  meeting: Meeting
}

type updateMeetingnoticePayload {
  meetingnotice: Meetingnotice
}

type updateMeetingreservePayload {
  meetingreserve: Meetingreserve
}

type updateMeetingroomPayload {
  meetingroom: Meetingroom
}

type updateMeetingtypePayload {
  meetingtype: Meetingtype
}

type updateMeetingvotePayload {
  meetingvote: Meetingvote
}

type updateMeetingvotedetailPayload {
  meetingvotedetail: Meetingvotedetail
}

type updatePartybillPayload {
  partybill: Partybill
}

type updatePartyexpensesPayload {
  partyexpense: Partyexpenses
}

type updatePayscalePayload {
  payscale: Payscale
}

type updatePaystandardPayload {
  paystandard: Paystandard
}

type updateQuestionbankPayload {
  questionbank: Questionbank
}

type updateQuestiontopicPayload {
  questiontopic: Questiontopic
}

type updateRelatedaccessoryPayload {
  relatedaccessory: Relatedaccessory
}

type updateSheetPayload {
  sheet: Sheet
}

type updateSheetchildPayload {
  sheetchild: Sheetchild
}

type updateSummarybriefPayload {
  summarybrief: Summarybrief
}

type updateTestsPayload {
  test: Tests
}

type updateTopiccollectPayload {
  topiccollect: Topiccollect
}

type updateVoteoptionPayload {
  voteoption: Voteoption
}

enum ActivityStateEnum {
  completed
  current
}

enum ApplicationCategory {
  BARBARIAN
  INDEPENDENCE
  MWEB
  PARASITE
}

enum ApplicationProtocol {
  wap
  web
}

enum ApplicationStarType {
  favorite
}

enum ApprovalOpinion {
  Research
  explain
  register
}

"文章类型, 比如： 图片， 文本 等。"
enum ArticleCategory {
  blog
  circle
  information
  section
}

enum ArticleChannelStarType {
  follow
}

enum ArticleStarType {
  clicks
  favorites
  likes
  reads
}

"审核状态"
enum ArticleStatus {
  draft
  published
  timed_published
  unpublished
  waitAudit
}

enum ArticleTagCategory {
  channel
  tag
}

"文章类型"
enum ArticleType {
  file
  link
  text
}

enum AutographEnum {
  department
  employee
}

"category"
enum BudgetCategory {
  EXPENDITUREBUDGET
  INCOMEBUDGET
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum CaseRouteType {
  divider
  header
  menu
  route
}

"预算类别"
enum Category {
  EXPENDITUREBUDGET
  INCOMEBUDGET
}

enum CodeType {
  age_education
  branch_secretary
  exam_detail
  exam_view
  latest_news
  organize_activities
  party_member
  roll_in_out
  study_detail
  study_view
  title
  united_front
}

enum CommentStarType {
  likes
}

"评论状态"
enum CommentStatus {
  pending
  published
  removed
  spam
  unapproved
}

"评论的类型"
enum CommentTargetType {
  article
  meeting
  section
}

enum ComponentPlatform {
  PC
  WAP
}

enum ComponentPropertyType {
  Date
  Enum
  Float
  Integer
  JSON
  Text
}

enum ComponentType {
  Config
  SourceCode
}

enum CompressionMethod {
  gzip
  tar
  tgz
  zip
}

enum ConstrainType {
  FOREIGN_KEY
  UNIQUE
}

enum ContentFormat {
  html
}

"control"
enum Control {
  CONTROL
  FORBID
  PASS
}

enum DataBaseType {
  MYSQL
  ORACLE
  SQL_SERVER
}

enum DataLogOperateType {
  delete
  insert
  update
}

enum DataSourceType {
  database
  dingtalk
  ezoffice
  suty
}

enum DataTransmissionStatus {
  pause
  schedule
}

enum DataType {
  CATALOG
  TABLE
}

enum DiscussScene {
  CHAIRMAN
  GROUP
}

enum DiscussType {
  IDEA
  SUMMARY
}

enum ENUM_ENTITYUSER_USER_ROLE {
  department
  employee
  organization
  user
}

enum ENUM_EXAMINATIONPAPER_PAPERTYPE {
  exercise
  formal
}

enum ENUM_EXAMTOPIC_REMIND_TYPE {
  choice
  judge
  multiselect
}

enum ENUM_EXAM_EXAMTYPE {
  exercise
  formal
}

enum ENUM_JOINCONDITION_SIGN_STATE {
  failure
  success
}

enum ENUM_MEETINGVOTEDETAIL_VOTE_STATE {
  notVote
  voted
  waiver
}

enum ENUM_PARTYBILL_PAYSTATE {
  NOTPAY
  PAY
}

enum ENUM_PARTYBILL_PAYWAY {
  ALIPAY
  CASH
}

enum ENUM_PAYSCALE_PARTYMEMBERTYPE {
  ONJOB
  RETIRE
}

enum ENUM_PAYSTANDARD_USE {
  NOTUSE
  USE
}

enum ENUM_QUESTIONTOPIC_QUESTION_TYPE {
  choice
  judge
  multiselect
}

enum ENUM_TESTS_TYPE {
  aa
  bb
  cc
}

enum EmailStatus {
  Unverified
}

enum EmployeeFieldType {
  DATE
  NUMBER
  TEXT
}

enum EmployeeIdType {
  id
  jobNumber
}

"状态"
enum EmployeeStatus {
  MAN
  WOMAN
}

enum EmployeeTypeEnum {
  ALREADY
  BACK
  ME
  REMAIN
}

enum EntityAction {
  delete
  insert
  update
}

enum EvaluationStatus {
  BASICALLY_SATISFIED
  GOOD
  SATISFIED
  UNSATISFACTORY
}

enum ExamState {
  abandon
  passed
  proceed
  retake
  wait
}

enum FeeType {
  deliver
  funding
}

enum FieldCategory {
  custom
  preset
}

enum FieldStatus {
  AVAILABLE
  UNAVAILABLE
}

enum FieldType {
  employee
  number
  solve
  text
}

"文件自定在格式"
enum FileEnum {
  base64
  object
  url
}

enum FilteringMatch {
  contains
  in
}

enum FinalEvaluate {
  excellent
  qualified
  reasonably
  unqualified
}

enum FindLeavingEnum {
  her
  me
}

enum FormType {
  SELF
  SYS
}

enum FundsSource {
  FINANCIAL_FUND
  OTHER
  RESEARCH_FUND
  SELF_FINANCING
}

enum GrantPermissionReturnObjectType {
  resource
  security
}

enum GraphQLDelegateType {
  Direct
  Local
  RefRewrite
  Restful
  Rewrite
  Script
}

enum GraphQLKind {
  Enum
  Input
  Interface
  Scalar
  Type
  Union
}

enum GraphQLParamFieldDefinitionTypeEnum {
  Default
  Input
}

enum HandlingMode {
  appoint
  choice
  preselection
}

enum IdType {
  dingtalk
  ezoffice
  id
}

enum Identity {
  attendMeeting
  checkIn
  presenter
  summary
}

enum ImportArg {
  FINISHED
  UNFINISHED
}

enum InstanceType {
  ALL
  FINISH
  WAIT
}

enum InterfaceType {
  MUTATION
  QUERY
}

enum InterfaceTypeEnum {
  creatInterface
  deleteInterface
  queryInterface
  queryPageInterface
  querysInterface
  updateInterface
}

enum IssueAllocationRuleEnum {
  Department
  Project
  Type
}

enum IssueProjectLinkType {
  project
}

enum IssueScopeEnum {
  department
  employee
  organ
}

enum IssueSecurityType {
  department
  director
  originator
  reporter
  user
}

enum IssueStatusCategory {
  done
  inProgress
  todo
}

enum JobType {
  HEADMAN
  MEMBER
}

enum LearnState {
  FINISHED
  UNFINISHED
}

enum LearnerType {
  compulsory
  elective
}

enum LeavingTypeEnum {
  department
  employee
}

enum LessonScheduleType {
  completed
  processing
  unStart
}

"章节类型"
enum LessonType {
  file
  image
  video
}

enum LoginType {
  WeChatCP
  WeChatPM
  dingtalk
  password
  single
  tourist
}

"过滤方式"
enum MatchType {
  EQ
  GE
  GT
  IN
  LE
  LIKE
  LT
  NE
}

enum MeetingPDFFrom {
  meeting
  supplementary
}

enum MeetingState {
  cancelled
  closed
  processing
  unstarted
}

enum MeetingStauts {
  FINISH
  IN_PROGRESS
  SAVE
}

enum MeetingTopicCreateType {
  CUSTOM
  SYSTEM
}

enum MessageFormat {
  file
  text
}

enum MessageRuleEum {
  Watchman
  assignee
  reporter
}

enum MessageType {
  announcement
  sysnotice
}

enum ModelStatus {
  DRAFT
  PUBLISHED
}

enum MotionPracticable {
  practicable
  unCommitted
  upcoming
}

enum MotionSatisfaction {
  basicallySatisfied
  notSatisfied
  satisfaction
}

enum MotionStatus {
  FEEDBACK
  FINISH
  FUNCTION_APPROVAL
  GROUP_APPROVAL
  HOSPITAL_APPROVAL
  WAIT_SECOND
  WAIT_SUBMIT
}

enum NodeType {
  DOMAIN
  MODEL
}

enum NoticeType {
  ding_link
  ding_text
  email
  message
  sms
}

enum NumberFormat {
  BIG_INTEGER
  DECIMAL
  FLOAT
  INTEGER
}

"履职记录类别"
enum OperatingCategory {
  ACTIVITY
  MEETING
  MOTION
}

enum OperatingType {
  LOGIN
  MOTION
  SPEAK
  VOTE
}

enum OverFlow {
  allReset
  categoryReset
}

enum ParameterType {
  Input
  Result
}

enum PeriodType {
  MONTH
  QUARTER
  YEAR
}

enum PermissionCategory {
  resource
  universal
}

enum PhoneStatus {
  Unverified
}

enum PinyinFormat {
  pinyin
  shortPinyin
}

enum PlanningEnum {
  COMPLETE
  FILL_IN
  IN_APPROVAL
  ISSUE
  PENDING
  WAIT_HANDLE
}

enum PortalType {
  config
  route
}

enum ProcessInstanceStateEnum {
  all
  completed
  running
}

"流程范围"
enum ProcessScopeType {
  ALL
  DEPARTMENT
  EMPLOYEE
  EMPLOYEEGROUP
  JOB
  ORGANIZATION
  ROLE
  USER
}

"projectType"
enum ProjectType {
  BIG_TYPE
  SAMLL_TYPE
}

enum ReadingEnum {
  EMAIL
  NOTICE
  READING
}

enum RelationType {
  MANY_TO_MANY
  MANY_TO_ONE
  ONE_TO_MANY
  ONE_TO_ONE_BOTH
  ONE_TO_ONE_LEFT
}

"提醒范围"
enum RemindScope {
  NOT_SIGN_IN
  NOT_VOTE
}

enum RemindType {
  ding_link
  ding_text
  email
  message
  sms
}

enum RestfulMethod {
  delete
  get
  patch
  post
  put
}

enum ReviewStatus {
  over
  processing
  unstarted
}

enum ReviewType {
  radio
  score
}

enum RoleAssignEntityTypeEnum {
  department
  employeeGroup
  employeePosition
  user
}

enum RouteType {
  divider
  header
  menu
  portal
  route
}

enum SchemaObjectFilterMatch {
  contains
  equal
  greaterThan
  in
  lessThan
}

enum ScoreWay {
  auto
  input
  times
}

enum SecurityType {
  department
  employee
  employeeGroup
  job
  organization
  position
  role
  user
}

enum SendWay {
  DING
  EMAIL
  NOTE
}

enum ServiceState {
  ADBNORMAL
  NORMAL
}

"性别"
enum Sex {
  female
  male
  unknown
}

enum Sign {
  COMPLETE
  PLAN
  UNSELECTED
}

enum StageFieldType {
  date
  empty
  file
  number
  text
}

enum StageOperatorType {
  create
  update
}

enum StageSecurityType {
  department
  director
  reporter
  role
  user
}

enum StageType {
  SEPARATOR
  STEP
}

"分类"
enum StageWorkflowCategory {
  dj
  fk
  jk
  xm
  ys
  zdh
}

enum StageWorkflowInstanceType {
  fk
  jk
}

enum StageWorkflowStepStatus {
  finish
  process
  wait
}

enum StageWorkflowStepTransitionType {
  goback
  submit
  temporary
}

enum StageWorkflowType {
  def
  modify
}

enum StateEnum {
  back
  completed
  open
  transfer
}

enum StorageType {
  disk
  oss
}

"党员类型值"
enum TabViewDataType {
  fzdx
  jjfz
  rdsq
  ybdyjs
  ybdyzz
}

enum TaskCategoryEnum {
  Reading
  handle
}

enum TaskEnum {
  COMPLETE
  CREATED
  IN_PROGRESS
}

enum TaskOperator {
  add
  delete
}

enum TelLogStatusEnum {
  Access
  Answer
  Bell
  Over
}

enum TelLogTypeEnum {
  BrokenLine
  Normal
  Not
}

enum TemplateType {
  branch
  mutual
  secretary
}

enum TransactStatus {
  TRANSACT
  WITH_TRANSACT
}

enum TreatmentMethod {
  DECOMPOSITION
  FILL_IN
  FORMATION
}

enum TypeKind {
  Enum
  Input
  Type
}

"统计视图纬度"
enum ViewLatitude {
  age
  education
  partyAge
  title
  withTeamLeader
}

enum VoteType {
  ABSTENTION
  AGREE
  NOT_CAST
  OPPOSE
}

"用户类型查询"
enum employeeTypeEnum {
  ALREADY
  BACK
  ME
  MEBACK
  REMAIN
}

"Date"
scalar Date

"DateBetween"
scalar DateBetween

"DateTime"
scalar DateTime

"FileObject"
scalar FileObject

"JSON"
scalar JSON

"Long"
scalar Long

"OrderBy"
scalar OrderBy

"Upload"
scalar Upload

"活动场次签到表"
input ActivityActSigninCreateInput {
  employeeId: Int
  placeId: Int
  signinTime: String
}

"活动场次签到表过滤对象"
input ActivityActSigninFilter {
  employeeId: String
  placeId: String
  signinTime: String
}

"活动场次签到表"
input ActivityActSigninUpdateInput {
  employeeId: Int
  placeId: Int
  signinTime: String
}

"活动图片表"
input ActivityImageCreateInput {
  "社员ID"
  act_id: Int
  "名称"
  name: String
  "父ID"
  parent: ID
}

"活动图片表过滤对象"
input ActivityImageFilter {
  act_id: String
  id: String
  name: String
}

"活动图片表"
input ActivityImageUpdateInput {
  "社员ID"
  act_id: Int
  "名称"
  name: String
  "父ID"
  parent: ID
  "排序号"
  sort: ID
}

input ActivityInput {
  activity_instruction: String
  activity_place: String
  apply: Boolean
  apply_number_limit: Int
  attendActivitys: [EntityuserInput]
  budget_amount: Int
  checkInPersons: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  end_time: DateTime
  icon: String
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  mssage_push: String
  name: String
  orgid: String
  presenters: [EntityuserInput]
  relateAccessorys: [RelatedaccessoryInput]
  remind: String
  sign_time_require: String
  sign_way: String
  start_time: DateTime
}

"活动标签表"
input ActivitySignCreateInput {
  "所属分类（0社团活动，1工会活动）"
  belongType: Int
  "员工ID"
  creator: String
  "描述"
  description: String
  "id"
  id: String
  "标签名称"
  name: String
}

"活动标签表过滤对象"
input ActivitySignFilter {
  belongType: Int
  id: String
  name: String
}

"活动标签表"
input ActivitySignUpdateInput {
  "所属分类（0社团活动，1工会活动）"
  belongType: Int
  "id"
  id: String
  "标签名称"
  name: String
}

input ApiErrorCodeInput {
  "原因"
  cause: String
  "错误码"
  code: String
  "错误信息"
  information: String
}

input AppDefinitionInput {
  cmmnModels: [AppModelDefinitionInput]
  groupsAccess: String
  icon: String
  key: String
  models: [AppModelDefinitionInput]
  name: String
  theme: String
  usersAccess: String
}

input AppModelDefinitionInput {
  createdBy: String
  description: String
  id: String
  lastUpdated: Date
  lastUpdatedBy: String
  modelType: Int
  name: String
  version: Int
}

input ApplicationConfigurationInput {
  "集成飞书"
  dAnonymousLetter: String
  dingtalk: String
  ezoffice: String
  variables: [ApplicationVariableInput]
  "集成企业微信"
  weChatCP: String
}

input ApplicationCreateInput {
  "应用分类"
  category: ApplicationCategory
  "配置"
  configuration: ApplicationConfigurationInput
  "封面图"
  cover: String
  "集成飞书"
  dAnonymousLetterIntegration: Boolean
  "简介"
  description: String
  "集成钉钉"
  dingtalkIntegration: Boolean
  "是否启用"
  enabled: Boolean
  "集成 ezOFFICE"
  ezofficeIntegration: Boolean
  "应用 LOGO"
  logo: String
  "名称"
  name: String
  "组织"
  organization: String
  "应用根路径"
  path: String
  "应用配置信息"
  source: String
  "分类"
  type: ID
  "集成企业微信"
  weChatCPIntegration: Boolean
}

input ApplicationFilter {
  "分类"
  category_in: [ApplicationCategory]
  "是否启用"
  enabled: Boolean
  id_in: [String]
  "类型id"
  type: ID
}

input ApplicationTypeInput {
  "编码"
  code: String
  "描述"
  description: String
  "名称"
  name: String
}

input ApplicationUpdateInput {
  "应用分类"
  category: ApplicationCategory
  "配置"
  configuration: ApplicationConfigurationInput
  "封面图"
  cover: String
  "集成飞书"
  dAnonymousLetterIntegration: Boolean
  "简介"
  description: String
  "集成钉钉"
  dingtalkIntegration: Boolean
  "是否启用"
  enabled: Boolean
  "集成 ezOFFICE"
  ezofficeIntegration: Boolean
  "应用 LOGO"
  logo: String
  "名称"
  name: String
  "组织"
  organization: String
  "应用根路径"
  path: String
  "应用配置信息"
  source: String
  "分类"
  type: ID
  "集成企业微信"
  weChatCPIntegration: Boolean
}

input ApplicationVariableInput {
  key: String
  value: String
}

input ApprovalActionInput {
  "对应的操作的id"
  action: ID!
  "审批流id"
  id: ID
  "预算拆分id"
  project: ID
  "当前步骤id"
  step: ID
}

input ArichiveFiletr {
  "档案人"
  archiveEmployee: ID
  "所属科室"
  department: ID
  operatingCategory: OperatingCategory
  "年度"
  year: String
}

input ArticleChannelCreateInput {
  "false启用、true禁用"
  able: Boolean
  "栏目封面图"
  cover: FileObject
  "描述"
  description: String
  "模块"
  module: String
  "栏目名称"
  name: String!
  "组织"
  organization: ID!
  "上级栏目"
  parent: ID
  "地址"
  url: String
}

input ArticleChannelFilter {
  "false启用、true禁用"
  able: Boolean
  category: ArticleTagCategory
  "模块"
  module: String
  "名称"
  name: String
  "资讯栏目父级"
  parent: ID
  path_startsWith: String
}

input ArticleChannelUpdateInput {
  "false启用、true禁用"
  able: Boolean
  "栏目封面图"
  cover: FileObject
  "描述"
  description: String
  "栏目名称"
  name: String
  "上级栏目"
  parent: ID
  "地址"
  url: String
}

input ArticleCreateInput {
  "附件"
  attachments: [FileObject]
  "文章类别"
  category: ArticleCategory!
  "文章栏目"
  channels: [ID]
  "文章正文"
  content: String
  "文章封面"
  cover: FileObject
  "组织"
  organization: ID!
  "附件"
  path: [FileObject]
  "授予权限"
  permissions: [PermissionInput]
  "发布日期"
  publishedAt: String
  status: ArticleStatus
  "文章标签"
  tags: [ID]
  "文章标题"
  title: String
  "文章类型"
  type: ArticleType
}

input ArticleFilter {
  "关键字"
  Keyword: String
  "状态 0启用、1禁用"
  able: Boolean
  "复杂查询支持"
  and: [ArticleFilter]
  "文章类型"
  category: ArticleCategory
  "频道"
  channel: ID
  "多个栏目"
  channel_in: [ID]
  "栏目为空 (没有栏目的文章)"
  channels_isEmpty: Boolean
  "发布人"
  creator: String
  "复杂查询支持"
  or: [ArticleFilter]
  "发布时间"
  publishedAt: String
  "星星类型"
  starType: ID
  "发布状态"
  status: ArticleStatus
  "标签"
  tags: [ID]
  "用户id"
  uid: ID
}

input ArticleReadRecordFilter {
  uid: ID
}

"文章阅读记录"
input ArticleReadRecordInput {
  article: ID
  readTime: Int
}

"文章统计过滤"
input ArticleReadStatisticsFilter {
  endDate: String
  startDate: String
  uid: ID
}

input ArticleUpdateInput {
  "状态 启用、禁用"
  able: Boolean
  "附件"
  attachments: [FileObject]
  "作者"
  author: String
  "文章栏目"
  channels: [ID]
  "文章正文"
  content: String
  "文章封面"
  cover: FileObject
  "组织"
  organization: String
  "附件"
  path: [FileObject]
  "授予权限"
  permissions: [PermissionInput]
  "发布日期"
  publishedAt: String
  "文章发布状态"
  status: ArticleStatus
  "文章标签"
  tags: [ID]
  "文章标题"
  title: String
  "文章类型"
  type: ArticleType
  "文章URL 必须唯一"
  url: String
}

input AssessmentFilter {
  "所属支部"
  departmentId: ID
  "考核月份"
  month: Int
  "考核名称"
  name: String
  "考核年份"
  year: Int
}

input AssessmentInput {
  "考核月份"
  month: Int
  "考核名称"
  name: String
  "考核年份"
  year: Int
}

input AssessmentStatisticFilter {
  "所属支部"
  departmentId: ID
  "考核年份"
  year: Int
}

"社团"
input AssociationCreateInput {
  "当前社员数量"
  currentEmployeeNum: Int
  current_employee_num: Int
  id: Int
  "社团介绍"
  introduction: String
  "最大社员数量"
  maxEmployeeNum: Int
  max_employee_num: Int
  "社团名称"
  name: String
  "父ID"
  parent: ID
  "社团状态"
  status: Int
  "社团规则"
  teamRules: String
  team_rules: String
  "修改人"
  updator: String
}

"社团过滤对象"
input AssociationFilter {
  current_employee_num: String
  id: String
  introduction: String
  max_employee_num: String
  name: String
  status: String
  team_rules: String
}

"社团"
input AssociationUpdateInput {
  "当前社员数量"
  currentEmployeeNum: Int
  current_employee_num: Int
  id: Int
  "社团介绍"
  introduction: String
  "最大社员数量"
  maxEmployeeNum: Int
  max_employee_num: Int
  "社团名称"
  name: String
  "父ID"
  parent: ID
  "排序号"
  sort: ID
  "社团状态"
  status: Int
  "社团规则"
  teamRules: String
  team_rules: String
  "修改人"
  updator: String
}

input AttachmentInput {
  "概述"
  attachmentDescription: String
  "名字"
  attachmentName: String
  "类型"
  attachmentType: String
  processInstanceId: String
  "url"
  stream: String
  "任务"
  taskId: ID
}

input AutographPngInput {
  "签名附件"
  autographFile: FileObject
  "描述信息"
  description: String
  "是否启用 0禁用 1 启用"
  enabled: Boolean
  "Id"
  id: ID
  "签名类型"
  type: AutographEnum
}

input BatchInput {
  opinion: String
  processInstanceId: String
  receiver: String
  taskId: String
  value: JSON
}

"过滤条件"
input BiDetailViewFilter {
  "flag"
  code: String
  "所属部门"
  department: ID
  "性别"
  sex: String
  status: Boolean
  "统计视图纬度"
  view: ViewLatitude!
}

input BillInput {
  "关联合同"
  contract: ID!
  "关联付款"
  contractClause: ID
  "创建人"
  creator: ID
  "发票附件"
  files: [FileObject]
  "付款金额"
  payAmount: Float
  "付款日期"
  payDate: String
  "备注"
  remark: String
}

input BpmGetUserProcessByModuleIdsNewFilter {
  "流程标题"
  title_like: String
  "用户ID"
  userId: String!
}

input BranchIntegralFilter {
  "支部名称"
  branchName: String
}

input BranchIntegralInput {
  "支部积分"
  branchIntegral: Int
  "支部名称"
  branchName: String
}

input BudgetAccountInput {
  "预算类别ID"
  budgetType: ID
  "预算科目编码"
  code: String
  "创建时间"
  createTime: String
  "主键ID"
  id: ID
  "是否归口（0/未启动，1/启动）"
  isCentralize: Boolean
  "预算科目"
  name: String
  "父级ID"
  parent: ID
  "启用状态（0/未启动，1/启动）"
  status: Boolean
}

input BudgetBasePayDetailCreateInput {
  "调整后金额"
  adjustAmount: Float
  "预算金额"
  budgetAmount: Float
  "预算内容"
  budgetContent: ID
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: ID
  "本年度已执行金额"
  currYearExecuted: Float
  "较本年浮动"
  currentYearFloat: Float
  "编制说明"
  description: String
  "预计年度执行金额"
  expectYearExecuted: Float
  "较上年浮动"
  floatLast: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年预算金额"
  lastYearBudgetAmount: Float
  "下一年预算金额"
  nextYearBudget: Float
  "预算单元ID"
  unit: ID
}

input BudgetBasePayDetailUpdateInput {
  "调整后金额"
  adjustAmount: Float
  "预算金额"
  budgetAmount: Float
  "预算内容"
  budgetContent: ID
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: ID
  "本年度已执行金额"
  currYearExecuted: Float
  "较本年浮动"
  currentYearFloat: Float
  "编制说明"
  description: String
  "预计年度执行金额"
  expectYearExecuted: Float
  "较上年浮动"
  floatLast: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年预算金额"
  lastYearBudgetAmount: Float
  "下一年预算金额"
  nextYearBudget: Float
  "预算单元ID"
  unit: ID
}

input BudgetCategoryFilter {
  "预算类别编码"
  code: String
  "预算类别"
  name: String
  "状态（0/未启用，1/启动）"
  status: Boolean
}

input BudgetCategoryInput {
  "ID"
  Id: ID
  "预算类别编码"
  code: String
  "是否删除（0/删除，1/未删除）"
  deleted: Boolean
  "预算类别"
  name: String
  "父级类别"
  parent: ID
  "状态（0/未启用，1/启动）"
  status: Boolean
}

"预算内容"
input BudgetContentCreateInput {
  "预算内容"
  budgetContent: String
  "预算编号"
  budgetNumber: String
  "科目"
  budgetSubject: ID
  "预算单元"
  department: ID
}

"预算内容过滤对象"
input BudgetContentFilter {
  budgetContent: String
  budgetNumber: String
  budgetSubject: String
  department: String
}

"预算内容"
input BudgetContentUpdateInput {
  "预算内容"
  budgetContent: String
  "预算编号"
  budgetNumber: String
  "科目"
  budgetSubject: ID
  "预算单元"
  department: ID
}

"预算控制"
input BudgetControlCreateInput {
  "控制策略编码"
  code: String
  "弹性控制百分比"
  elastic: Float
  "是否启用（0/未启用，1/启用）"
  enableFlag: Boolean
  "控制级别（0/通过;1/禁止;2/弹性控制）"
  level: Int
  "消息提示"
  message: String
  "控制规则名称"
  name: String
  "修改人"
  updator: String
}

"预算控制过滤对象"
input BudgetControlFilter {
  code: String
  control: String
  enableFlag: String
  level: String
  message: String
  name: String
  parameter: String
  status: String
}

"预算控制"
input BudgetControlUpdateInput {
  "控制策略编码"
  code: String
  "弹性控制百分比"
  elastic: Float
  "是否启用（0/未启用，1/启用）"
  enableFlag: Boolean
  "控制级别（0/通过;1/禁止;2/弹性控制）"
  level: Int
  "消息提示"
  message: String
  "控制规则名称"
  name: String
}

input BudgetFilter {
  "预算组织"
  budgetHospital_in: [String]
  "名字和编号"
  budgetNameOrSn_like: String
  "预算编号模糊查询"
  budgetSn_like: String
  "预算类型"
  budgetType_eq: String
  "预算年度查询"
  budgetYear_eq: String
  "预算年度查询"
  budgetYear_like: String
  "月份yyyy-MM"
  month_eq: String
}

"预算信息参数"
input BudgetInput {
  "已申请金额"
  appliedMoney: Float
  "预算余额"
  budgetBalance: Float
  "预算金额"
  budgetMoney: Float!
  """
    开始日期
  startTime: String !
  结束日期
  endTime:  String !
  文件
  """
  files: [FileObject]
  "医院"
  hospital: String
  "预算名称"
  name: String!
  "备注"
  remarks: String
  "预算编号"
  sn: String!
  "预算类别"
  type: String!
  "预算年度"
  year: String!
}

input BudgetMZReceiptDetailCreateInput {
  "调整后金额"
  adjustAmount: Float
  "预算内容"
  budgetContent: String
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: ID
  "同比（本年度）"
  currCompareWith: Float
  "本年度已执行数"
  currExecAmount: Float
  "本年度预算数"
  currYearBudgetAmount: Float
  "预计执行金额"
  expectExecAmount: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  "执行率"
  implementationRate: Float
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年实际执行数"
  lastYearActualExecution: Float
  "同比（下一年）"
  nextCompareWith: Float
  "下一年预算数"
  nextYearBudgetAmount: Float
  "预算单元ID"
  unit: ID
}

input BudgetMZReceiptDetailUpdateInput {
  "调整后金额"
  adjustAmount: Float
  "预算内容"
  budgetContent: String
  "预算一下数"
  budgetOnceAmount: Float
  "预算科目"
  budgetSubject: ID
  "同比（本年度）"
  currCompareWith: Float
  "本年度已执行数"
  currExecAmount: Float
  "本年度预算数"
  currYearBudgetAmount: Float
  "预计执行金额"
  expectExecAmount: Float
  "经费来源"
  fundsSource: FundsSource
  "归口一上数"
  gkFirstUpAmount: Float
  "归口二上数"
  gkSecondUpAmount: Float
  "院方下达数"
  hospitalReleaseAmount: Float
  "执行率"
  implementationRate: Float
  "科室一上数"
  ksFirstUpAmount: Float
  "科室二上数"
  ksSecondUpAmount: Float
  "上一年实际执行数"
  lastYearActualExecution: Float
  "同比（下一年）"
  nextCompareWith: Float
  "下一年预算数"
  nextYearBudgetAmount: Float
  "预算单元ID"
  unit: ID
}

input BudgetMakeCreateInput {
  "附件信息"
  attachments: [FileObject]
  "基本支出预算明细"
  basePayDetails: [BudgetBasePayDetailCreateInput]
  "预算编制可选项"
  budgetMakeOption: BudgetMakeOptionInput
  "预算编号"
  budgetNumber: String
  "预算管理员"
  employee: ID
  "编制日期"
  makingDate: String
  "预算编制任务"
  makingTask: ID
  "门诊收入预算明细"
  mzReceiptDetails: [BudgetMZReceiptDetailCreateInput]
  "预算类别"
  type: ID
  "预算单元"
  unit: ID
}

input BudgetMakeFilter {
  "预算单元"
  unit: ID
}

input BudgetMakeOptionInput {
  "预算金额"
  budgetAmount: Float
  "预算控制规则"
  budgetRule: ID
  "门诊药占比"
  drugProportion: Float
  "预算说明"
  makingDescription: String
  "门诊材料占比"
  materialProportion: Float
  "本年度收入"
  yearInCome: Float
}

input BudgetMakeUpdateInput {
  "附件信息"
  attachments: [FileObject]
  "#基本支出预算明细"
  basePayDetails: [BudgetBasePayDetailUpdateInput]
  "预算编制可选项"
  budgetMakeOption: BudgetMakeOptionInput
  "门诊收入预算明细"
  mzReceiptDetails: [BudgetMZReceiptDetailUpdateInput]
}

"预算实体"
input BudgetModelCreateInput {
  "编码"
  code: String
  "描述"
  description: String
  "标识图片"
  image: String
  "名称"
  name: String
  "父ID"
  parent: ID
  "简称"
  shortName: String
  "类型"
  type: String
}

"预算实体过滤对象"
input BudgetModelFilter {
  description: String
}

"预算实体"
input BudgetModelUpdateInput {
  "编码"
  code: String
  "描述"
  description: String
  "图片"
  icon: String
  "标识图片"
  image: String
  "名称"
  name: String
  "父ID"
  parent: ID
  "简称"
  shortName: String
  "类型"
  type: String
}

"预算期间"
input BudgetPeriodCreateInput {
  "期间编码"
  code: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "是否启用（0/未启用，1/启用）"
  enableFlag: Boolean
  "结束日期"
  endDate: String
  "修改人"
  modifier: String
  "期间名称"
  name: String
  parent: ID
  "所属期间"
  period: String
  "期间类型"
  periodType: PeriodType
  "开始日期"
  startDate: String
  "是否启用（0/未启用，1/启用）"
  status: Boolean
  "修改日期"
  updatedAt: String
  "修改人"
  updator: String
}

"预算期间过滤对象"
input BudgetPeriodFilter {
  code: String
  createdAt: String
  creator: String
  deleted: String
  endDate: String
  id: String
  modifier: String
  name: String
  name_in: [String]
  path: String
  period: String
  periodType: String
  sort: String
  startDate: String
  status: String
  type: String
  updatedAt: String
}

"预算期间"
input BudgetPeriodUpdateInput {
  "期间编码"
  code: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "是否启用（0/未启用，1/启用）"
  enableFlag: Boolean
  "结束日期"
  endDate: String
  "修改人"
  modifier: String
  "期间名称"
  name: String
  parent: ID
  "所属期间"
  period: String
  "期间类型"
  periodType: PeriodType
  sort: ID
  "开始日期"
  startDate: String
  "是否启用（0/未启用，1/启用）"
  status: Boolean
  "修改日期"
  updatedAt: String
}

input BudgetPlanningFilter {
  "预算类别ID"
  budgetType: ID
  "预算编制任务"
  name: String
  "用户ID"
  user: ID
}

input BudgetPlanningInput {
  "指派状态(0:分配任务:1:接受任务)"
  assignFlag: Boolean
  "预算期间"
  budgetPeriod: ID
  "预算任务名称"
  budgetTask: ID
  "预算类别"
  budgetType: ID
  "结束时间"
  endDate: Date
  "主键ID"
  id: ID
  "编制任务名称"
  name: String
  "开始时间"
  startDate: Date
  "预算单元"
  unitId: ID
  "预算管理员"
  userId: String
}

input BudgetProjectDetailedFilter {
  "金额大于等于"
  money_ge: Int
  "项目id"
  project_id: ID
  "进口论证审核状态0未申请1审批中2审批通过9全部"
  status_eq: String
}

"进口论证ID"
input BudgetProjectDetailedIdInput {
  "明细id"
  id: ID!
}

input BudgetProjectDetailedInput {
  "品牌"
  brand: String
  "項目詳情id"
  id: ID
  "是否进口"
  isImported: Boolean!
  "型号"
  model: String
  "金额"
  money: Float
  "数量"
  num: Int
}

input BudgetProjectFilter {
  "预算组织"
  budgetHospital_in: [String]
  "名字和编号"
  budgetNameOrSn_like: String
  "预算编号模糊查询"
  budgetSn_like: String
  "预算类型查询"
  budgetType_eq: String
  "预算年度查询"
  budgetYear_eq: String
  "预算年度模糊查询"
  budgetYear_like: String
  "进口论证状态"
  importArgumentStatus_in: [String]
  "预算拆分编号模糊查询"
  projectSn_like: String
}

input BudgetProjectInput {
  "项目名称"
  name: String
  "数量"
  num: Int
  "计划招标完成日期"
  plannedCompleteTime: String
  "计划申请付款时间"
  plannedFkTime: String
  "计划招标公示日期"
  plannedGsTime: String
  "计划合同时间"
  plannedHtTime: String
  "计划验收时间"
  plannedYsTime: String
  "计划招标准备时间"
  plannedZbTime: String
  "项目详细"
  projectDetaileds: [BudgetProjectDetailedInput]!
  "项目编号"
  sn: String!
  "拆分预算金额"
  xmMoney: Float!
}

"科目目录表"
input BudgetSubjectCatalogCreateInput {
  "预算类别"
  budgetType: ID
  "编码"
  code: String
  "名称"
  name: String
  "父ID"
  parent: ID
}

"科目目录表过滤对象"
input BudgetSubjectCatalogFilter {
  name: String
}

"科目目录表"
input BudgetSubjectCatalogUpdateInput {
  "预算类别"
  budgetType: ID
  "编码"
  code: String
  "修改时间"
  modifier: String
  "名称"
  name: String
  "父ID"
  parent: ID
  "排序号"
  sort: ID
}

"预算科目"
input BudgetSubjectCreateInput {
  "预算类别"
  budgetType: ID
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  "名称"
  name: String
  "父ID"
  parent: ID
  "状态（0/未启用，1/启动）"
  status: Boolean
  "科目目录"
  subjectCatalog: ID
}

"预算科目过滤对象"
input BudgetSubjectFilter {
  budgetType: String
  name: String
  subjectCatalog: String
}

"预算科目"
input BudgetSubjectUpdateInput {
  "预算类别"
  budgetType: ID
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  "名称"
  name: String
  "父ID"
  parent: ID
  "排序号"
  sort: ID
  "状态（0/未启用，1/启动）"
  status: Boolean
  "科目目录"
  subjectCatalog: ID
}

input BudgetTaskFilter {
  "预算任务"
  name: String
}

input BudgetTaskInput {
  "预算期间ID"
  budgetPeriod: ID
  "编制结止日期"
  endDate: String
  id: ID
  "预算任务信息"
  message: String
  "任务名称"
  name: String
  "编制起始日期"
  startDate: String
  "预算任务状态"
  status: TaskEnum
}

"预算类别"
input BudgetTypeCreateInput {
  "所属类别"
  category: BudgetCategory
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  "名称"
  name: String
  "父ID"
  parent: ID
  "预算单元集"
  units: [ID]
  "修改人"
  updator: String
}

"预算类别过滤对象"
input BudgetTypeFilter {
  code: String
  enableFlag: String
  name: String
}

"预算类别"
input BudgetTypeInput {
  "预算类别"
  budgetType: ID
  "预算类别"
  code: String
  "预算类别"
  id: ID
  "预算类别"
  name: String
  "预算类别"
  status: Boolean
}

"预算类别"
input BudgetTypeUpdateInput {
  "所属类别"
  category: BudgetCategory
  "编码"
  code: String
  "是否启用"
  enableFlag: Boolean
  "名称"
  name: String
  "父ID"
  parent: ID
  "排序号"
  sort: ID
  "预算单元集"
  units: [ID]
  "修改人"
  updator: String
}

input ButtonParameterInput {
  activityId: String
  candidate: [ID]
  empId: String!
  map: JSON
  newActivityId: String
  opinion: String
  preApprover: ID
  processInstanceId: String!
  receiver: String
  taskId: String
}

input CaseCreateInput {
  "基础权限设置"
  authority: [String]
  "必须授权才能访问"
  authorized: Boolean
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "不在菜单中显示子菜单"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "不在菜单中显示"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  id: String
  "菜单名称"
  name: String
  "基础路径"
  path: String
  "重定向"
  redirect: String
  "路由"
  routes: [CaseRouteInput]
}

input CaseFilter {
  "菜单名称"
  name: String
}

input CaseRouteInput {
  "可以访问的权限"
  authority: [String]
  "必须授权才能访问"
  authorized: Boolean
  "组件"
  containComponent: ComponentConfigurationInput
  "是否启用"
  enabled: Boolean
  "不在菜单中显示子菜单"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "不在菜单中显示"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  "主键"
  id: String
  "菜单名称"
  name: String
  "父路由"
  parent: ID
  "树路径"
  path: String
  "重定向"
  redirect: String
  "子路由"
  routes: [ID]
  "路由类型"
  type: CaseRouteType
}

input CategoryInput {
  explain: String
  name: String!
  parentId: ID
}

input ColumnStructureInput {
  "字符最大长度"
  characterMaxLength: String
  "数据列描述"
  columnComment: String
  "数据类型"
  dataType: String
  "设置默认值"
  defaultValue: String
  id: String
  "是否允许为null"
  isNullable: String
  "是否设为主键(YES/NO)"
  isPrimaryKey: String
  "列名"
  name: String
  "精确度"
  numberPrecision: Int
  "规模"
  numberScale: Int
}

input CommentFilter {
  "forComment 为 null 时，查询所有，为0时查询第一级，其他值时查询该文章下所有一级评论"
  forComment: ID
  "第一级评论，查询 forComment 为空的评论"
  forComment_isEmpty: Boolean
  "查询 ID 不包含"
  id_ne: ID
  "根据ID查询，查询该文章下所有子集"
  id_startsWith: ID
  "评论状态"
  status: String
  "用户ID"
  uid: ID
}

input CommentInput {
  "评论内容"
  content: String!
  "引用的评论"
  forComment: ID
  "评论标题"
  title: String
  "用户ID"
  uid: ID!
}

input ComponentConfigurateInput {
  "组件配置数据"
  props: JSON
  "模版"
  template: String
}

input ComponentConfigurationInput {
  "可访问的权限"
  permissions: [String]
  "组件配置数据"
  props: JSON
  "路由配置"
  routeWrapper: ComponentConfigurationWrapperInput
  "渲染组件"
  template: String
}

input ComponentConfigurationWrapperInput {
  "组件配置数据"
  props: JSON
  "渲染组件"
  template: String
}

input ComponentCreateInput {
  "封面图"
  cover: String
  "简介"
  description: String
  id: String
  "名称"
  name: String
  "组件属性"
  props: [ComponentPropertyValueInput]
  "组件标签"
  tags: [String]
  "组件模版"
  template: String!
  "组件类型"
  type: ComponentType!
}

input ComponentFilter {
  id_in: [String]
  platform: ComponentPropertyType
  type: ComponentType
}

input ComponentPropertyInput {
  "默认值"
  defaultValue: JSON
  "枚举"
  enumeration: EnumerationInput
  "分组"
  group: String
  "显示名称"
  label: String
  "是否为多项"
  multiple: Boolean
  "字段名"
  name: String
  "数据类型"
  type: ComponentPropertyType
}

input ComponentPropertyValueInput {
  key: String
  props: JSON
}

input ComponentUpdateInput {
  "封面图"
  cover: String
  "简介"
  description: String
  "名称"
  name: String
  "组件属性"
  props: [ComponentPropertyValueInput]
  "组件标签"
  tags: [String]
  "组件模版"
  template: String
  "版本"
  version: String
}

input ConfigurationInput {
  "顔色"
  colour: String
}

input CongressMeetingFilter {
  "会议截至日期"
  endDate: String
  "会议名称"
  name: String
  "多状态过滤"
  or: [MeetingStauts]
  "会议开始日期"
  startDate: String
  "状态"
  status: MeetingStauts
}

input CongressMeetingInput {
  "会议议程"
  agendas: [MeetingAgendaInput]
  "会议申请日期"
  applyDate: String
  "申请人"
  applyPerson: ID
  "创建人"
  creator: String
  "会议截至日期"
  endDate: String
  "会议小组"
  groups: [MeetingGroupInput]
  "会议主持人（多个时以逗号隔开）"
  host: String
  "修改人"
  modifier: String
  "会议名称"
  name: String
  "组织id"
  orgId: ID
  "问卷id"
  questionnaire: ID
  "角色对应的用户"
  roles: [RoleEmployeeInput]
  "会议开始日期"
  startDate: String
  "会议状态(暂存、进行中、完成)"
  status: MeetingStauts
  type: String
  "流程id"
  workflow: ID
}

input ConstraintStructureInput {
  "列名"
  columnName: String
  "约束类型"
  constrainType: ConstrainType
  "约束名称"
  constraintName: String
  id: String
  "参考列"
  referenceColumn: String
  "参考表"
  referenceTable: String
}

input ContactFilter {
  uid: ID
}

"ContextInput"
input ContextInput {
  parsing: Boolean
  viewer: ID
}

input ContractClauseInput {
  "条款名称"
  name: String
  "付款金额"
  payAmount: Float!
  "付款描述"
  payDesc: String
  "付款进度"
  payRate: String
  "比例"
  scale: String
}

"分页查询过滤条件对象"
input ContractDictionaryFilter {
  "申请人"
  applyPerson: ID
  "合同负责人"
  dutyPerson: ID
  endDate: String
  "关键字（编号、名称）"
  keyword: String
  "合同名称"
  name: String
  "合同编号"
  no: String
  "项目id"
  project: ID
  startDate: String
  "合同状态"
  status: String
  "合同类型"
  type: String
  "对方单位"
  vendorName: String
}

input ContractInput {
  "委托机构"
  agency: String
  "银行账号"
  bankAccount: String
  "验收日期"
  checkTime: String
  "合同金额"
  contractMoney: Float
  "开户银行"
  depositBank: String
  "附件列表"
  files: [FileObject]
  "医院"
  hospital: String
  "合同ID"
  id: ID
  "合同名称"
  name: String
  "申请付款日期"
  paymentTime: String
  "政府采购编号"
  purSn: String
  "单位自筹金额"
  selfMoney: Float
  "合同签订时间"
  signTime: String
  "合同编号"
  sn: String
  "采购形式"
  style: String
  "供应商名称"
  supplier: String
  "招标时间"
  tenderingTime: String
  "采购方式"
  type: String
  "招标完成金额"
  zbmoney: Int
}

input CourseFilter {
  "查询用户可以选修的课程"
  electiveEmployee: ID
  "用户ID"
  learner: ID
  "查询用户已经选修或者必修的课程"
  learnerAndType: LearnerAndTypeInput
  "课程学习类型"
  learnerType: LearnerType
  "课程名"
  name: String
  "发布时间 例: 2019-09-11"
  publishDate: String
  "发布人"
  publishUser: ID
  "类型ID"
  type: String
  "学习者用户名"
  userName: String
}

input CourseInput {
  "互动控制"
  controlType: JSON
  "封面"
  cover: FileObject
  "学习时长"
  duration: Float
  "简介"
  introduction: String
  "学习人范围"
  learnerScope: [String]
  "名称"
  name: String!
  "消息提醒类型"
  notificationType: JSON
  "发布人"
  publishUser: ID
  "置顶"
  top: Boolean
  "课程分类ID"
  type: String
}

input CreateApiInput {
  "调试工具"
  debug: String
  "接口描述"
  describe: String
  "graphql接口"
  graphql: GraphqlApiInput
  "对应的图标"
  icon: String
  "主键"
  id: ID
  "请求方式"
  method: String
  "接口中文名"
  name: String
  "restful"
  restful: ID
  "接口所属类型"
  type: ID
}

input CreateApiTypeInput {
  "主键"
  id: ID
  "类型名称"
  name: String
  "备注"
  note: String
  "父类型"
  parent: ID
}

input CreateProcessInstanceInput {
  candidate: [ID]
  draft: Boolean
  empId: Int
  formId: String
  preApprover: ID
  priority: Int
  processKey: String!
  value: JSON
}

"字典"
input DataDictionaryFilter {
  "编码"
  code: String
  "描述"
  description: String
  "名称"
  name: String
  "类型"
  type: String
}

input DataDictionaryInput {
  "代码"
  code: String
  "描述"
  description: String
  "名称"
  name: String!
  "上级数据字典"
  parent: ID
  "配置类型"
  type: String!
}

input DataDictionaryTypeInput {
  "描述"
  description: String
  "名称"
  name: String
  "上级数据字典分类"
  parent: ID
}

input DataExpansionInterfaceInput {
  executeStatement: String
  id: ID
  interfaceName: String
  label: String
  type: InterfaceType
}

input DataLogFilter {
  modelName: String
  operateTime_startsWith: Date
}

input DataSourceConfigInput {
  "数据库类型（MYSQL,SQL SERVER,ORACLE等）"
  dataBaseType: DataBaseType
  "数据库名称"
  databaseName: String
  "代码（唯一标识）"
  dbCode: String
  "数据库驱动"
  driven: String
  "是否启用"
  enabled: Boolean
  "初始化连接数"
  initialSize: Int
  "连接最大激活数"
  maxActive: Int
  "最长等待时间"
  maxWait: Int
  "最小空闲数"
  minIdle: Int
  "用户密码"
  password: String
  "连接端口"
  port: String
  "数据库路径"
  url: String
  "用户名"
  userName: String
}

input DataSourceConfigurationInput {
  "钉钉 配置参数 - agentId"
  agentId: String
  "钉钉 配置参数 - appKey"
  appKey: String
  "钉钉 配置参数 - appSecret"
  appSecret: String
  "钉钉 配置参数 - corpId"
  corpId: String
  "数据库类型"
  dataBaseType: String
  "数据库名称"
  databaseName: String
  "OA 配置参数 - fixedStr"
  fixedStr: String
  "OA 配置参数 - host"
  host: String
  "OA 配置参数 - key"
  key: String
  "密码"
  password: String
  "端口"
  port: String
  "OA 配置参数 - serviceKey"
  serviceKey: String
  "连接地址"
  url: String
  "用户名"
  userName: String
}

input DataSourceCreateInput {
  "配置参数"
  configuration: DataSourceConfigurationInput
  "描述"
  description: String
  "名称"
  name: String
  "数据库类型"
  type: DataSourceType!
}

input DataSourceFilter {
  driver: String
  id_in: [ID]
}

input DataSourceUpdateInput {
  "配置参数"
  configuration: DataSourceConfigurationInput!
  "描述"
  description: String
  "名称"
  name: String
  "数据库类型"
  type: DataSourceType!
}

"汇总统计数据过滤对象"
input DataStatisticsFilter {
  "所属单位"
  hospital: String
  "年度"
  year: String
}

input DataTransmissionInput {
  "调度表达式"
  cron: String
  "名称"
  name: String
  "同步方式"
  status: DataTransmissionStatus
  "同步方式：手工、自动"
  syncType: String
  "同步开关"
  sysSwitch: String
  "目标库"
  to: Int
}

input DataTransmissionTaskFilter {
  dataTransmission: ID
}

input DataTransmissionTaskLogFilter {
  task: ID
}

"API生成日志表"
input DdmApiLogCreateInput {
  "API生成日志表"
  apiData: String
  "API生成日志表"
  apiType: String
  "API生成日志表"
  createdAt: String
  "API生成日志表"
  creator: String
  "API生成日志表"
  model: ID
  "API生成日志表"
  updatedAt: String
  "API生成日志表"
  updator: String
}

"API生成日志表"
input DdmApiLogUpdateInput {
  "API生成日志表"
  apiData: String
  "API生成日志表"
  apiType: String
  "API生成日志表"
  createdAt: String
  "API生成日志表"
  creator: String
  "API生成日志表"
  model: ID
  "API生成日志表"
  updatedAt: String
  "API生成日志表"
  updator: String
}

"院内决策申请表"
input DecisionApplyCreateInput {
  "附件"
  accessory: JSON
  "院务公开内容"
  administratorPublicContent: String
  "申请人"
  applyEmployee: String
  "预算金额"
  budgetAmount: Float
  "分管领导审核情况"
  chargeLeaderAuditCondition: String
  "分管领导意见"
  chargeLeaderView: String
  "院长审核意见"
  deanAuditView: String
  "院长办公会决议内容"
  deaneryDecisionContent: String
  "部门执行情况"
  departmentExecuteCondition: String
  "项目类型"
  itemType: String
  "主要领导审核情况"
  mainLeaderAuditCondition: String
  "主要领导意见"
  mainLeaderView: String
  "是否需要预算"
  needBudget: Boolean
  "是否上院长办公会"
  needDeanery: Boolean
  "是否需修改完善，上党委会"
  needPartyCommittee: Boolean
  "其他院领导阅件意见"
  otherLeaderReadView: String
  "党委会决议内容"
  partyCommitteeDecisionContent: String
  "党委会决议意见"
  partyCommitteeDecisionView: String
  "党务公开内容"
  partyPublicContent: String
  "党务公开形式"
  partyPublicForm: String
  "党务公开时间"
  partyPublicTime: String
  "党委书记审核意见"
  partySecretaryAuditView: String
  "流程id"
  processId: ID
  "相关部门会稿意见"
  relatedDepartmentDraftView: String
  "主办部门初步意见"
  sponsorDepartmentPreliminaryView: String
  "议题审批分管领导"
  topicsApproveChargeLeader: String
}

"院内决策申请表过滤对象"
input DecisionApplyFilter {
  accessory: String
  administratorPublicContent: String
  administratorPublicForm: String
  administratorPublicTime: String
  applyEmployee: String
  applyeDate: String
  budgetAmount: String
  chargeLeaderAuditCondition: String
  chargeLeaderView: String
  code: String
  deanAuditView: String
  deaneryDecisionContent: String
  deaneryDecisionView: String
  department: String
  departmentExecuteCondition: String
  itemType: String
  mainLeaderAuditCondition: String
  mainLeaderView: String
  needBudget: String
  needDeanery: String
  needPartyCommittee: String
  otherLeaderReadView: String
  partyCommitteeDecisionContent: String
  partyCommitteeDecisionView: String
  partyPublicContent: String
  partyPublicForm: String
  partyPublicTime: String
  partySecretaryAuditView: String
  partySecretaryView: String
  processId: String
  relatedDepartmentDraftView: String
  sponsorDepartmentPreliminaryView: String
  topicsApproveChargeLeader: String
  topicsApproveMainLeader: String
  topicsName: String
  topicsType: String
}

"院内决策申请表"
input DecisionApplyUpdateInput {
  "附件"
  accessory: JSON
  "院务公开内容"
  administratorPublicContent: String
  "申请人"
  applyEmployee: String
  "预算金额"
  budgetAmount: Float
  "分管领导审核情况"
  chargeLeaderAuditCondition: String
  "分管领导意见"
  chargeLeaderView: String
  "院长审核意见"
  deanAuditView: String
  "院长办公会决议内容"
  deaneryDecisionContent: String
  "部门执行情况"
  departmentExecuteCondition: String
  "项目类型"
  itemType: String
  "主要领导审核情况"
  mainLeaderAuditCondition: String
  "主要领导意见"
  mainLeaderView: String
  "是否需要预算"
  needBudget: Boolean
  "是否上院长办公会"
  needDeanery: Boolean
  "是否需修改完善，上党委会"
  needPartyCommittee: Boolean
  "其他院领导阅件意见"
  otherLeaderReadView: String
  "党委会决议内容"
  partyCommitteeDecisionContent: String
  "党委会决议意见"
  partyCommitteeDecisionView: String
  "党务公开内容"
  partyPublicContent: String
  "党务公开形式"
  partyPublicForm: String
  "党务公开时间"
  partyPublicTime: String
  "党委书记审核意见"
  partySecretaryAuditView: String
  "流程id"
  processId: ID
  "相关部门会稿意见"
  relatedDepartmentDraftView: String
  "主办部门初步意见"
  sponsorDepartmentPreliminaryView: String
  "议题审批分管领导"
  topicsApproveChargeLeader: String
}

input DefaultFieldFeatureFilter {
  "描述"
  displayName: String
  "是否策略特征"
  isStrategy: Boolean
  "名称"
  name: String
}

input DefaultFieldFeatureInput {
  "显示名称"
  displayName: String!
  "名称"
  name: String!
}

input DefaultFieldOptionInput {
  "字符长度"
  characterMaxLength: Int
  "字典"
  dictionary: String
  "枚举"
  enumeration: String
  "Number 类型与日期类型是有效"
  format: NumberFormat
}

input DefaultModelFieldCreateInput {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段特征"
  feature: ID
  "数据库设置"
  fieldOption: DefaultFieldOptionInput
  "字段类型"
  fieldType: String
  "是否主键"
  isPrimaryKey: Boolean
  "必填"
  isRequired: Boolean
  "唯一"
  isUnique: Boolean
  "名称"
  name: String
}

input DefaultModelFieldUpdateInput {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "数据库设置"
  fieldOption: DefaultFieldOptionInput
  "字段类型"
  fieldType: String
  "是否主键"
  isPrimaryKey: Boolean
  "必填"
  isRequired: Boolean
  "唯一"
  isUnique: Boolean
  "名称"
  name: String
}

input DefineEventFilter {
  code: String
  name: String
  scopeId: String
  scopeName: String
  type: String
}

input DefineEventInput {
  "类名"
  className: String
  "code"
  code: String
  "事件描述"
  description: String
  "方法名"
  functionName: String
  "事件名称"
  name: String
  "相关参数"
  parameters: String
  "业务范围ID"
  scopeId: String
  "业务范围名称"
  scopeName: String
  "事件类型"
  type: String
}

input DefineMessageFilter {
  id: ID
  type: MessageType
}

input DefineMessageInput {
  "消息名称"
  name: String
  "消息类型"
  type: MessageType
}

input DefineNoticeFilter {
  defineEventId: ID
}

input DefineNoticeInput {
  "事件定义ID"
  defineEventId: ID
  enabled: Boolean
  img: String
  messageCode: String
  "通知名称"
  name: String
  noticeType: NoticeType
  "接收人"
  receiver: [String]
  "模板ID"
  templateId: ID
  title: String
}

input DefineRemindFilter {
  defineMessageId: ID
}

input DefineRemindInput {
  defineMessageId: ID
  enabled: Boolean
  templateId: ID
  type: RemindType
}

input DelegateFilterInput {
  "名称"
  name: String
}

input DepartmentAttributeInput {
  "属性名"
  attributeName: String
  "属性值"
  attributeValue: String
  "描述"
  description: String
}

"部门"
input DepartmentCreateInput {
  "部门属性"
  attributes: [DepartmentAttributeInput]
  "描述"
  description: String
  "职务"
  jobs: [JobInput]
  "名称"
  name: String
  "父对象ID"
  parent: ID
  "授予权限"
  permissions: [PermissionInput]
  "编码"
  sn: String
  "排序"
  sort: Int
  "部门类型"
  type: ID
}

"部门过滤对象"
input DepartmentFilter {
  "查询类型"
  findType: String
  "查询 ID 不包含"
  id_ne: ID
  "根据ID查询，查询该部门下所有子集"
  id_startsWith: ID
  "parent为null时，查询所有部门，为0时查询所有一级部门，其他值时查询该部门下所有一级子集部门"
  parent: ID
  type: ID
}

"部门类型"
input DepartmentTypeCreateInput {
  "最大兼岗人数"
  andPost: Int
  "编码"
  code: String
  "是否支持多部门"
  multiSectoral: Boolean
  "名称"
  name: String!
}

"部门"
input DepartmentUpdateInput {
  "部门属性"
  attributes: [DepartmentAttributeInput]
  "描述"
  description: String
  "职务"
  jobs: [JobInput]
  "名称"
  name: String
  "父对象ID"
  parent: ID
  "授予权限"
  permissions: [PermissionInput]
  "编码"
  sn: String
  "排序"
  sort: Int
  "部门类型"
  type: ID
}

input DeploymentInput {
  activateProcessDefinitionsOn: String
  category: String
  deploymentPropertyName: String
  deploymentPropertyValue: String
  key: String
  name: String
  parentDeploymentId: String
  tenantId: String!
}

input DjVersionCreateInput {
  "更新内容"
  content: String
  "部署时间"
  deployTime: String
  "版本"
  version: String
}

input DjVersionFilter {
  "版本"
  version: String
}

input DjVersionUpdateInput {
  "更新内容"
  content: String
  "部署时间"
  deployTime: String
  "排序"
  sort: Int
  "版本"
  version: String
}

input DocumentFilter {
  "分组"
  group_eq: String
  "业务对象类型"
  objectType_eq: String
  "业务对象ID"
  object_eq: String
}

input DomainCreateInput {
  "编码"
  code: String
  "名称"
  name: String
  "父id"
  parent: ID
}

input DomainFilter {
  name: String
}

input DomainUpdateInput {
  "编码"
  code: String
  "名称"
  name: String
  "父id"
  parent: ID
}

input DownloadLinkOptions {
  compressionMethod: CompressionMethod
  description: String
  name: String
}

input DraftFilter {
  empId: String
  timeBet: DateBetween
  time_bet: DateBetween
  title: String
}

input DraftInput {
  department: String
  priority: Int
  processDefinitionId: String
  sendAutomatically: Boolean
  sendTime: Date
  sender: String
  value: JSON
}

input EZWorkflowActivityInput {
  "活动id"
  activityId: String!
  "活动名"
  activityName: String
  "活动类型"
  activityType: String
  "办理优先级"
  priority: String!
  "下一办理人（可以为多个用,隔开）"
  userIds: String!
  "办理人名称"
  userNames: String
}

input Emp {
  empId: String
  type: EmployeeTypeEnum
}

input EmployeeAddressInput {
  "城市"
  city: String
  "国家"
  country: String
  "区"
  district: String
  "标签 查询时用"
  label: String
  "邮编"
  postalCode: String
  "是否为主地址"
  primary: Boolean
  "省"
  province: String
  "街道"
  street: String
}

"人员表"
input EmployeeCreateInput {
  "人员电子签名"
  autographPngs: [AutographPngInput]
  "生日"
  birthday: String
  "E-mail"
  emails: [EmployeeEmailInput]
  "编号"
  jobNumber: String
  "名称"
  name: String
  "组织"
  organizations: [OrganizationEmployeeInput]!
  password: String
  "员工电话"
  phones: [EmployeePhoneInput]
  "性别"
  sex: Sex
  "标签，用于筛选"
  tags: [String]
  "扩展字段值"
  values: [EmployeeFieldValueInput]
}

input EmployeeEmailInput {
  "邮箱"
  email: String
  "标签 查询时用"
  label: String
  "是否为主邮箱"
  primary: Boolean
  "邮箱状态"
  status: EmailStatus
}

input EmployeeFieldGroupFilter {
  "字段组ID"
  id: [ID]
}

input EmployeeFieldGroupInput {
  "字段组描述"
  description: String
  "字段组名称"
  name: String!
}

input EmployeeFieldInput {
  "字段描述"
  description: String
  "所属字段组"
  employeeFieldGroup: ID!
  "展示字段名"
  label: String!
  "字段名称"
  name: String!
  "类型"
  type: EmployeeFieldType!
}

input EmployeeFieldValueInput {
  "对应的字段"
  name: String
  "字段值"
  value: String
}

input EmployeeFilter {
  "复杂查询支持"
  and: [EmployeeFilter]
  "当前部门"
  currentDepartment: ID
  "当前职位"
  currentPosition: ID
  "部门匹配 - 值为部门 ID"
  department: ID
  "部门匹配 - 会返回子部门的数据"
  department_startsWith: ID
  extensionField: [ExtensionField]
  extraCondition: String
  "群组"
  group: ID
  "ID"
  id_in: [ID]
  "职务"
  job: ID
  "工号"
  jobNumber: String
  "非该职务"
  job_notEqual: ID
  "手机号"
  mobile: String
  "名称包含"
  name_contains: String
  "复杂查询支持"
  or: [EmployeeFilter]
  "职位"
  position: ID
  "职位名称,需与部门id同传"
  positionName_equal: String
  "非该职位名称，需与部门id同传"
  positionName_notequal: String
  "角色"
  role: ID
  "性别"
  sex: Sex
  "缩写"
  sn_contains: String
  "状态"
  status: String
  "状态"
  status_ne: String
}

input EmployeeGroupCreateInput {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "用户组名称"
  name: String
}

"创建群组分类"
input EmployeeGroupScopeCreateInput {
  id: String!
  name: String!
}

"更新群组分类"
input EmployeeGroupScopeUpdateInput {
  id: String!
  name: String!
}

input EmployeeGroupUpdateInput {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "用户组名称"
  name: String
}

"EmployeeLabelInput"
input EmployeeLabelInput {
  "标签描述"
  description: String
  "人员标签主键id"
  id: ID!
  "标签名称"
  name: String!
  "状态(1启用,2禁用-表示已被删除)"
  status: Int!
}

input EmployeePhoneInput {
  "标签 查询时用"
  label: String
  "电话"
  phone: String
  "是否为主电话"
  primary: Boolean
  "电话状态"
  status: PhoneStatus
}

input EmployeePositionFilter {
  "部门匹配 - 值为部门 ID"
  department: ID
  "部门匹配 - 会返回子部门的数据"
  department_startsWith: ID
  "通过群组ID查询"
  group: ID
  id_in: [ID]
  "职务"
  job: ID
  "工号"
  jobNumber: String
  "手机号"
  mobile: String
  "名称包含"
  name_contains: String
  "职位"
  position: ID
  "职位名称,需与部门id同传"
  positionName_equal: String
  "非该职位名称，需与部门id同传"
  positionName_notequal: String
  "性别"
  sex: Sex
  sn_contains: String
  "状态"
  status: String
}

input EmployeePositionInput {
  "职位ID"
  position: ID
  "是否为主要职位"
  primary: Boolean
}

input EmployeePositionUpdateInput {
  "员工ID"
  employeeId: ID
  "员工更换后部门id"
  newDeparmentId: ID
  "员工更换部门后对应的职位id"
  newPositionId: ID
  "员工所在组织"
  organizationId: String
  "员工所在原部门id"
  originalDeparmentId: ID
}

"人员表"
input EmployeeUpdateInput {
  "员工地址"
  addresses: [EmployeeAddressInput]
  "人员电子签名"
  autographPngs: [AutographPngInput]
  avatar: FileObject
  "生日"
  birthday: String
  "E-mail"
  emails: [EmployeeEmailInput]
  """
    状态
     status: EmployeeStatus
  编号
  """
  jobNumber: String
  "名称"
  name: String
  "组织"
  organizations: [OrganizationEmployeeInput]!
  password: String
  "员工电话"
  phones: [EmployeePhoneInput]
  "性别"
  sex: Sex
  "标签，用于筛选"
  tags: [String]
  "扩展字段"
  values: [EmployeeFieldValueInput]
}

input EntityuserInput {
  entity_id: String
  entity_type: String
  recipientId: String
  user: String
  user_role: ENUM_ENTITYUSER_USER_ROLE
  user_type: String
}

input EnumerationCreateInput {
  "枚举描述"
  description: String
  "显示名称"
  displayName: String
  "名称"
  name: String
  "枚举值"
  values: [EnumerationValueInput]
}

input EnumerationFilter {
  "显示名称"
  displayName: String
  "是否系统枚举"
  isSystem: Boolean
  "名称"
  name: String
}

input EnumerationInput {
  id: String
  name: String
  values: [EnumerationValueInput]
}

input EnumerationUpdateInput {
  "枚举描述"
  description: String
  "显示名称"
  displayName: String
  "名称"
  name: String
  "枚举值"
  values: [EnumerationValueInput]
}

input EnumerationValueInput {
  "显示名称"
  displayName: String
  id: String
  name: String
  value: String
}

input EvaluationIndexInput {
  "主键id"
  id: ID
  "评测项名称"
  name: String
}

input ExamInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  examPersons: [EntityuserInput]
  examType: ENUM_EXAM_EXAMTYPE
  exam_end_time: DateTime
  exam_length: Int
  exam_name: String
  exam_start_time: DateTime
  examandpapers: [ID]
  examinationpapers: [ID]
  icon: String
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  messagePush: [String]
  message_push: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass_mark: String
  releaseState: String
  sheets: [ID]
}

input ExamandpaperInput {
  exam: ID
  examinationpaper: ID
}

input ExamconditionInput {
  code: String
  create_time: DateTime
  creator: String
  describe: String
  exam_state: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass: Boolean
  reate_departid: String
  score: String
  user: String
}

input ExaminationpaperImportInput {
  bank: QuestionbankInput
  point: [editExamtopicInput]
  topic: [QuestiontopicInput]
}

input ExaminationpaperInput {
  examandpapers: [ID]
  exampapertitles: [ID]
  examtopics: [ID]
  name: String
  paperType: ENUM_EXAMINATIONPAPER_PAPERTYPE
  sheets: [ID]
  totalScore: String
}

input ExampaperTitleInput {
  examinationPaperId: ID
  questionTopics: [ID]
}

input ExampapertitleInput {
  examinationpaper: ID
  questionbank: ID
  questiontopic: ID
}

input ExamreportInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exam_number: Int
  finished: Boolean
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  user: String
}

input ExamtopicInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  each_question_score: String
  examinationpaper: ID
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  remind_type: ENUM_EXAMTOPIC_REMIND_TYPE
}

"ExcelEmployeeFilter"
input ExcelEmployeeFilter {
  "ids"
  ids: [ID]
}

"预算拆分进度"
input ExpertDetailInput {
  "批准数量"
  approved: String
  "论证意见"
  argumentation: String
  "专家意见"
  expertOpinion: String
  "进口论证id"
  importArgumentId: ID
  "金额"
  money: Float
  "数量"
  num: Int
  "预算项目id"
  proId: Int
  "批准单价"
  unitPrice: String
}

input ExpertFilter {
  "专家姓名"
  name_eq: String
}

"专家信息ID"
input ExpertIdInput {
  id: ID!
}

"专家信息参数"
input ExpertInput {
  "开户银行"
  bank: String
  "银行卡号"
  bankCard: String
  "办公地点"
  company: String
  "身份证号"
  idCard: String
  "专业"
  major: String
  "姓名"
  name: String
  "电话"
  phone: String
  "职位"
  position: String
  "职称"
  title: String
}

input ExpertSceneBatchInput {
  "论证意见"
  argumentOpinion: String
  id: ID!
  "批准数量"
  num: Int
  "申康意见"
  skOpinion: String
  "批准金额"
  sumPrice: Int
}

input ExpertSceneFilter {
  "论证年份"
  year_eq: String
}

"专家论证场次参数"
input ExpertSceneInput {
  "专家信息"
  experts: [ExpertIdInput]
  "场次名称"
  name: String
  "进口论证详情"
  projectDetaileds: [BudgetProjectDetailedIdInput]
  """
    场次年度
  year: String
  场次日期
  """
  sceneDate: String
}

"人员扩展字段查询实体"
input ExtensionField {
  name: String
  value: String
}

input FinalAssessmentInput {
  "评价"
  finalEvaluate: FinalEvaluate!
  "测评ID"
  reviewId: ID!
  "被测评人"
  testee: ID!
}

input FollowInput {
  "关注人"
  followUser: String
  "流程id"
  processDefinitionId: String
  "流程实例id"
  processInstanceId: String
}

input FollowsFilter {
  empId: String
  sendTimeBet: DateBetween
  sendTime_bet: DateBetween
}

input FormFilter {
  category: FormType
  name: String
}

input GetDetailResultRequest {
  userId: String!
  workId: String!
}

input GetMailReceiveBoxListFilter {
  "大于等于开始时间"
  beginDate_ge: String
  "小于于等于开始时间"
  endDate_le: String
  "是否未读1是0不是"
  notRead_eq: String
  "发件人"
  posterName_eq: String
  "邮件标题模糊查询"
  subject_like: String
  "用户ID"
  userId: String!
}

input GetNewFormByProcessNameRequest {
  "pc访问： 默认为pc"
  mobileType: String
  "流程moduleId串工作流程 默认为1"
  moduleIds: String
  "组织字符串"
  orgIdString: String!
  "流程名称"
  processName: String
  "登录人ID"
  userId: String!
}

input GetPortalInfoListRequest {
  "栏目ID"
  channelId: String
  "用户组织"
  orgId: String!
  "用户组织串"
  orgIdString: String!
  pageSize: String
  pagerOffset: String
  "用户ID"
  userId: String!
}

input GetReceiveFileBoxFilter {
  "流程标题"
  title_like: String
  "用户ID"
  userId: String!
}

input GetRemindInfoRequest {
  "用户组织"
  orgId: String!
  "用户组织串"
  orgIdString: String!
  "用户ID"
  userId: String!
}

"GhActivityBaseInfoInput"
input GhActivityBaseInfoInput {
  "封面图片"
  coverImages: [FileObject]
  "id"
  id: ID!
  "说明"
  introduction: String
  "名称"
  name: String
  "员工ID"
  updator: String
}

"GhActivityCanLookRuleInput"
input GhActivityCanLookRuleInput {
  "社团id"
  associationId: String
  "性别, 值： male 或 female"
  sex: String
}

"GhActivityCanLookRuleUpdateInput"
input GhActivityCanLookRuleUpdateInput {
  "社团id"
  associationId: String
  "性别, 值： male 或 female"
  sex: String
  "员工ID"
  updator: String
}

"GhActivityCanSignUpRuleInput"
input GhActivityCanSignUpRuleInput {
  "社团id"
  associationId: String
  "性别, 值： male 或 female"
  sex: String
}

"GhActivityCanSignUpRuleUpdateInput"
input GhActivityCanSignUpRuleUpdateInput {
  "社团id"
  associationId: String
  "性别, 值： male 或 female"
  sex: String
  "员工ID"
  updator: String
}

"GhActivityCreateInput"
input GhActivityCreateInput {
  "所属社团"
  associationId: String
  "所属拥有者类型（0社团，1工会）"
  belongType: Int
  "可查看规则列表"
  canLookRules: [GhActivityCanLookRuleInput]
  "可报名规则列表"
  canSignUpRules: [GhActivityCanSignUpRuleInput]
  "活动封面图片"
  coverImages: [FileObject]
  "员工ID"
  creator: String
  "图片列表"
  images: [GhActivityImageInput]
  "说明"
  introduction: String
  "名称"
  name: String
  "场次时间列表"
  places: [GhActivityPlaceInput]
  "报名截止时间，格式：yyyy-MM-dd HH:mm:ss，不传时则为场次的最小开始时间"
  signUpEndTime: String
  "报名开始时间，格式：yyyy-MM-dd HH:mm:ss，不传时则为当前时间"
  signUpStartTime: String
  "所属标签分类列表"
  signs: [GhActivitySignInput]
}

"GhActivityFilter"
input GhActivityFilter {
  "社团ID"
  association_eq: String
  "所属拥有者类型（0社团，1工会）"
  belongType: Int
  "用于查看可看到的活动, null or employeeId"
  can_look_employeeid: String
  "是否删除，空代表所有，true已删除的，false有效的"
  deleted: Boolean
  "结束时间，格式：yyyy-MM-dd"
  end_date: String
  "是否热门, value: 空/1/0"
  is_hot: String
  "活动名称模糊查询"
  name_like: String
  "查询我的活动时使用，传入员工ID"
  ownerId: Int
  "发布状态, value: 空/1/0"
  publish_status: String
  "标签ID"
  sign_id: String
  "标签名模糊查询"
  sign_like: String
  "开始时间，格式：yyyy-MM-dd"
  start_date: String
}

"活动图片表"
input GhActivityImageCreateInput {
  "活动id"
  act_id: Int
  "名称"
  name: String
  "父ID"
  parent: ID
}

"活动图片表过滤对象"
input GhActivityImageFilter {
  act_id: String
  id: String
  name: String
}

"GhActivityImageInput"
input GhActivityImageInput {
  "图片名称"
  name: String
  "图片路径"
  path: String
  "图片排序"
  sort: Int
}

"活动图片表"
input GhActivityImageUpdateInput {
  "活动相册图片"
  file: FileObject
}

"GhActivityPlaceInput"
input GhActivityPlaceInput {
  "场次活动日期"
  actDate: String!
  "地址"
  address: String!
  "行车路线"
  driving: String
  "场次结束时间"
  endTime: String!
  "友情提示"
  friendlyTips: String
  id: Int
  "限制参与人数"
  maxJoinNum: Int!
  "名称"
  name: String!
  "场次开始时间"
  startTime: String!
}

"GhActivityPlaceUpdateInput"
input GhActivityPlaceUpdateInput {
  "场次活动日期"
  actDate: String
  address: String
  driving: String
  endTime: String
  friendlyTips: String
  maxJoinNum: Int
  "名称"
  name: String
  startTime: String
  "员工ID"
  updator: String
}

"GhActivityPlaceUserFilter"
input GhActivityPlaceUserFilter {
  "人员姓名"
  employeeName_like: String
  "场次id"
  placeId: Int
  "报名方式，见 GhSignUpModeEnum 声明值"
  signupMode: String
  "人员状态(0待审核，1已通过，2未通过）"
  status: Int
}

"GhActivityPlaceUserInput"
input GhActivityPlaceUserInput {
  "审核人员工id"
  auditEmployeeId: String
  "审核时间"
  auditTime: Date
  creator: String
  "员工人员id"
  employeeId: Int
  "员工人员姓名"
  employeeName: String
  "场次id"
  placeId: Int!
  "备注"
  remarks: String
  "报名方式"
  signUpMode: String
  "人员状态(0待审核，1已通过，2未通过）"
  status: Int
}

"GhActivityPlaceUserStatusInput"
input GhActivityPlaceUserStatusInput {
  "审核人员工用户ID"
  auditEmployeeId: Int!
  "审核时间"
  auditTime: Date!
  "id"
  id: ID!
  "备注"
  remarks: String
  "人员状态(0待审核，1已通过，2未通过）"
  status: Int!
  "员工ID"
  updator: String
}

"GhActivityPublishInput"
input GhActivityPublishInput {
  "发布操作人"
  auditEmployeeId: Int!
  "员工ID"
  creator: String
  "生效时间"
  effectTime: String
  "活动发布状态或取消， 1已发布， 0取消发布"
  publishStatus: Int!
}

"活动标签表"
input GhActivitySignCreateInput {
  "所属分类（0社团活动标签，1工会活动标签）"
  belongType: Int!
  "描述"
  description: String
  "名称"
  name: String
  "排序"
  sort: Int
}

"活动标签表过滤对象"
input GhActivitySignFilter {
  "0社团活动，1工会活动"
  belongType_eq: String
  "姓名模糊查询"
  name_like: String
}

"GhActivitySignIdInput"
input GhActivitySignInput {
  id: String
}

"活动标签表"
input GhActivitySignUpdateInput {
  "描述"
  description: String
  "名称"
  name: String
  "排序"
  sort: Int
  "员工ID"
  updator: String
}

"GhActivityUpdateInput"
input GhActivityUpdateInput {
  canLookRules: [GhActivityCanLookRuleInput]
  canSignUpRules: [GhActivityCanSignUpRuleInput]
  coverImages: [FileObject]
  images: [GhActivityImageInput]
  introduction: String
  name: String
  places: [GhActivityPlaceInput]!
  "报名截止时间，格式：yyyy-MM-dd HH:mm:ss，不传时则为场次的最小开始时间"
  signUpEndTime: String
  "报名开始时间，格式：yyyy-MM-dd HH:mm:ss，不传时则为当前时间"
  signUpStartTime: String
  signs: [GhActivitySignInput]
  "员工ID"
  updator: String
}

"社长输入类"
input GhAssocLeaderInput {
  employeeId: Int
  employeeName: String
  sex: String
}

"GhAssocUserFilter"
input GhAssocUserFilter {
  "社团工号"
  assocWorkNo: String
  "社团ID"
  associationId: Int
  employeeName_like: String
  "加入社团(兴趣小组)开始日期，格式：yyyy-MM-dd"
  joinTime: String
  "身份，001组长、002副组长、003组员"
  positionCode: String
  "性别，男male, 女female"
  sex: String
}

"GhAssocUserInput"
input GhAssocUserInput {
  "社团工号"
  assocWorkNo: String
  "员工ID"
  creator: String
  "头像json串"
  employeeAvatar: String
  "社员用户ID"
  employeeId: Int!
  "社团人员名称"
  employeeName: String
  "加入社团时间"
  joinTime: String
  "社团身份代码"
  positionCode: String!
  "社团人员性别"
  sex: String
  "人员状态，1通过，0待审核（移动端加入社团时需审核）"
  status: Int
}

"GhAssocUserPostionInput"
input GhAssocUserPostionInput {
  "社团工号"
  assocWorkNo: String
  "加入社团时间"
  joinTime: Date
  "社团身份代码"
  positionCode: String
  "备注"
  remarks: String
  "员工ID"
  updator: String
}

"社团信息"
input GhAssociationCreateInput {
  "员工ID"
  creator: String
  "图片ID数据"
  files: [FileObject]
  "社团介绍"
  introduction: String
  leader: GhAssocLeaderInput
  "最大社员数量"
  maxEmployeeNum: Int
  "社团名称"
  name: String
  "排序"
  sort: Int
  "社团状态（0禁用，1启用）"
  status: Int
  "社团规则"
  teamRules: String
}

"社团信息过滤对象"
input GhAssociationFilter {
  "是否删除的 ，空代表所有，true禁用，false正常"
  deleted: Boolean
  "名称模糊查询"
  name_like: String
  "当前登录人id,查询我的兴趣小组"
  ownerId: Int
  "社团状态（0禁用，1启用）"
  status: String
}

"社团图片表"
input GhAssociationImageCreateInput {
  "社团id"
  associationId: Int
  "名称"
  name: String
  "路径"
  path: String
  "排序"
  sort: Int
}

"社团图片表过滤对象"
input GhAssociationImageFilter {
  associationId: String
  name: String
}

"社团图片表"
input GhAssociationImageUpdateInput {
  "社团id"
  associationId: Int
  "名称"
  name: String
  "路径"
  path: String
  "排序"
  sort: Int
}

"社团信息"
input GhAssociationUpdateInput {
  "文件"
  files: [FileObject]
  "社团介绍"
  introduction: String
  "社长"
  leader: GhAssocLeaderInput
  "最大社员数量"
  maxEmployeeNum: Int
  "社团名称"
  name: String
  "排序"
  sort: Int
  "社团状态（0禁用，1启用）"
  status: Int
  "社团规则"
  teamRules: String
  "员工ID"
  updator: String
}

"GhAssociationUserStatusInput"
input GhAssociationUserStatusInput {
  "审核人员工用户ID"
  auditEmployeeId: Int!
  "审核时间"
  auditTime: Date!
  id: ID!
  "社团身份代码"
  positionCode: String
  "备注"
  remarks: String
  "人员状态(0待审核，1已通过，2未通过）"
  status: Int!
  "员工ID"
  updator: String
}

"GhCreateEmployeeLabelInput"
input GhCreateEmployeeLabelInput {
  "标签描述"
  description: String
  "标签名称"
  name: String!
  "状态(1启用,2禁用-表示已被删除)"
  status: Int!
}

"我的历程"
input GhEmployeeJourneyCreateInput {
  "历程时间"
  activityAt: String
  "创建时间"
  createdAt: String
  "员工ID"
  employeeId: Int
  "历程名称"
  name: String
  "上级历程"
  parent: Int
  "备注"
  remarks: String
}

"我的历程过滤对象"
input GhEmployeeJourneyFilter {
  activityAt: String
  createdAt: String
  employeeId: String
  name: String
  parent: String
  remarks: String
}

"我的历程"
input GhEmployeeJourneyUpdateInput {
  "历程时间"
  activityAt: String
  "创建时间"
  createdAt: String
  "员工ID"
  employeeId: Int
  "历程名称"
  name: String
  "上级历程"
  parent: Int
  "备注"
  remarks: String
}

"GhEmployeeLabelFilter"
input GhEmployeeLabelFilter {
  "人员标签主键id"
  id: ID
  "标签名称"
  name: String
  "状态(1启用,2禁用-表示已被删除)"
  status: Int
}

"GhEmployeeLabelIdInput"
input GhEmployeeLabelIdInput {
  "人员标签主键id"
  id: ID!
}

"GhEmployeeLabelInput"
input GhEmployeeLabelInput {
  "标签描述"
  description: String
  "人员标签主键id"
  id: ID!
  "标签名称"
  name: String!
  "状态(1启用,2禁用-表示已被删除)"
  status: Int!
}

"GhEmployeeLabelRelationInput"
input GhEmployeeLabelRelationInput {
  "人员id"
  employeeId: Int!
  "人员标签"
  employeeLabel: GhEmployeeLabelIdInput!
  "人员名称"
  employeeName: String!
}

"员工标签用户过滤类"
input GhEmployeeLabelUserFilter {
  "标签用户姓名（模糊）"
  employeeName_like: String
  labelId: Int
}

"GhEquipmentFilter"
input GhEquipmentFilter {
  "类型编号"
  moduleCode: String
  "器材姓名"
  name: String
  "器材状态"
  status: Int
}

"GhEquipmentInput"
input GhEquipmentInput {
  coverImage: [FileObject]
  creator: String
  name: String
  status: Int
  typeId: Int
  updator: String
}

"GhEquipmentReserveFilter"
input GhEquipmentReserveFilter {
  "预定人姓名"
  employeeName: String
  mobile: String
}

"GhEquipmentReserveInput"
input GhEquipmentReserveInput {
  "预定结束时间"
  endTime: Date
  "设备id"
  equipmentId: Int
  "预订人姓名"
  equipmentName: String
  "预定手机号"
  mobile: String
  "备注"
  remarks: String
  "预定日期"
  reserveDate: Date
  "预定开始时间"
  startTime: Date
  "预定状态"
  status: Int
}

"GhEquipmentTypeFilter"
input GhEquipmentTypeFilter {
  "类型编号"
  moduleCode: String
  "器材类型姓名"
  name: String
  "父级id"
  parent: Int
  "器材类型状态"
  status: Int
}

"GhEquipmentTypeInput"
input GhEquipmentTypeInput {
  "类型编号"
  moduleCode: String
  "器材类型名称"
  name: String
  "类型父级id"
  parent: Int
  "排序"
  sort: Int
  "器材状态"
  status: Int
}

input GrantPermissionByUserInput {
  permission: String
  resource: String
}

input GraphQLArgumentDefinitionInput {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "名称id 例如: Query.users.page"
  id: String
  "名称 例如: page"
  name: String
  "返回类型"
  type: GraphQLArgumentDefinitionTypeInput
}

input GraphQLArgumentDefinitionTypeInput {
  kind: ID
  repeated: Boolean
  required: Boolean
}

input GraphQLDelegateDataLoaderInput {
  "参数"
  loadKey: String
  "方法"
  query: String
}

input GraphQLDelegateInput {
  id: ID
  name: String
  rule: GraphQLDelegateRuleInput
  service: ID
  type: GraphQLDelegateType
}

input GraphQLDelegateRuleInput {
  "例如 id = obj.employee.id 属性赋值"
  args: [String]
  "合并加载"
  dataLoader: GraphQLDelegateDataLoaderInput
  "请求方式"
  method: RestfulMethod
  "请求参数"
  parameter: JSON
  "Resultful的请求路径"
  path: String
  "例如 Query.employee 请求接口"
  query: String
  "例如 !obj.employee 委托字段"
  reject: [String]
}

input GraphQLDirectiveDefinitionInput {
  formats: [GraphQLFormatsDefinitionInput]
  frontIntercept: ID
  id: String
  name: String
  overrides: [String]
  params: [GraphQLParamsDefinitionInput]
  postIntercept: ID
}

input GraphQLDirectiveFieldDefinitionInput {
  name: String
  params: [GraphQLParamFieldDefinitionInput]
}

input GraphQLDirectiveFilter {
  "名称"
  name: String
}

input GraphQLEnumerationInput {
  "是否弃用"
  deprecated: Boolean
  "描述"
  description: String
  "例如 AutographEnum.employee 枚举id"
  id: String
  "例如 employee 名称"
  name: String
  title: String
}

input GraphQLFieldDefinitionCreateInput {
  "所属分类"
  apiType: ID
  "参数"
  arguments: [GraphQLArgumentDefinitionInput]
  "默认值"
  defaultValue: String
  "委托 / 代理"
  delegate: [ID]
  "不推荐使用 默认false"
  deprecated: Boolean
  "描述"
  description: String
  "指令"
  directives: [GraphQLDirectiveFieldDefinitionInput]
  "图标"
  icon: String
  "名称id 例如: Employee.id"
  id: String!
  "英文名 例如: id"
  name: String!
  "标记"
  tags: [String]
  "显示名称(中文)"
  title: String
  "返回类型 / 字段类型"
  type: GraphQLFieldReturnTypeInput!
}

input GraphQLFieldDefinitionUpdateInput {
  "所属类型"
  apiType: ID
  "参数"
  arguments: [GraphQLArgumentDefinitionInput]
  "默认值"
  defaultValue: String
  "委托 / 代理"
  delegate: [ID]
  "不推荐使用 默认false"
  deprecated: Boolean
  "描述"
  description: String
  "指令"
  directives: [GraphQLDirectiveFieldDefinitionInput]
  "图标"
  icon: String
  "标记"
  tags: [String]
  "显示名称(中文)"
  title: String
  "返回类型 / 字段类型"
  type: GraphQLFieldReturnTypeInput!
}

input GraphQLFieldReturnTypeInput {
  kind: String!
  repeated: Boolean
  required: Boolean
}

input GraphQLFormatsDefinitionInput {
  description: String
  name: String
  type: String
}

input GraphQLParamFieldDefinitionInput {
  name: String
  type: GraphQLParamFieldDefinitionTypeInput
  value: String
}

input GraphQLParamFieldDefinitionTypeInput {
  default: String
  enum: GraphQLParamFieldDefinitionTypeEnum
  type: String
}

input GraphQLParamsDefinitionInput {
  name: String
  value: String
}

input GraphQLTypeDefinitionCreateInput {
  "描述"
  description: String
  "枚举类型的值"
  enumerations: [GraphQLEnumerationInput]
  "方案"
  graphQLSchema: ID
  "继承的类型"
  interfaces: [ID]
  "类型"
  kind: GraphQLKind
  "名称"
  name: String
  "显示名称中文"
  title: String
  "联合类型"
  types: [ID]
}

input GraphQLTypeDefinitionFilter {
  id_notIn: [ID]
  kind: GraphQLKind
}

input GraphQLTypeDefinitionUpdateInput {
  "描述"
  description: String
  "枚举类型的值"
  enumerations: [GraphQLEnumerationInput]
  "继承的类型"
  interfaces: [ID]
  "类型"
  kind: GraphQLKind
  "显示名称中文"
  title: String
  "联合类型"
  types: [ID]
}

input GraphqlApiInput {
  "接口名称"
  interface: ID
  "请求方式"
  method: String
}

"已读未读过滤"
input IDAndStatusFilter {
  "会议实体id"
  entityId: ID!
  "实体类型"
  entityType: String!
  "状态 已读read 未读unread"
  status: String!
}

input IDAndTypeFilter {
  "ID"
  entityId: ID!
  "类型"
  entityType: String!
}

input IconConfigurateInput {
  "颜色"
  color: String
  "主题"
  theme: String
  "类型"
  type: String
}

input ImportArgumentDetailFilter {
  "单位"
  budgetHospital_in: [String]
  "类别"
  budgetType_eq: String
  "年度"
  budgetYear: String
  "年度模糊查询"
  budgetYear_like: String
  "项目名称"
  scope: String
  "状态 1进行中 2驳回 3完成"
  state: String
  "用户id"
  userId: String
}

input ImportArgumentFilter {
  "单位"
  budgetHospital_in: [String]
  "类别"
  budgetType: String
  "类别"
  budgetType_eq: String
  "年度"
  budgetYear: String
  "年度模糊查询"
  budgetYear_like: String
  "查询标志，0查询全部，1查询待处理，2查询已处理"
  flag: Int
  "金额"
  projecMoney_ge: Int
  "项目名称"
  scope: String
  "状态"
  status: ImportArg
  "审批状态(属于当前关联步骤的都是审批中的状态，所以以步骤为筛选条件)"
  step: Int
}

input ImportArgumentInput {
  "申请文件文号"
  applySn: String
  "申请文件名称"
  applyfile: String
  "申请单位"
  organization: String
  "申请理由"
  reason: String
  "自筹资金"
  selfMoney: Float
  "申请人联系方式"
  tel: String
  "类别"
  type: String
}

input IndexTypeInput {
  "主键id"
  id: ID
  "测评项"
  indices: [EvaluationIndexInput]
  "测评项类型名称"
  name: String!
}

input InformationGetMobileListFilter {
  "信息标题"
  title_like: String
  "用户ID"
  userId: String!
}

input InputID {
  id: ID!
}

input IntegralApplyFilter {
  name: String
}

input IntegralApplyInput {
  description: String
  empId: ID
  "文件"
  files: [FileObject]
  id: ID
  integralRegulationId: ID
  "未审核unchecked     同意agreed     拒绝refused"
  status: String
}

input IntegralCategoryCreateInput {
  "创建日期"
  createdAt: Date
  name: String
  "修改时间"
  updatedAt: Date
}

input IntegralCategoryFilter {
  name: String
}

input IntegralCategoryInput {
  id: ID
  name: String
}

input IntegralCategoryUpdateInput {
  "创建日期"
  createdAt: Date
  name: String
  "修改时间"
  updatedAt: Date
}

input IntegralEmployeeFilter {
  department: String
  formId: ID
  name: String
}

input IntegralEmployeeRuleFilter {
  integralEmployeeId: ID
}

input IntegralEmployeeRuleInput {
  id: ID
  integralRegulation: IntegralRegulationInput
  score: Int
  times: Int
}

input IntegralExamineFormFilter {
  name: String
  year: Int
}

input IntegralExamineFormInput {
  attend: [String]
  baseScore: Int
  id: ID
  name: String
  total: Int
  year: Int
}

input IntegralRegulationCreateInput {
  "积分类别"
  IntegralCategory: ID
  "描述"
  description: String
  "积分类别"
  integralCategory: ID
  "得分下限"
  lowerLimit: Int
  "规则名称"
  name: String
  "单次得分"
  onceScore: Int
  "次数达到上限时"
  overFlow: OverFlow
  "记分方式"
  scoreWay: ScoreWay
  "获取次数上限"
  timeLimit: Int
  "得分上限"
  upperLimit: Int
}

input IntegralRegulationFilter {
  "描述"
  description: String
  "积分类别"
  integralCategory: String
  "得分下限"
  lowerLimit: Int
  "规则名称"
  name: String
  "单次得分"
  onceScore: Int
  "次数达到上限时"
  overFlow: OverFlow
  "记分方式"
  scoreWay: ScoreWay
  "获取次数上限"
  timeLimit: Int
  "得分上限"
  upperLimit: Int
}

input IntegralRegulationInput {
  "描述"
  description: String
  id: ID
  "积分类别"
  integralCategory: IntegralCategoryInput
  "得分下限"
  lowerLimit: Int
  "规则名称"
  name: String
  "单次得分"
  onceScore: Int
  "次数达到上限时"
  overFlow: OverFlow
  "记分方式"
  scoreWay: ScoreWay
  "获取次数上限"
  timeLimit: Int
  "得分上限"
  upperLimit: Int
}

input IntegralRegulationUpdateInput {
  "积分类别"
  IntegralCategory: ID
  "描述"
  description: String
  "积分类别"
  integralCategory: ID
  "得分下限"
  lowerLimit: Int
  "规则名称"
  name: String
  "单次得分"
  onceScore: Int
  "次数达到上限时"
  overFlow: OverFlow
  "记分方式"
  scoreWay: ScoreWay
  "获取次数上限"
  timeLimit: Int
  "得分上限"
  upperLimit: Int
}

input InteractionFilter {
  "标题"
  title: String
}

input InteractionInput {
  "可查看人"
  scopes: [String]
  "标题"
  title: String!
  "链接"
  url: String
}

input IssueAllocationRuleInput {
  "分级类别"
  code: IssueAllocationRuleEnum!
  "规则描述"
  description: String!
  "是否启用"
  enabled: Boolean!
  "规则条件"
  issueCondition: ID!
  "选择人员类型"
  selectionScope: String!
}

input IssueAppraisalRuleInput {
  "提醒内容详情"
  appraisalRuleInfo: ID
  "是否启用"
  enabled: Boolean
  "状态ID"
  issueStatus: ID
  "间隔时长"
  times: Int
}

"任务注释"
input IssueCommentInput {
  "附件"
  attachments: [FileObject]
  "注释"
  content: String
  "用户ID"
  uid: ID
}

input IssueFalutDescriptionFilter {
  "类型id"
  type_eq: ID
}

input IssueFaultDescriptionInput {
  "描述"
  description: String!
  "是否启用"
  enabled: Boolean
  issueType: ID!
}

input IssueFieldValue {
  name: String
  value: String
}

"任务条件筛选"
input IssueFilter {
  "经办人"
  assignee_eq: Int
  "描述概要模糊"
  descriptionOrSummary_contains: String
  "任务优先级"
  priority_in: [ID]
  "所属项目"
  projectId_eq: ID
  "发起人部门查询"
  reporter_departments_in: String
  "发起人查询"
  reporter_eq: String
  "工单编号"
  sn_contains: String
  "开始时间和结束时间  中间用~符号分隔"
  startAndEndTime: String
  "任务状态"
  status_in: [ID]
  "分配方式"
  style_eq: String
  "概要模糊"
  summary_contains: String
  "任务类型"
  type_eq: String
}

"任务"
input IssueInput {
  "地址"
  address: String
  "经办人"
  assignee: ID
  "附件"
  attachments: [FileObject]
  "描述"
  description: String
  "关联知识库集合"
  knowledges: [KnowledgeIssueInput]
  "任务优先级"
  priority: ID
  "任务优先级为紧急时，填写紧急情况备注信息"
  priorityUrgentRemark: String
  "进度"
  progress: Int
  "项目id(预留)"
  project: ID
  "备注"
  remarks: String
  "维修图片"
  repairFiles: [FileObject]
  "发起人"
  reporter: ID!
  "要求完成时间"
  requestCompletionTime: String
  "影响范围"
  scope: IssueScopeEnum
  "概要"
  summary: String
  "问题类型"
  type: ID!
}

input IssueMessageRuleInput {
  "消息规则内容"
  content: String
  "信息规则描述"
  description: String
  "是否开启"
  enabled: Boolean
  "是否循环提醒"
  messageLoop: Boolean
  "提醒人类型"
  messageRuleEum: MessageRuleEum
  "消息规则名称"
  name: String
  "循环提醒间隔时长"
  time: ID
}

input IssuePriorityFilter {
  "名称模糊查询"
  nameContains: String
}

"优先级"
input IssuePriorityInput {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean!
  "任务优先级icon"
  icon: String
  "优先级名称"
  name: String!
  "优先级排序"
  sort: Int
}

"项目关联"
input IssueProjectLinkInput {
  "关联项目使用的ID"
  linkId: String!
  "关联项目类型"
  type: IssueProjectLinkType
}

"页面"
input IssueScreenInput {
  "描述"
  description: String
  "名称"
  name: String!
  "标题"
  title: String
}

"状态"
input IssueStateInput {
  "阶段"
  category: IssueStatusCategory
  "描述"
  description: String
  "是否启用"
  enabled: Boolean!
  "名称"
  name: String!
  "排序"
  sort: Int
}

input IssueStatusFilter {
  "名称模糊查询"
  nameContains: String
}

input IssueTypeCategoryInput {
  "任务类型描述"
  description: String
  "是否启用"
  enabled: Boolean
  "任务类型名称"
  name: String
  parent: ID
}

"创建任务类型"
input IssueTypeInput {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "名称"
  name: String!
  "父对象ID"
  parent: ID
}

"任务更新参数"
input IssueUpdateInput {
  "经办人"
  assignee: ID
  "附件"
  attachments: [FileObject]
  "描述"
  description: String
  "关联知识库集合"
  knowledges: [KnowledgeIssueInput]
  "任务优先级"
  priority: ID
  "进度"
  progress: Int
  "项目id(预留)"
  project: ID
  "维修图片"
  repairFiles: [FileObject]
  "发起人"
  reporter: ID
  "概要"
  summary: String
  "问题类型"
  type: ID
}

"任务日志"
input IssueWorkLogInput {
  "附件"
  attachments: [FileObject]
  "日志内容"
  content: String!
  "用户ID"
  uid: ID!
}

"创建工作流"
input IssueWorkflowInput {
  "描述"
  description: String
  "名称"
  name: String!
}

"编辑工作流方案"
input IssueWorkflowSchemeCreateInput {
  "方案描述"
  description: String!
  "方案名称"
  name: String!
}

"工作流步骤操作"
input IssueWorkflowStepTransitionCreateInput {
  "描述"
  description: String
  "目标步骤"
  destination: ID!
  "操作名称"
  name: String!
  "对应的界面"
  view: ID!
}

input JobCreateInput {
  "职务描述信息"
  description: String
  "名称"
  name: String
}

input JobInput {
  id: ID
  name: String
}

input JobUpdateInput {
  "职务描述信息"
  description: String
  "名称"
  name: String
}

input JoinconditionInput {
  attend_state: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  note: String
  orgid: String
  referred_person: String
  sign_state: ENUM_JOINCONDITION_SIGN_STATE
  sign_time: String
  transfer_person: String
  user: String
}

input KeyWordQueryFilter {
  "预算组织"
  budgetHospital_eq: String
  "预算编号模糊查询"
  budgetSn_like: String
  "预算类型查询"
  budgetType_eq: String
  "预算年度查询"
  budgetYear_eq: String
  "预算拆分编号模糊查询"
  projectSn_like: String
}

input KnowledgeCommentInput {
  "评论内容"
  content: String!
  "知识id"
  knowledge: ID
}

input KnowledgeFilter {
  "关键字"
  keyword: String
}

input KnowledgeInput {
  "问题描述"
  problemDesc: String
  "解决方法"
  solveMethod: String
  "标题"
  title: String!
  "类型"
  types: [ID]!
}

input KnowledgeIssueInput {
  "知识id"
  id: ID
}

input KnowledgeTypeInput {
  "分类名称"
  name: String
  "父级分类"
  parent: ID
}

input LearnRecordFilter {
  "召集人"
  convener: ID
  "发起人"
  creator: String
  "结束时间"
  endTime: String
  "主题名称"
  name: String
  "开始时间"
  startTime: String
  "班组ID"
  team: ID
  "是否上传"
  uploadState: Boolean
}

input LearnRecordInput {
  "出席率"
  attendance: Float
  "学习记录文件"
  files: [FileObject]
  "学习主题"
  learnTheme: ID!
  "签到成员"
  signMember: [ID]
  "班组"
  team: ID!
}

input LearnThemeFilter {
  "主题名称"
  name: String
}

input LearnThemeInput {
  "创建人"
  creator: String
  "相关附件"
  files: [FileObject]
  "学习要求"
  learnRequirement: String
  "学习时间"
  learnTime: String
  "主题名称"
  name: String
  "消息提醒"
  remind: Boolean
}

input LearnerAndTypeInput {
  learner: ID
  learnerType: LearnerType
}

input LearnerFilter {
  "部门"
  department: ID
  "用户ID"
  employee: ID
  "是否完成"
  learningProgress: Int
  "姓名"
  name: String
  "课程类型"
  type: LearnerType
}

input LearnerInput {
  "课程ID"
  course: ID
  "用户ID"
  employee: ID
  """
        id:ID
  学习人类型
  """
  type: LearnerType
}

input LeavingFilter {
  "发起人"
  originator: String
  "接受人"
  receiver: String
  sendTimeBet: DateBetween
  sendTime_bet: DateBetween
  """
    如果查自己的则接收人为空
  如果查别人的发起人为空
  查询类型
  """
  type: FindLeavingEnum!
}

input LeavingInput {
  context: String
  originator: String!
  receiver: String!
  title: String!
  "如果类型为部门则接收人写部门id"
  type: LeavingTypeEnum!
}

input LessonInput {
  "章节附件"
  attachments: [FileObject]
  "文章类型"
  category: ArticleCategory!
  "栏目"
  channels: [ID]
  "内容"
  content: String
  "课程ID"
  course: ID!
  "章节类型"
  lessonType: LessonType!
  "组织"
  organization: String!
  "标题"
  title: String
}

input LessonRecordFilter {
  course: ID
  employee: ID!
  lessonScheduleType: String
  type: LearnerType
}

input LogTelCountFilter {
  "结束时间"
  endDate: String
  "开始时间"
  startDate: String
}

"登录绑定信息"
input LoginOptions {
  platform: ID!
  snser: String!
}

"当前登录人查看视频权限输入条件"
input LookAuthorityFilter {
  "人员id"
  employee: ID
  "会议id"
  meeting: ID
  "议程id"
  stage: ID
}

input MSDatabaseConfigInput {
  "字符类型"
  character: String
  "排序规则"
  collate: String
  "数据库名称"
  databaseName: String
  "数据库类型"
  databaseType: DataBaseType
  "是否删除已存在数据库"
  isExits: Boolean
}

"项目代码管理"
input MangeCreateInput {
  "地址"
  address: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "开发语言"
  developmentLanguage: String
  "修改人"
  modifier: String
  "名称"
  name: String
  "负责人"
  personCharge: String
  "产品"
  product: String
  "项目类型"
  projectType: ProjectType
  "修改日期"
  updatedAt: String
  "修改人"
  updator: String
}

"项目代码管理过滤对象"
input MangeFilter {
  ProjectType: String
  address: String
  developmentLanguage: String
  name: String
  person_charge: String
  product: String
}

"项目代码管理"
input MangeUpdateInput {
  "地址"
  address: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "开发语言"
  developmentLanguage: String
  "修改人"
  modifier: String
  "名称"
  name: String
  "负责人"
  personCharge: String
  "产品"
  product: String
  "项目类型"
  projectType: ProjectType
  "修改日期"
  updatedAt: String
  "修改人"
  updator: String
}

"输入会议议程"
input MeetingAgendaInput {
  "会议结束时间"
  endDate: Date
  "主键id"
  id: ID
  "是否默认"
  isDefault: Boolean
  "会议id"
  meetingId: ID
  "步骤id"
  stageId: ID
  "步骤name"
  stageName: ID
  "会议开始时间"
  startDate: Date
}

input MeetingCondition {
  meetingType: String
  meeting_start_time: String
  name: String
}

"条件过滤对象"
input MeetingDictionaryFilter {
  "会议时间"
  meetingDate: Date
  "会议名称"
  name: String
  "用户id"
  orgPerson: ID
  "项目Id"
  project: ID
}

input MeetingDocumentFilter {
  "会议id"
  meeting: ID
  "人员id"
  person: ID
  "文档标题"
  title: String
}

input MeetingDocumentInput {
  "会议附件"
  files: [FileObject]
  "会议id"
  meeting: ID
  "人员id"
  persons: [ID]
}

input MeetingEvaluationDetailInput {
  "测试指标"
  index: ID
  "指标测评结果（满意：SATISFIED  较满意：GOOD  基本满意：BASICALLY_SATISFIED 不满意：UNSATISFACTORY）"
  result: EvaluationStatus
}

input MeetingEvaluationFilter {
  "测评人"
  evaluationPerson: ID
  "会议id"
  meeting: ID!
}

input MeetingEvaluationInput {
  "测评日期"
  evaluationDate: String!
  "测评项"
  evaluationDetails: [MeetingEvaluationDetailInput]
  "测评人"
  evaluationPerson: ID!
  "会议id"
  meeting: ID!
  "问卷id"
  questionnaire: ID!
}

input MeetingFieldValueInput {
  "属性名称"
  name: String
  "字段类型"
  type: String
  "属性值"
  value: String
}

input MeetingFilter {
  state: MeetingState
}

input MeetingGroupInput {
  "小组组长"
  employee: ID!
  "小组成员"
  employees: [ID]!
  "小组名称"
  name: String!
}

input MeetingInput {
  apply: Boolean
  apply_number_limit: Int
  attendMeetings: [EntityuserInput]
  budget_amount: Int
  cancel_reason: String
  checkInPersons: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  createdepartment: String
  creator: String
  cycle_meeting: Boolean
  describe: String
  end_date: DateTime
  focus: String
  icon: String
  instruction: String
  interactive_control: JSON
  is_delete: Boolean
  is_sys: String
  issuer: String
  meetingTypes: [String]
  meeting_end_time: DateTime
  meeting_place: String
  meeting_start_time: DateTime
  meetingnotices: [ID]
  meetingreserves: [ID]
  meetingtypes: [ID]
  messagePush: [String]
  message_push: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  need_meeting: Boolean
  orgid: String
  presenters: [EntityuserInput]
  qr_code: String
  relateAccessorys: [RelatedaccessoryInput]
  remark: String
  remind: String
  remindSpecificTime: DateTime
  repeat_period: String
  repeat_type: String
  replace_participant: Boolean
  service: String
  signSpecificEndTime: DateTime
  signSpecificStartTime: DateTime
  sign_time_require: String
  sign_way: String
  summaryPersons: [EntityuserInput]
}

input MeetingPersonInput {
  "用户id"
  userId: Int
}

"会议录播过滤条件"
input MeetingRecordedFilter {
  "所属会议"
  meetingId: ID
  "会议名称"
  meetingName: String
  "状态"
  status: MeetingStauts
  "视频标题"
  videoTitle: String
}

"会议录播输入选项"
input MeetingRecordedInput {
  "主键id"
  id: ID
  "可查看人员"
  lookAuthority: [String]
  "会议id"
  meeting: Int
  "议程id"
  stageId: Int
  "上传者"
  uploader: Int
  "视频id"
  videoPath: String
  "标题"
  videoTitle: String
}

input MeetingRoleFilter {
  "是否启用(true/false)"
  enabled: Boolean
  "角色名称"
  name: String
}

input MeetingRoleInput {
  "角色对应的权限"
  auths: [ID]
  "角色代码"
  code: String
  "是否启用（true/false 默认为true）"
  enabled: Boolean
  "角色名称"
  name: String
  "组织id"
  orgId: ID
  "角色描述"
  roleDesc: String
}

input MeetingTopicFilter {
  "议题id"
  id: ID
  "会议id"
  meetingId: ID
  "阶段id集合"
  stages: [ID]
}

input MeetingTopicInput {
  "附件信息"
  files: [FileObject]
  "是否允许删除（true/false）"
  isDelete: Boolean
  "会议id"
  meeting: ID!
  "议题名称"
  name: String!
  "阶段id"
  stage: ID
  "步骤id"
  step: ID
  "是否需要表决投票"
  voteEnabled: Boolean!
}

input MeetingTypeFilter {
  "用户"
  organizationId: String
}

input MeetingTypeSecurityInput {
  "描述"
  description: String
  "会议类型名"
  name: String
  "组织机构id"
  organizationId: String
  "上级会议类型"
  pType: String
  "权限范围"
  scopes: [String]
  "可发起人"
  sponsor: String
  "会议类型code"
  type: String
}

input MeetingnoticeInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  dispose_way: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meeting: ID
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  notice_create_time: DateTime
  orgid: String
  user: String
}

input MeetingreserveInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meeting: ID
  meetingroom: ID
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  reserve_time: DateTime
  reserve_type: String
}

input MeetingroomInput {
  applicants: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  device_configuration: JSON
  head_portrait: String
  icon: String
  is_delete: Boolean
  is_sys: String
  max_seat_number: Int
  meetingreserves: [ID]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  open_end_time: DateTime
  open_start_time: DateTime
  orgid: String
  place: String
  seat_number: Int
  state: String
  type: String
}

input MeetingtypeInput {
  meeting: ID
  meetingIsType: String
}

input MeetingvoteInput {
  anonymity: Boolean
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  end_time: DateTime
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meetingvotedetails: [ID]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  optionNumber: JSON
  options: [VoteoptionInput]
  orgid: String
  pollIssuer: String
  start_time: DateTime
  vote: String
  vote_account: String
  vote_type: String
  waiver: Boolean
}

input MeetingvotedetailInput {
  meetingvote: ID
  user: String
  user_type: String
  vote_state: ENUM_MEETINGVOTEDETAIL_VOTE_STATE
  voteoptions: [ID]
}

input MessageCenterInput {
  "消息内容"
  content: String
  "消息格式"
  format: MessageFormat
  "消息标题"
  title: String
}

input MessageInput {
  "提醒内容"
  content: String!
  "会议id"
  meeting: ID
  "发送范围如：主席团、正式代表等"
  range: String
  "提醒范围"
  remindScope: RemindScope
  "发送方式如钉钉、手机、邮件等（多个时以逗号隔开）"
  sendWays: [SendWay]!
}

input ModelCreateInput {
  "描述"
  description: String
  "显示名称"
  displayName: String
  "业务域"
  domain: ID
  "字段特征"
  features: [String]
  "名称"
  name: String
}

input ModelDataExpansionCreateInput {
  dataExpansionInterfaces: DataExpansionInterfaceInput
  "实体ID"
  model: ID
  "名称"
  name: String
  type: InterfaceTypeEnum
}

input ModelDataExpansionUpdateInput {
  dataExpansionInterfaces: DataExpansionInterfaceInput
  "名称"
  name: String
  type: InterfaceTypeEnum
}

input ModelFieldCreateInput {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "存储值为列表，而不是单个值"
  isList: Boolean
  "必填"
  isRequired: Boolean
  "唯一"
  isUnique: Boolean
  "业务实体id"
  model: ID
  "名称"
  name: String
  "数据库设置"
  options: ModelFieldOptionsInput
}

input ModelFieldFilterCreateInput {
  "连接符"
  connector: String
  "字段名称"
  field: String
  "sql语句"
  filterSql: String
  "是否多条件"
  isMulti: Boolean
  "实体ID"
  model: ID
}

input ModelFieldFilterUpdateInput {
  "连接符"
  connector: String
  "字段名称"
  field: String
  "sql语句"
  filterSql: String
  "是否多条件"
  isMulti: Boolean
}

input ModelFieldOptionsInput {
  "字符长度"
  characterMaxLength: Int
  "数据库字段名"
  databaseColumnName: String
  "字典"
  dictionary: String
  "枚举"
  enumeration: String
  "Number 类型与日期类型是有效"
  format: NumberFormat
  "是否级联保存"
  isCascadeSave: Boolean
  "是否级联更新"
  isCascadeUpdate: Boolean
  "是否生成创建字段"
  isCreateField: Boolean
  "是否生成返回字段"
  isTypeField: Boolean
  "是否生成修改时字段"
  isUpdateField: Boolean
  "中间实体名称"
  middleModel: String
  "显示名称"
  relationDisplayName: String
  "字段名称"
  relationFieldName: String
  "实体名称"
  relationModel: String
  "关系类型（一对一、一对多、多对一）"
  relationType: RelationType
}

input ModelFieldUpdateInput {
  "默认值"
  defaultValue: String
  "描述"
  description: String
  "显示名称"
  displayName: String
  "字段类型"
  fieldType: String
  "存储值为列表，而不是单个值"
  isList: Boolean
  "必填"
  isRequired: Boolean
  "唯一"
  isUnique: Boolean
  "名称"
  name: String
  "实体字段设置"
  options: ModelFieldOptionsInput
}

input ModelFiledTypeFilter {
  "类型ID 如：STRING、DATE等"
  notId: String
}

input ModelFilter {
  category: String
  "显示名称"
  displayName: String
  "名称"
  name: String
  type: Int
}

input ModelInterfaceCreateInput {
  "实体ID"
  model: ID
  modelInterface: ModelInterfaceInput
  "名称"
  name: String
  type: InterfaceTypeEnum
}

input ModelInterfaceInput {
  executeStatement: String
  id: ID
  interfaceName: String
  label: String
  type: InterfaceType
}

input ModelInterfaceUpdateInput {
  modelInterface: ModelInterfaceInput
  "名称"
  name: String
  type: InterfaceTypeEnum
}

input ModelOptionInput {
  "数据表名称"
  databaseTableName: String
}

input ModelUpInput {
  "数据源"
  datasource: String!
  "结束指针"
  endCommit: String
  "开始指针"
  startCommit: String
  "标签名称"
  tagName: String!
}

input ModelUpdateInput {
  "描述"
  description: String
  "显示名称"
  displayName: String
  "业务域"
  domain: ID
  "字段特征"
  features: [String]
  "名称"
  name: String
  "实体配置"
  option: ModelOptionInput
}

input MotionFilter {
  "提案人"
  motionPerson: ID
  "查询类型"
  or: [MotionFilter]
  "是否公开（true/false）"
  publiced: Boolean
  "附议人"
  seconder: ID
  "提案状态"
  status: MotionStatus
  "提案标题"
  title: String
  "(代办/已办)"
  transactStatus: TransactStatus
  "可以查看人"
  viewPeople: ID
}

input MotionFilterAll {
  "提案人"
  motionPerson: ID
  "查询类型"
  or: [MotionFilterAll]
  "是否公开（true/false）"
  publiced: Boolean
  "附议人"
  seconder: ID
  "提案状态"
  status: MotionStatus
  "提案标题"
  title: String
  "可以查看人"
  viewPeople: ID
}

input MotionInput {
  "科室"
  department: ID
  "对应的查看人"
  employees: [ID]
  "提案Id"
  id: ID
  "是否隐藏提案人(true/false)"
  isHideMotionPerson: Boolean
  "是否隐藏附议人(true/false)"
  isHideSeconder: Boolean
  "提案日期"
  motionDate: Date
  "提案具体意见"
  motionOpinion: String
  "提案人"
  motionPerson: ID!
  "提案编号"
  number: String
  "是否公开（true/false）"
  publiced: Boolean
  "提案原由"
  reason: String
  "要求复议人数"
  seconderNumber: Int
  "状态"
  status: MotionStatus
  "流程节点"
  step: Int
  "提案标题"
  title: String
  "提案类别"
  type: String
}

input MotionTypeFilter {
  "是否启用"
  enabled: Boolean
  "类型名称"
  name: String
}

input MotionTypeInput {
  "是否启用(true/false)"
  enabled: Boolean
  "类型名称"
  name: String
  "要求复议人数"
  number: Int
}

input NewEntityUserFilter {
  "身份"
  identities: [Identity]
  "用户"
  user: ID
}

input NewMeetingFilter {
  "所属部门"
  departments: [ID]
  "会议结束时间"
  endTime: String
  "是否有会议纪要"
  haveSummary: Boolean
  "是否参与,需要传who参数"
  isAttend: Boolean
  "会议名称"
  name: String
  "会议开始时间"
  startTime: String
  "会议状态"
  status: String
  "会议类型"
  type: [String]
  "谁的会议"
  who: ID
}

input NoticeRequest {
  "用户组织串"
  orgIdString: String!
  "用户ID"
  userId: String!
}

input NoticeTemplateFilter {
  id: ID
  type: NoticeType
}

input NoticeTemplateInput {
  code: String
  content: String
  name: String
  type: NoticeType
}

input OAEmployeeFilter {
  ids: [ID]
}

input OASendEZFlowRequestInput {
  activity: EZWorkflowActivityInput
  "O业务主键id"
  businessKey: String
  "办理提示"
  dealTipsContent: String
  "经过网关个数 经过网关个数"
  gateNum: String
  "流程模型串"
  moduleId: String
  "是否需要邮件提醒"
  needMailRemind: String
  "流程id"
  processId: String!
}

input OASendFlowRequestInput {
  "办理提示"
  dealTipsContent: String
  "邮件提醒（0，1）"
  needMailRemind: String
  oaWorkflow: OAWorkflowInput
  "办理优先级"
  priority: String
}

input OAWorkflowInput {
  "下一活动办理人id"
  activityId: String!
  """
    流程PC打开的取消页面地址
  如果是自定义表单流程可以为空
  """
  cancelHref: String
  """
    流程PC打开的主页面地址
  如果是自定义表单流程可以为空
  """
  mainLinkFile: String
  "流程类型Id"
  processId: String!
  "程办理人名称（为多个时用,隔开）"
  transactorNames: String
  "选择办理人id（为多个时用,隔开）"
  transactors: String!
}

"输入积分规则"
input OperatingScoreInput {
  code: String
  enable: Boolean
  id: ID
  name: String
  score: Int
  type: String
}

input OpinionCollectCreateInput {
  "标识"
  code: String
  "内容"
  content: String
  "创建时间"
  createdAt: Date
  "组织•员工"
  employee: ID
  "文件"
  file: String
  "图片"
  img: String
  "意见类型"
  opinionType: ID
  "回复内容"
  replyContent: String
  "回复文件"
  replyFile: String
  "回复图片"
  replyImg: String
  "意见编号"
  sn: String
  "是否未回复"
  status: Boolean
  "标题"
  title: String
  "修改日期"
  updatedAt: Date
}

input OpinionCollectFilter {
  "标识"
  code: String
  "姓名id"
  employeeId: String
  "姓名"
  employeeName: String
  file: String
  img: String
  "意见类型"
  opinionType: ID
  replyFile: String
  replyImg: String
  "意见编号"
  sn: String
  "是否未回复"
  status: String
  "时间范围"
  time: String
  "标题"
  title: String
}

input OpinionCollectUpdateInput {
  "标识"
  code: String
  "内容"
  content: String
  "创建时间"
  createdAt: Date
  "组织•员工"
  employee: ID
  "文件"
  file: String
  "图片"
  img: String
  "意见类型"
  opinionType: ID
  "回复内容"
  replyContent: String
  "回复文件"
  replyFile: String
  "回复图片"
  replyImg: String
  "意见编号"
  sn: String
  "是否未回复"
  status: Boolean
  "标题"
  title: String
  "修改日期"
  updatedAt: Date
}

"过滤"
input OpinionCollectionFilter {
  employee: String
  group: ID
  notMyself: ID
  title: String
  uid: ID
}

"意见征集"
input OpinionCollectionInput {
  employee: ID
  opinion: String
  paths: [FileObject]
  title: String
}

input OpinionInput {
  "受理意见"
  acceptTheOpinion: String
  "审批意见"
  approvalOpinion: ApprovalOpinion
  "审批角色Id"
  approveUserId: [ID]
  "主键"
  id: ID
  "提案id"
  motionId: ID
  "提案落实"
  motionPracticable: MotionPracticable
  "满意度"
  motionSatisfaction: MotionSatisfaction
  "状态"
  motionStatus: MotionStatus
  "下一节点"
  nextStep: Int
  "签署意见"
  signingOpinions: String
  "阶段"
  stage: Int
  "流程节点"
  step: Int
}

input OpinionTypeCreateInput {
  "标识"
  code: String
  "意见类型名称"
  name: String
  "状态"
  status: Boolean
}

input OpinionTypeFilter {
  "标识"
  code: String
  "名称"
  name: String
  "状态"
  status: String
}

input OpinionTypeUpdateInput {
  "标识"
  code: String
  "意见类型名称"
  name: String
  "状态"
  status: Boolean
}

input OptionInput {
  "选项ID"
  id: ID
  "选项"
  name: String
}

"人员表"
input OrgEmployeeCreateInput {
  "用户ID"
  UserId: String
  "头像"
  avatar: String
  "生日"
  birthday: String
  createTime: String
  creator: String
  "邮件"
  email: String
  "英文名称"
  englishname: String
  "移动电话"
  mobile: String
  modifier: String
  modifyTime: String
  "组织ID"
  orgId: String
  orgid: String
  position: String
  "性别"
  sex: String
  signatureimgname: String
  "简称"
  sn: String
  "状态"
  status: String
  "员工标签"
  tags: String
  "电话"
  tel: String
  userordercode: String
  usersimplename: String
  usersuperbegin: String
  usersuperend: String
  zfBirthday_45fec00554: String
  zfBirthday_8046cd826d: String
}

"人员表"
input OrgEmployeeUpdateInput {
  "用户ID"
  UserId: String
  "头像"
  avatar: String
  "生日"
  birthday: String
  createTime: String
  creator: String
  "邮件"
  email: String
  "英文名称"
  englishname: String
  "移动电话"
  mobile: String
  modifier: String
  modifyTime: String
  "组织ID"
  orgId: String
  orgid: String
  position: String
  "性别"
  sex: String
  signatureimgname: String
  "简称"
  sn: String
  "状态"
  status: String
  "员工标签"
  tags: String
  "电话"
  tel: String
  userordercode: String
  usersimplename: String
  usersuperbegin: String
  usersuperend: String
  zfBirthday_45fec00554: String
  zfBirthday_8046cd826d: String
}

input OrganizationCreateInput {
  "描述"
  description: String
  "组织标识 - 后期不可修改，而且全局唯一"
  id: ID
  "是否支持多部门"
  multiSectoral: Boolean
  "支持最多部门数"
  multiSectoralNumber: Int
  "名称"
  name: String!
  remark: String
}

"组织人员过滤条件"
input OrganizationEmployeeFilter {
  "部门匹配 - 值为部门 ID"
  department: ID
  "部门匹配 - 会返回子部门的数据"
  department_startsWith: ID
  "群组"
  group: ID
  "ID"
  id_in: [ID]
  "职务"
  job: ID
  "工号"
  jobNumber: String
  "手机号"
  mobile: String
  "名称包含"
  name_contains: String
  "职位"
  position: ID
  "性别"
  sex: Sex
  "缩写"
  sn_contains: String
  "状态"
  status: String
}

input OrganizationEmployeeInput {
  "组织 ID"
  organization: ID!
  "职位"
  positions: [EmployeePositionInput]
  "状态"
  status: String
}

"部门人员状态创建实体"
input OrganizationEmployeeStatusCreateInput {
  "状态编码"
  code: String
  "是否是默认值"
  isDefault: Boolean
  "状态名称"
  name: String
}

"部门人员状态查询实体"
input OrganizationEmployeeStatusFilter {
  "主键id"
  id: ID
  "人员状态"
  name: String
  "适用组织"
  organizationId: ID
}

"部门人员状态更新实体"
input OrganizationEmployeeStatusUpdateInput {
  "状态编码"
  code: String
  "是否是默认值"
  isDefault: Boolean
  "状态名称"
  name: String
}

input OrganizationFilter {
  id_in: [String]
}

input OrganizationRequestInput {
  "当前账户"
  account: String!
  "上级组织id"
  parentOrgId: String
}

input OrganizationUpdateInput {
  "描述"
  description: String
  "是否支持多部门"
  multiSectoral: Boolean
  "名称"
  name: String
  remark: String
}

input PaperTitleFilter {
  question_name: String
  question_type: ENUM_QUESTIONTOPIC_QUESTION_TYPE
}

"分布提交入参"
input PartyApplyActionInput {
  "ID"
  action: ID!
  "ID"
  creator: ID!
  "Boolean"
  isTemporary: Boolean!
  "ID"
  uid: ID!
  "PartyFeldValueInput"
  values: [PartyFeldValueInput]
}

input PartyApplyRecordFilter {
  "申请人ID"
  partyApplyId_eq: ID!
}

input PartyApplysBatchInput {
  "申请人出生日期"
  birthday: String!
  "学位"
  degree: String!
  "学历"
  education: String!
  "申请人身份证号"
  idCard: String!
  "申请人姓名"
  name: String!
  "申请人民族"
  national: String!
  "申请人籍贯"
  nativeplace: String!
  "申请人电话"
  phonenumber: String!
  "申请人职务"
  position: String!
  "申请人性别"
  sex: String!
  "阶段名称"
  stage: String!
  "申请人职称"
  titles: String!
}

input PartyApplysFilter {
  "步骤"
  applysStep: [Int]
  "所属支部"
  applysbranch_eq: [Int]
  "学历"
  applyseducation_eq: String
  "姓名"
  applysname_like: String
  "名族"
  applysnational_eq: String
  "手机号"
  applysphonenumber_like: String
  "阶段ID"
  applysstage_eq: Int
  "职称"
  applystitles_eq: String
  "当前步骤"
  currentStep: ID
  "部门id"
  departmentId: ID
  "工号"
  jobNumber: String
  "姓名"
  name: String
}

input PartyApplysInput {
  "申请人"
  applicant: ID!
  "申请人出生日期"
  birthday: String
  "所属支部"
  branch: String
  "学位"
  degree: String
  "学历"
  education: String
  "申请人身份证号"
  idCard: String
  "申请人姓名"
  name: String
  "申请人民族"
  national: String
  "申请人籍贯"
  nativeplace: String
  "申请人电话"
  phonenumber: String
  "照片"
  pic: [FileObject]
  "申请人职务"
  position: String
  "申请人性别"
  sex: String
  "阶段"
  stage: ID!
  "申请人职称"
  titles: String
}

input PartyBillFilter {
  "部门"
  department: Int
  "月"
  month: Int
  "季度"
  quarter: Int
  "年"
  year: Int
}

input PartyDuesImportFilter {
  "支部"
  departmentId: ID
  "月"
  month: Int
  "季度"
  quarter: Int
  "姓名"
  userName: String
  "年"
  year: Int
}

input PartyDuesImportInput {
  "支部"
  department: Int
  "支部"
  departmentId: ID
  "员工编号"
  employee: ID
  "员工编号"
  employees: JSON
  "月"
  month: Int
  "支付金额"
  payAmount: Float
  "季度"
  quarter: Int
  "姓名"
  userName: String
  "工号"
  userNumber: String
  "年"
  year: Int
}

input PartyEvaluateFilter {
  "获奖人名"
  name: String
}

input PartyEvaluatesCreateInput {
  "获奖时间"
  awardTime: String
  "所获荣誉"
  honor: String
  "荣誉级别"
  level: String
  "获奖人"
  winner: ID!
}

input PartyEvaluatesUpadateInput {
  "获奖时间"
  awardTime: String
  "所获荣誉"
  honor: String
  "荣誉级别"
  level: String
  "获奖人"
  winner: ID
}

input PartyExpenseFilter {
  departmentId: String
  month: Int
  year: Int
}

input PartyFeldValueInput {
  "字段名"
  name: String
  "字段值"
  value: String
}

input PartyFundDetailFilter {
  "办理时间"
  handlingTime: String
  "经费ID"
  partyFundId: ID
}

input PartyFundDetailInput {
  "申请人"
  applyUser: ID
  "所属支部"
  departmentId: Int
  "费用类型"
  feeType: FeeType!
  "所属组织"
  organizationId: String
  "支出金额"
  spendAmount: Float
  "支出理由"
  spendReason: String
  "申请年份"
  year: Int
}

input PartyFundDetailsInput {
  "申请人"
  applyUser: ID
  "申请人工号"
  jobNumber: String
  "支出金额"
  spendAmount: Float
  "支出理由"
  spendReason: String
  "申请年份"
  year: Int
}

"查询条件"
input PartyFundFilter {
  "所属部门"
  departmentId: ID
  "费用类型"
  feeType: FeeType!
  "所属组织"
  organization: ID
  "年"
  year: Int
}

input PartyFundInput {
  "额度"
  annualBurden: Float!
  "部门名"
  department: String!
  "费用类型"
  feeType: FeeType!
  "总支出"
  totalExpenses: Float!
  "年度"
  year: Int!
}

input PartybillInput {
  amount: Float
  departmentId: String
  month: Int
  months: [String]
  payOrder: String
  payState: ENUM_PARTYBILL_PAYSTATE
  payTime: DateTime
  payWay: ENUM_PARTYBILL_PAYWAY
  userId: String
  year: Int
}

input PartyexpensesInput {
  departmentId: String
  month: Int
  name: String
  payAmount: Float
  year: Int
}

input PayApplyFilter {
  "申请人"
  applyPerson: ID
  "合同编号"
  contractNo: String
  "介绍日期"
  endDate: String
  "关键字"
  keyword: String
  "付款类型"
  payType: String
  "项目名称"
  projectName: String
  "开始日期"
  startDate: String
  "申请状态"
  status: String
  "支付对象"
  supportObj: String
}

input PayApplyInput {
  "当前用户账户"
  account: String!
  "申请日期"
  applyDate: String!
  "申请部门"
  applyDepartment: String
  "申请人"
  applyUser: String!
  "银行账户"
  bandAccount: String
  "合同条款id"
  contractClauseId: ID
  "合同id"
  contractId: ID
  "合同编号"
  contractNo: String!
  "货币单位"
  currencyUnit: String!
  "发送流程基本信息"
  ezRequest: OASendEZFlowRequestInput
  "表单类型：form(老表单)、ezform（新表单）"
  formType: String!
  "发票扫描件"
  invoiceFiles: [FileObject]
  "支票发票号"
  invoiceNo: String
  "开户行"
  openBank: String
  "其他附件"
  otherFiles: [FileObject]
  "表单ID"
  pageId: String!
  "付款金额"
  payAmount: Float
  "付款类型"
  payType: String!
  "项目名称"
  projectName: String
  "项目类型"
  projectType: String!
  "支持对象"
  supportObj: String
}

input PaymentBatchFilter {
  "医院"
  hospital_eq: String
  "付款状态"
  paymentStatus_eq: String
  "年度"
  year_eq: String
}

input PaymentDetailedFilter {
  "预算类别"
  budgetHospital_eq: String
  "预算类别"
  budgetType_eq: String!
  "预算年份"
  budgetYear_eq: String!
}

input PaymentFilter {
  "医院"
  budgetHospital_in: [String]
  "名字和编号"
  budgetNameOrSn_like: String
  "付款类别"
  budgetType_eq: String
  "付款年份"
  budgetYear_eq: String
  "付款年份模糊查询"
  budgetYear_like: String
  "审批日期"
  endTime_eq: String
  "付款审核状态0申请中1审批完成2已付款3审批退回"
  paymentStatus_in: [String]
  "打印状态"
  print_in: [String]
  "更新时间查询"
  updateTime_between: DateBetween
  "发起人"
  user: String
}

input PaymentInput {
  "附件1列表"
  files: [FileObject]
  "医院付款银行回单"
  filesFive: [FileObject]
  "发票"
  filesFour: [FileObject]
  "其他附件"
  filesOther: [FileObject]
  "信息统计编报截图"
  filesSix: [FileObject]
  "外币折换人民币明细清单"
  filesThree: [FileObject]
  "附件2列表"
  filesTwo: [FileObject]
  "付款金额"
  fkMoney: Float!
  "付款备注"
  remarks: String
  "招标日期"
  tenderTime: String
}

input PaymentStatisticsFilter {
  "医院"
  budgetHospital_eq: String
  "预算年份"
  budgetYear_eq: String!
}

input PaymentSummaryFilter {
  "预算类别"
  budgetType_eq: String!
  "预算年份"
  budgetYear_eq: String!
}

input PayscaleInput {
  partyMemberType: ENUM_PAYSCALE_PARTYMEMBERTYPE
  scale: Float
  wage: String
}

input PaystandardInput {
  departmentId: String
  payAmount: Float
  "年份"
  quarter: String
  use: ENUM_PAYSTANDARD_USE
  userId: String
  userName: String
  userNumber: String
  year: Int
}

input PeopleBranchIntegralFilter {
  "支部名称"
  branchName: String
  "姓名"
  peopleName: String
}

input PeopleBranchIntegralInput {
  "支部积分"
  branchIntegral: Int
  "支部名称"
  branchName: String
  "姓名"
  peopleName: String
}

"权限录入数据类"
input PermissionCreateInput {
  "这是一个资源类型"
  category: PermissionCategory
  "这是一个描述"
  description: String
  "这是一个id"
  id: ID!
  "权限定义名称"
  name: String
  "这是一个权限分类ID"
  permissionTypeInput: String
  "这是一个资源说明"
  resourceType: String
}

"过滤类"
input PermissionFilter {
  "id"
  id: ID
  "名称模糊查询"
  name_like: String
  "权限分类"
  permissionType: String
}

input PermissionInput {
  grants: [String]
  permission: String
}

"过滤类"
input PermissionTypeFilter {
  "名称模糊查询"
  name_like: String
}

"权限分类输入类"
input PermissionTypeInput {
  "这是一个分类的描述"
  description: String
  "这是一个分类的id"
  id: ID
  "这是一个分类的名称"
  name: String
  "这是一个分类的排序"
  sort: Int
}

"权限分类输入类"
input PermissionTypeUpdateInput {
  "这是一个分类的描述"
  description: String
  "这是一个分类的名称"
  name: String
  "这是一个分类的排序"
  sort: Int
}

"权限更新录入数据类"
input PermissionUpdateInput {
  "这是一个资源类型"
  category: PermissionCategory
  "这是一个描述"
  description: String
  "这是一个名称"
  name: String
  "这是一个权限分类ID"
  permissionTypeInput: String
  "这是一个资源说明"
  resourceType: String
}

"轮播图输入参数"
input PhotoSetInput {
  "文章id"
  articleId: ID
  "主键id"
  id: ID
  "访问链接"
  imageLink: String
  "位置"
  location: String
  "组织id"
  organizationId: ID
  "图片id"
  path: String
}

input PortalFilters {
  "应用ID"
  applicationId: String
  "是否是平台门户"
  platform: Boolean
}

input PortalInput {
  "应用"
  application: ID
  "门户组件配置"
  component: ComponentConfigurateInput
  "创建人"
  creator: String
  "是否为默认门户"
  default: Boolean
  "描述"
  description: String
  "图标"
  icon: IconConfigurateInput
  "序号"
  index: Int
  "修改人"
  modifier: String
  "名称"
  name: String
  "路由级连地址"
  path: [String]
  "门户类型"
  type: PortalType
  "是否启用"
  useable: Boolean
  "可查看范围"
  viewable: [String]
}

"职位查询实体"
input PositionFilter {
  department: String
  id: ID
  name: String
}

input ProcessCategoryFilter {
  name: String
}

input ProcessDefinitionFilter {
  "流程分类"
  category: String
  "人员id"
  empId: String
  key: String
  "表单规则运行数据"
  rulesData: JSON
}

input ProcessFormInput {
  category: FormType
  component: String
  description: String
  modelId: ID
  name: String
  outcomeVariableName: String
  processFormJson: String
  version: Int
}

input ProcessInstanceFilter {
  "流程key"
  definitionKey: String
  "角色发起人"
  empId: [String]
  "发起人查询类型"
  employee: Emp!
  "流程名称模糊查询"
  name_like: String
  "优先级  1超急  2紧急 3正常"
  priority: Int
  "流程id"
  processInstanceId: String
  "起始时间"
  startedAfter: String
  "结束时间"
  startedBefore: String
  "流程状态"
  state: ProcessInstanceStateEnum
}

input ProcessModelFilter {
  category: String
  name: String
  type: Int
}

input ProjectApprovalFilter {
  "申请人"
  applyPerson: String
  "截至日期"
  endDate: String
  "项目名称"
  projectName: String
  "开始日期"
  startDate: String
  "立项状态"
  status: String
}

input ProjectApprovalInput {
  "当前登录账户"
  account: String!
  "申请日期"
  applyDate: String
  "申报理由"
  applyReason: String
  "申请人"
  applyUser: String
  "项目大类"
  bigType: String
  "预算金额"
  budgetAmount: Float
  "预算编号"
  budgetNo: String
  "部门"
  department: String
  "表单类型：form(老表单)、ezform（新表单）"
  formType: String!
  "是否预算内"
  isBudget: String
  "表单ID"
  pageId: String!
  "ppt文件"
  pptFiles: [FileObject]
  "预估金额"
  predictAmount: Float
  "项目名称"
  projectName: String!
  request: OASendFlowRequestInput!
  "项目小类"
  smallType: String
  "是否上会(需要上院务会、不需要上院务会)"
  upperConference: String
  "年度预算"
  yearBudget: String
}

input ProjectContractInput {
  "仲裁诉讼受理机关"
  acceptCompany: String
  "登录账户"
  account: String!
  "金额"
  amount: Float
  "申请日期"
  applyDateTime: String
  "申请部门"
  applyDepartment: String
  "申请人id"
  applyUser: String!
  "预算名称"
  budgetName: String
  "预算编号"
  budgetNo: String
  "合同条款"
  clauseRequests: [ContractClauseInput]
  "违约赔偿条款"
  compensateClause: String
  "内容"
  content: String
  "合同文本格式"
  contractFormat: String
  "合同样本"
  contractSamples: [FileObject]
  "合同有效期"
  effectiveDate: String
  "发起流程基础数据"
  ezRequest: OASendEZFlowRequestInput
  "上传附件"
  files: [FileObject]
  "最终合同文本附件"
  finalContractFiles: [FileObject]
  "财务处合同编号"
  financeNo: String
  "表单类型"
  formType: String
  "资金来源"
  fundSource: String
  "三一重大编号"
  greatNo: String
  "是否审计审价"
  isAudit: String
  "是否发送流程"
  isSend: String
  "名称"
  name: String
  "编号"
  no: String
  "表单id"
  pageId: String!
  "收付方式"
  paymentType: String
  "关联项目"
  projectId: ID
  "甲方标识"
  purchaseFlag: String
  "甲方"
  purchaseName: String
  "采购编号"
  purchaseNo: String
  "采购方式"
  purchaseType: String
  "备注"
  remark: String
  "分类"
  sort: String
  "招标编号"
  tenderNo: String
  "类型"
  type: String
  "乙方标识"
  vendorFlag: String
  "乙方"
  vendorName: String
  "质保期"
  warrantyPeriod: String
}

input ProjectContractUpdate {
  "项目ID"
  project: ID
}

input ProjectCreateInput {
  "关联立项"
  approval: ID
  "创建人"
  creator: String
  "主办科室"
  departmentId: ID
  "负责人"
  dutyPerson: ID
  "项目截止日期"
  endDate: String
  "项目附件"
  files: [FileObject]
  "项目名称"
  name: String!
  no: String!
  "所属组织"
  organizationId: ID
  "关联项目（父项目）"
  parent: ID
  "项目参与人"
  persons: [ProjectPersonInput]
  "项目描述"
  projectDesc: String
  "关联采购"
  purchaseTender: ID
  "项目阶段id"
  stage: ID
  "流程方案id"
  stageScheme: ID
  "项目开始日期"
  startDate: String
  "项目类型"
  type: String
}

input ProjectDictionaryFilter {
  "项目负责人"
  dutyPerson: ID
  "项目截止日期"
  endDate: String
  "关键字：项目编号、名称"
  key: String
  "项目参与人"
  participant: ID
  "项目状态"
  stage: String
  "流程方案id"
  stageSchemeId: ID
  "项目开始日期"
  startDate: String
  "项目类型"
  type: String
}

"""
  extend types Mutation {
    #保存项目文档信息
    createProjectDocument(inputs:ProjectDocumentInput):ProjectDocument
    #修改项目文档信息
    updateProjectDocument(inputs:ProjectDocumentInput):ProjectDocument
}

inputs ProjectDocumentInput{
    #文档附件
    files:[FileObject] !
    #项目id
    project:ID !
    #项目阶段
    stage:ID !
    #项目阶段id
    stageId:Int !
}
"""
input ProjectDocumentDictionaryFilter {
  "截止日期"
  endDate: String
  "项目id"
  projectId: Int
  "项目阶段"
  stage: String
  "开始日期"
  startDate: String
  "用户id"
  userId: ID
}

"项目代码管理"
input ProjectManagementCreateInput {
  "地址"
  address: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "语言类型"
  developmentLanguage: String
  "负责人"
  duty: String
  "修改人"
  modifier: String
  "名称"
  name: String
  "产品"
  product: String
  "项目类型"
  productType: ProjectType
  "修改日期"
  updatedAt: String
}

"项目代码管理过滤对象"
input ProjectManagementFilter {
  address: String
  developmentLanguage: String
  duty: String
  name: String
  product: String
  productType: String
}

"项目代码管理"
input ProjectManagementUpdateInput {
  "地址"
  address: String
  "创建日期"
  createdAt: String
  "创建人"
  creator: String
  "是否删除"
  deleted: Boolean
  "语言类型"
  developmentLanguage: String
  "负责人"
  duty: String
  "修改人"
  modifier: String
  "名称"
  name: String
  "产品"
  product: String
  "项目类型"
  productType: ProjectType
  "修改日期"
  updatedAt: String
}

input ProjectMeetingInput {
  "会议地址"
  address: String
  "会议内容"
  content: String
  "创建人"
  creator: String
  "会议附件"
  files: [FileObject]!
  "会议时间"
  meetingDate: String!
  "修改人"
  modifier: String
  "会议名称"
  name: String!
  "组织人"
  orgPerson: Int
  "关联会议Id"
  parent: ID
  "会议参与人"
  persons: [MeetingPersonInput]
  "项目"
  project: ID
  "会议类型"
  type: String
}

input ProjectNoteInput {
  "讨论主题"
  content: String!
  "创建人"
  creator: String
  "项目主题id"
  theme: ID!
}

input ProjectNoteUpdate {
  "讨论主题"
  content: String!
}

input ProjectPersonInput {
  "人员id"
  userId: Int
}

input ProjectScheduleInput {
  "完成时间"
  completedate: String
  "备注"
  description: String
  "流程id"
  flow: String!
  "计划时间"
  plandate: String
}

input ProjectThemeInput {
  "创建人"
  creator: String
  "项目id"
  project: ID!
  "讨论主题"
  title: String!
}

input ProjectThemeUpdate {
  "修改人"
  modifier: ID
  "讨论主题"
  title: String!
}

input ProjectTimeInput {
  "实际完成日期"
  actualFinishDate: String
  "创建人"
  creator: ID
  "计划完成日期"
  preFinishDate: String
  "项目id"
  project: ID!
  "阶段id"
  stage: ID!
}

input ProjectUpdateInput {
  "主办科室"
  departmentId: Int
  "项目负责人"
  dutyPerson: Int
  "项目截止日期"
  endDate: String
  "项目附件"
  files: [FileObject]
  "修改人"
  modifier: String
  "项目名称"
  name: String
  "关联项目（父项目）"
  parent: ID
  "项目参与人"
  persons: [ProjectPersonInput]
  "项目描述"
  projectDesc: String
  "流程id"
  stageScheme: ID
  "项目开始日期"
  startDate: String
  "项目类型"
  type: String
}

input PurchaseTenderDictionaryFilter {
  "申请人"
  applyPerson: ID
  "预算编号"
  budgetNo: String
  "截止日期"
  endDate: String
  "项目名称"
  projectName: String
  "开始日期"
  startDate: String
  "办理状态"
  status: String
}

input PurchaseTenderInput {
  "当前登录账户"
  account: String!
  "申请日期"
  applyDateTime: String!
  "申请部门"
  applyDepartment: String
  "申请人"
  applyUser: String!
  "相关审批流程"
  approvalFlow: String
  "审批编号"
  approvalNo: String
  "预算编号"
  budgetNo: String
  "预算项目"
  budgetProject: String
  ezRequest: OASendEZFlowRequestInput!
  "表单类型：form(老表单)、ezform（新表单）"
  formType: String!
  "是否院内公开"
  isPublish: String
  "非预算项目Id"
  noBudgetProject: String
  "表单ID"
  pageId: String!
  "采购编号"
  purchaseNo: String!
  "招标文件"
  tenderFiles: [FileObject]
}

input QuestionbankInput {
  code: String
  craete_time: DateTime
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exampapertitles: [ID]
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  question_bank_name: String
  question_number: Int
  questiontopics: [ID]
}

input QuestionnaireFilter {
  "问卷名称"
  name: String
}

input QuestionnaireInput {
  "版本"
  edition: Int
  "问卷名称"
  name: String
  "组织id"
  orgId: ID
  "评测项类型"
  types: [IndexTypeInput]
}

input QuestiontopicInput {
  answer_key: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exampapertitles: [ID]
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  options: [VoteoptionInput]
  orgid: String
  question_name: String
  question_type: ENUM_QUESTIONTOPIC_QUESTION_TYPE
  questionbank: ID
  right_answers: String
  sheetchildren: [ID]
  topiccollects: [ID]
}

input RandomInput {
  examinationPaperId: ID
  questionBank: ID
  questionNumber: Long
  questionType: ENUM_QUESTIONTOPIC_QUESTION_TYPE
}

input ReadingFilter {
  empId: String
  isRead: Boolean
  sendTimeBet: DateBetween
  sendTime_bet: DateBetween
  type: ReadingEnum
}

input ReadingInput {
  "内容"
  content: String
  "流程id"
  processDefinitionId: String
  "流程id"
  processInstanceId: String
  "收件人"
  receiver: [String]
  "发件人"
  sender: String
  "主题"
  subject: String
  "类型"
  type: ReadingEnum
}

input ReadingNotesFilter {
  "用户"
  employee: String
  "employee_id"
  employeeId: ID
  "党小组"
  partyGroup: ID
}

input ReadingNotesInput {
  "书目名称"
  bibliographyName: String
  "用户"
  employeeId: ID
  "附件"
  files: [FileObject]
  "心得体会"
  learningExperience: String
  "学习时间"
  learningTime: String
  "党小组"
  partyGroup: ID
}

input ReceiverInput {
  "接收人类型"
  type: String
  "接收人的id"
  value: String
}

input RelatedaccessoryInput {
  accessory_descript: String
  accessory_type: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  operator: String
  orgid: String
  upload_file: String
  upload_time: DateTime
}

input ReportFilter {
  "期间ID"
  period: ID
  "预算类别"
  type: ID!
  "预算科目"
  unit: ID
}

input ResearchAnswerInput {
  "填写内容"
  fillContent: String
  "录入分数"
  inputScore: Float
  "选项ID"
  optionId: Int
}

input ResearchAskChildQuestionInput {
  "题目名称"
  name: String
  "是否必填"
  optionRequired: Boolean
  "选项类型, onesame矩阵单选（选项单选，所有题目相同选项组）,moresame矩阵多选（选项多选，所有题目相同选项组）,scoringsame矩阵量表（选项是打分题，所有题目相同选项组）"
  optionType: String
  "选项"
  options: [ResearchAskOptionInput]
  "排序"
  sort: Int
}

input ResearchAskFilter {
  "删除标识"
  deleted: Boolean
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "问卷名称（模糊查询）"
  name: String
  "组织机构ID"
  organizationId: ID!
  "状态(1启动,0停用)"
  status: Boolean
}

input ResearchAskInput {
  "创建日期"
  createdAt: Date
  "创建者信息"
  creator: String
  "描述"
  description: String
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "主题名称"
  name: String!
  "组织机构ID"
  organizationId: ID!
  "选项"
  questionInputs: [ResearchAskQuestionInput]
  "状态(1启动,0停用)"
  status: Boolean
  "类型id"
  typeId: Int
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: String
}

input ResearchAskOptionInput {
  "是否默认选中"
  defaultChecked: Boolean
  "选项名称"
  name: String
  "分值"
  score: Float
  "排序"
  sort: Int
  "统计名称（若有且类型一致，则按此名称最终多添加一份统计结果"
  statName: String
}

input ResearchAskQuestionInput {
  "量表子题目列表，注意有量表题目时无须传上述options属性"
  children: [ResearchAskChildQuestionInput]
  "量表子题目选项列表，注意有量表题目时无须传上述options属性"
  childrenOptions: [ResearchAskOptionInput]
  "题目名称"
  name: String!
  "是否必填"
  optionRequired: Boolean
  "选项类型, one单选,more多选,judge判断,fill问答,scoring打分,onesame矩阵单选（选项单选，所有题目相同选项组）,moresame矩阵多选（选项多选，所有题目相同选项组）,scoringsame矩阵量表（选项是打分题，所有题目相同选项组）"
  optionType: String
  "量表题目选项"
  options: [ResearchAskOptionInput]
  "排序"
  sort: Int
}

input ResearchBeingObjectInput {
  "id"
  id: Int
  "被测评名称"
  name: String
  "备用字段1（党建：现任职务）"
  spare1: String
  "备用字段2（党建：拟任职务）"
  spare2: String
  "被测评对象类型(dept, employee)"
  type: String
  "被测评ID"
  value: String
}

input ResearchBeingPersonInput {
  "被测评对象类型"
  beingObjectType: String!
  "被测评对象ID"
  beingObjectValue: String!
}

input ResearchJoinObjectInput {
  "公共的所有人"
  allPerson: Boolean
  "部门ID"
  deptId: Int
  "员工id"
  employeeId: Int
  "id"
  id: Int
  "院内所有部门"
  innerDept: Boolean
}

"答题时参与测评人信息"
input ResearchJoinPersonInput {
  "是否完成, true/false"
  finished: Boolean
  "参加测评员工ID"
  joinEmployeeId: Int
  "参加测评姓名"
  joinObjectName: String
  "测评人手机号"
  personMobile: String
  "视为测评群众随机号"
  personUuid: String
  "未完成是0,已完成是1"
  status: Int
}

input ResearchMatrixAskInput {
  "描述"
  description: String
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "主题名称"
  name: String!
  "选项"
  optionInputs: [ResearchAskOptionInput]
  "选项类型, onesame矩阵单选（选项单选，所有题目相同选项组）,moresame矩阵多选（选项多选，所有题目相同选项组）,scoringsame矩阵量表（选项是带分题，所有题目相同选项组）"
  optionTypeInput: String
  "组织机构ID"
  organizationId: ID!
  "题目"
  questionInputs: [ResearchMatrixAskQuestionInput]
  "状态(1启动,0停用)"
  status: Boolean
}

input ResearchMatrixAskQuestionInput {
  "题目名称"
  name: String!
  "排序"
  sort: Int
}

input ResearchStartAnswerInput {
  "被测评对象类型"
  beingObjectType: String!
  "被测评对象ID"
  beingObjectValue: String!
  "参加测评员工ID"
  joinEmployeeId: Int
  "参加测评姓名"
  joinObjectName: String
  "测评人手机号"
  personMobile: String
  "视为测评群众随机号"
  personUuid: String
  "未完成是0,已完成是1"
  status: Int
}

input ResearchStatBeingSummaryFilter {
  "被测评名称"
  beingObjectName: String
  "主题id"
  subjectId: Int
}

input ResearchStatEssayFilter {
  "被调查类型"
  beingObjectType: String
  "被调查id"
  beingObjectValue: Int
  "参与测评人员名称"
  joinObjectName: String
  "模块名称，默认录入值：general"
  moduleCode: String
  "问答类型,默认fill"
  optionType: String
  "组织机构ID"
  organizationId: ID!
  "AB分类"
  personType: String
  "主题id"
  subjectId: Int
}

input ResearchStatJoinSummaryFilter {
  "是否完成"
  finished: Boolean
  "参与测评人员id"
  joinEmployeeId: Int
  "测评人名称"
  joinObjectName: String
  "主题id"
  subjectId: Int
}

input ResearchSubjectFilter {
  "删除标识"
  deleted: Boolean
  "所属部门"
  deptId: Int
  "是否已结束，时间过了就算结束(0-未开始,1-进行中,2已结束)"
  ended: Int
  "是否完成，不填写代表全部，true已完成，false未完成"
  finished: Boolean
  "参与测评人员信息"
  joinPerson: ResearchJoinPersonInput
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "主题名称（模糊查询）"
  name: String
  "组织机构ID"
  organizationId: ID!
  "上级测评ID，传值0则表示查询的是一级测评"
  parentId: Int
  "主题类型"
  typeId: Int
  "年度ResearchAskGraphqlResolver"
  year: String
}

input ResearchSubjectInput {
  "是否匿名"
  anonymous: Boolean
  "问卷ID"
  askId: Int!
  "调查被测评对象表"
  beingObjects: [ResearchBeingObjectInput]
  "创建日期"
  createdAt: Date
  "创建者信息"
  creator: String
  "所属部门ID"
  deptId: Int
  "描述"
  description: String
  "结束时间"
  endTime: String
  "调查参与测评对象表"
  joinObjects: [ResearchJoinObjectInput]
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "主题名称"
  name: String!
  "组织机构ID"
  organizationId: ID!
  "上级测评主题ID"
  parentId: Int
  "发布状态 (0未发布，1已发布)"
  publishStatus: Int
  "开始时间"
  startTime: String
  "调查分类ID"
  typeId: Int
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: String
  "问卷年度"
  year: String
}

input ResearchSummaryResultFilter {
  "模块名称，默认录入值：general"
  moduleCode: String
  "组织机构id"
  organizationId: String
}

input ResearchTypeFilter {
  "删除"
  deleted: Boolean
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "分类模糊查询"
  name: String
  "组织机构ID"
  organizationId: ID!
}

input ResearchTypeInput {
  "创建日期"
  createdAt: Date
  "发布人员工信息"
  creator: String
  "删除"
  deleted: Boolean
  "简介"
  description: String
  "模块名称，默认录入值：general，见ResearchModuleCodeEnum定义"
  moduleCode: String
  "名称"
  name: String!
  "组织机构ID"
  organizationId: ID!
  "排序"
  sort: Int
  "更新日期"
  updatedAt: Date
  "更新人"
  updator: String
}

input ReviewContentInput {
  "评测内容ID"
  id: ID
  "选项"
  options: [OptionInput]
  "分值"
  score: String
  "题目"
  topic: String!
}

input ReviewDetailsInput {
  "测评人"
  appraiser: ID!
  "选项结果"
  result: [ReviewResultInput]
  "测评ID"
  reviewId: ID!
  "被测评人"
  testee: ID!
}

input ReviewFilter {
  "所属支部"
  branch: [ID]
  "名称"
  name: String
  "测评类型"
  type: TemplateType
}

input ReviewInput {
  "所属支部"
  branch: ID
  "测评时间止"
  endTime: String
  "测评名称"
  name: String
  "测评时间起"
  startTime: String
  "使用模板"
  templateId: ID
}

input ReviewResultInput {
  "内容"
  content: ID!
  "结果"
  result: String!
}

input RoleCreateInput {
  description: String
  id: ID
  name: String!
  "所属角色分类，默认UNKNOWN"
  roleTypeInput: String
}

input RoleEmployeeInput {
  "角色人员信息"
  employees: [ID]
  "角色id"
  role: ID
}

"过滤类"
input RoleFilter {
  "是否可用, 0不可用，其他全部"
  enabled: String
  "id"
  id: ID
  "名称过滤"
  name_like: String
  "机构过滤"
  organizationId: ID
  "分类过滤"
  roleType: String
}

"角色分类输入类"
input RoleTypeCreateInput {
  "这是一个分类的描述"
  description: String
  "这是一个分类的id"
  id: ID
  "这是一个分类的名称"
  name: String
  "这是一个分类的排序"
  sort: Int
}

"过滤类"
input RoleTypeFilter {
  "名称模糊查询"
  name_like: String
}

"角色分类输入类"
input RoleTypeUpdateInput {
  "这是一个分类的描述"
  description: String
  "这是一个分类的名称"
  name: String
  "这是一个分类的排序"
  sort: Int
}

input RoleUpdateInput {
  "描述"
  description: String
  "是否启用"
  enabled: Boolean
  "编码"
  id: ID
  "名称"
  name: String
  "所属角色分类，默认UNKNOWN"
  roleTypeInput: String
}

input RollbacksInput {
  "当前的节点"
  activityId: [String]
  "流程元素ID"
  distFlowElementId: String
  "人员id"
  emoId: String
  "退回到那个节点"
  newActivityId: String
  "意见"
  opinion: String
  "任务id"
  taskId: String
}

input RouteComponentInput {
  "组件配置数据"
  props: JSON
  "路由配置"
  routeWrapper: RouteComponentWrapperInput
  "渲染组件"
  template: String
}

input RouteComponentWrapperInput {
  "组件配置数据"
  props: JSON
  "渲染组件"
  template: String
}

input RouteCreateInput {
  "需要提供的权限"
  authority: [String]
  "必须登录"
  authorized: Boolean
  "组件"
  component: RouteComponentInput
  "在菜单中隐藏子节点"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "在菜单中隐藏"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  "默认位置"
  index: Int
  "名称"
  name: String!
  "父路由"
  parentRoute: ID
  "路径"
  path: String!
  "路由所属类型"
  protocol: ApplicationProtocol!
  "重定向的路径"
  redirect: String
  "路由类型"
  type: RouteType
}

input RouteFilter {
  "应用ID"
  applicationId: ID
  "是否启用"
  enabled: Boolean
  id_in: [String]
  "类型"
  type: RouteType
}

input RouteUpdateInput {
  "需要提供的权限"
  authority: [String]
  "必须登录"
  authorized: Boolean
  "组件"
  component: RouteComponentInput
  "路由配置"
  configuration: JSON
  "是否启用"
  enabled: Boolean
  "在菜单中隐藏子节点"
  hideChildrenInMenu: Boolean
  "在面包屑中隐藏菜单"
  hideInBreadcrumb: Boolean
  "在菜单中隐藏"
  hideInMenu: Boolean
  "对应的图标"
  icon: String
  "名称"
  name: String
  "父路由"
  parentRoute: ID
  "路径"
  path: String
  "路由所属类型 PC端/M站"
  protocol: ApplicationProtocol
  "重定向的路径"
  redirect: String
  "路由类型"
  type: RouteType
}

input SaveModelInput {
  category: String
  description: String
  json: String
  name: String!
  scope: String
}

input SchemaObjectFilter {
  match: SchemaObjectFilterMatch
  name: String
  value: String
}

input SchemaStructureFilter {
  "数据库类型"
  dataBaseType: DataBaseType!
  "数据库名称"
  schemaName: String
}

"评分结果"
input ScoreResultInput {
  "得分项"
  assessmentItem: Int
  "扣分原因"
  pointReason: String
  "得分"
  score: Int
}

input ServiceEndpointInput {
  "列： http://middletalk.thuni-h.com:30451/graphql"
  development_graphql: String
  "列： http://test:8080/graphql"
  graphql: String
  mock: Boolean = false
  "restful接口"
  restful: String
}

input ServiceFilterInput {
  "名称"
  name: String
}

input ServiceInput {
  endpoints: ServiceEndpointInput
  host: String
  id: String
  name: String
}

input ServiceUpdateInput {
  "对应的域名服务"
  endpoints: ServiceEndpointInput
  "请求处理服务"
  host: String
  "名称"
  name: String
}

input ServiceVersionInput {
  "标签代码"
  code: String
  "创建人"
  creator: String
  "描述"
  description: String
  "名称"
  name: String
  "版本号"
  versionCode: String
}

input SheetInput {
  create_start_time: DateTime
  exam: ID
  examinationpaper: ID
  hand_examination: Boolean
  pass: Boolean
  remainTime: Int
  score: String
  sheetchildren: [ID]
  user: String
}

input SheetchildInput {
  answer: String
  questiontopic: ID
  result: Boolean
  sheet: ID
}

input SignatureInput {
  activityId: String
  executionId: String
  executionVariables: JSON
  parentExecutionId: String
  taskOperator: TaskOperator
}

input SqlInput {
  dataSource: String
  sql: String
}

input StageCopyWorkflowInput {
  name: String
}

"字段配置"
input StageFieldConfigurationItemInput {
  "字段方案"
  config: ID!
  "字段"
  field: ID!
  "渲染器"
  renderer: String
  "是否必填"
  required: Boolean
}

"StageFieldFilter"
input StageFieldFilter {
  "custom-自定义,preset-预设"
  category: FieldCategory
  "中文名"
  label: String
  "英文名"
  name: String
  "渲染器 select,input,file,date"
  renderer: String
  "类型"
  type: String
}

"字段"
input StageFieldInput {
  "预设字段还是自定义字段"
  category: FieldCategory
  "label"
  label: String
  "名称"
  name: String
  "options"
  options: JSON
  "渲染器"
  renderer: String
  "是否必填"
  required: Boolean
  "字段类型"
  type: StageFieldType
}

"字段的值"
input StageFieldValueInput {
  "字段"
  name: String
  "值"
  value: String
}

"阶段"
input StageInput {
  "名称"
  name: String!
  """
    上级阶段
  parent: ID!
  对应的流程
  """
  workflow: ID!
}

"StagePermissionCreateInput"
input StagePermissionCreateInput {
  "编码"
  code: String
  "描述"
  description: String
  "名称"
  name: String
  "权限"
  permissionsList: [String]
  "类型"
  type: String
}

"StagePermissionFilter"
input StagePermissionFilter {
  "编码"
  code: String
  "描述"
  description: String
  "名称"
  name: String
  "类型"
  type: String
}

"StagePermissionUpdateInput"
input StagePermissionUpdateInput {
  "编码"
  code: String
  "描述"
  description: String
  "名称"
  name: String
  "权限"
  permissionsList: String
  "类型"
  type: String
}

"界面中包含的TabPane Input"
input StageScreenTabPaneInput {
  "名称"
  name: String
}

"分隔符的添加输入"
input StageSeparatorInput {
  "分隔符类别"
  category: StageWorkflowCategory
  "描述"
  description: String
  "名称"
  name: String
  "级别"
  rank: Int
}

"分隔符的修改输入"
input StageSeparatorUpdateInput {
  "分隔符类别"
  category: StageWorkflowCategory
  "描述"
  description: String
  "id"
  id: ID!
  "名称"
  name: String
  "级别"
  rank: Int
}

"工作流"
input StageWorkflowInput {
  "分类"
  category: StageWorkflowCategory!
  "主键"
  id: ID
  "流程名称"
  name: String!
}

input StageWorkflowInstanceFilter {
  "部门"
  departmentId: ID
  "查询标志，0查询全部，1查询待处理，2查询已处理"
  instanceType: InstanceType
  "类型"
  stageType: StageWorkflowInstanceType
  "时间"
  updateTime_between: DateBetween
  "用户id(属于当前关联步骤的都是审批中的状态，所以以步骤为筛选条件)"
  user: ID!
}

"界面"
input StageWorkflowScreenInput {
  "类型"
  category: StageWorkflowCategory!
  "描述"
  description: String
  "名称"
  name: String!
  "该页面包含的 TabPane"
  tabs: [StageScreenTabPaneInput]
  "标题"
  title: String!
  "该页面属于哪一个阶段方案"
  workflowScheme: ID!
}

"步骤"
input StageWorkflowStepInput {
  "该步骤的介绍"
  description: String!
  "名称"
  name: String!
  "权限关联code list"
  permissionValues: [String]
  "界面"
  screen: ID!
  "分隔符的id"
  separator: ID
  "该步骤对应的阶段"
  stage: ID!
  "上一步步骤的操作id"
  transition: [StepTransitionInput]!
  "该步骤对应的流程"
  workflow: ID!
}

"StageWorkflowStepTransitionFilter"
input StageWorkflowStepTransitionFilter {
  "操作名称"
  name: String
  "当前步骤"
  step: ID
  "类型 提交submit,暂存-temporary,回退-goback"
  type: StageWorkflowStepTransitionType
}

"跳转到下一步进行的操作"
input StageWorkflowStepTransitionInput {
  "描述"
  description: String!
  "下一个步骤"
  destination: ID
  "名称"
  name: String!
  "该步骤"
  step: ID
}

"更新步骤"
input StageWorkflowStepUpdateInput {
  "该步骤的介绍"
  description: String!
  "名称"
  name: String!
  "权限关联code list"
  permissionValues: [String]
  "界面"
  screen: ID!
  "分隔符的id"
  separator: ID
  "该步骤对应的阶段"
  stage: ID!
  "上一步步骤的操作"
  transition: [StepTransitionInput]
  "该步骤对应的流程"
  workflow: ID!
}

input StarFilter {
  "星系"
  galaxy: ID
  "星星类型"
  starType: ID!
  "用户"
  uid: ID
}

input StargazerFilter {
  "星系"
  galaxy: ID
  "星星类型"
  starType: ID
  "用户"
  uid: ID
}

input StarrableEmployeeFilter {
  name_contains: String
}

input StarrableStargazerFilter {
  name_contains: String
}

input StatisticalInput {
  "编码"
  code: String
}

input StepTransitionInput {
  "描述"
  description: String!
  "名称"
  name: String!
  "操作类型 提交submit,暂存temporary,回退goback"
  type: StageWorkflowStepTransitionType
}

input SubmitAssessmentInput {
  "考核id"
  partyAssessment: ID
  "考核得分情况"
  scoreResult: [ScoreResultInput]
  "用戶id"
  user: ID
}

input SummarybriefInput {
  code: String
  content: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  relateAccessorys: [RelatedaccessoryInput]
  title: String
}

input SupplementaryMeetingFilter {
  "支部"
  department: ID
  "开始时间"
  startTime: String
  "会议类型"
  type: String
  "用户"
  user: ID!
}

input SupplementaryMeetingInput {
  "参会人"
  attend: String
  "签到负责人"
  checkIn: String
  "发布人"
  creator: ID
  "部门"
  department: ID
  "文件"
  files: [FileObject]
  "主持人"
  host: String
  "会议类型"
  meetingtypes: [String]
  "会议主题/会议名"
  name: String
  "会议地点"
  place: String
  "记录人"
  recorder: String
  "召开时间"
  startTime: String
}

input TableFilter {
  "数据源id"
  dataSource: String
  "业务域id"
  domain: ID
  "表名称"
  tableName: String
  "表名集"
  tableNames: [String]
}

input TableStructureFilter {
  "数据源id"
  dataSource: String
  "业务域id"
  domain: ID
  "表名称"
  tableName: String
  "表名集"
  tableNames: [String]
}

input TableStructureInput {
  columns: [ColumnStructureInput]
  constraints: [ConstraintStructureInput]
  "数据源id"
  dataSource: ID
  id: ID
  "表描述"
  tableComment: String
  "数据表名称"
  tableName: String
}

input TagFilter {
  "当前提交ID"
  currentCommit: String
  "版本库"
  versionLibrary: String
}

input TagInput {
  "提交ID"
  commitId: String
  "描述"
  message: String
  "标签名称"
  tagName: String
  "版本库"
  versionLibrary: String
}

input TaskFilter {
  "流程分类"
  categoryEnum: TaskCategoryEnum!
  "流程key"
  definitionKey: String
  empId: String!
  name_like: String
  processInstanceId: String
  "流程结束时间"
  startedAfter: String
  "流程发起时间"
  startedBefore: String
  state: StateEnum!
}

input TeamFilter {
  "召集人"
  convener: ID
  "部门"
  department: ID
  "班组名称"
  name: String
}

input TeamInput {
  "召集人"
  convener: ID
  "部门"
  department: ID
  "班组名称"
  name: String
  "班组成员"
  teamMembers: [ID]
}

input TelLogsFilter {
  "结束时间"
  endDate: String
  "开始时间"
  startDate: String
  telLogTypeEnum: TelLogTypeEnum
}

input TemplateCreateInput {
  "模板名称"
  name: String
  "备注"
  remark: String
  "测评内容"
  reviewContent: [ReviewContentInput]
  "测评类型"
  reviewType: ReviewType
  "模板类型"
  templateType: TemplateType
}

input TemplateFileFilter {
  "name"
  name: String
  "类目"
  tag: ID
}

input TemplateFileInput {
  """
    大小
     size: Float
  文件
  """
  file: FileObject!
  id: ID
  "类目id"
  tag: ID!
}

input TemplateFileTagInput {
  "编号"
  code: String
  "描述"
  description: String
  "名称"
  name: String
  "组织"
  organization: ID!
  "启用状态"
  status: Boolean
}

input TemplateFilter {
  "名称"
  name: String
  "模板类型"
  type: TemplateType
}

input TemplateUpdateInput {
  "模板名称"
  name: String
  "备注"
  remark: String
  "测评内容"
  reviewContent: [ReviewContentInput]
  "模板类型"
  templateType: TemplateType
}

input TestsInput {
  age: String
  name: String
  type: ENUM_TESTS_TYPE
}

input TopicDiscussFilter {
  "发表类型"
  discussType: DiscussType
  "会议id"
  meeting: ID
  "阶段id"
  stage: ID
  "议题id"
  topic: ID
}

input TopicDiscussInput {
  "发表意见"
  content: String!
  "讨论场景（小组：GROUP 主席团：CHAIRMAN）"
  discussScene: DiscussScene!
  "发表人"
  publishPerson: ID!
  "议题id"
  topic: ID!
  "类型（意见、总结）"
  type: DiscussType!
}

input TopicVoteInput {
  "阶段id"
  stage: ID!
  "步骤id"
  step: ID
  "议题id"
  topic: ID!
  "投票类型（同意:0、反对:1、弃权:2）"
  type: VoteType!
  "投票人"
  voter: ID!
}

input TopiccollectInput {
  questiontopic: ID
  remove: Boolean
  user: String
}

input TypeCreateInput {
  "显示名称"
  displayName: String
  "名称"
  name: String
}

input TypeDefinitionFilter {
  "类型"
  kind: GraphQLKind
  "名称"
  name: String
}

input TypeUpdateInput {
  "显示名称"
  displayName: String
  "主键ID"
  id: ID
  "名称"
  name: String
}

input UpdateApiInput {
  "调试工具"
  debug: String
  "接口描述"
  describe: String
  "graphql接口"
  graphql: GraphqlApiInput
  "对应的图标"
  icon: String
  "请求方式"
  method: String
  "接口中文名"
  name: String
  "restful"
  restful: ID
  "接口所属类型"
  type: ID
}

input UpdateApiTypeInput {
  "类型名称"
  name: String
  "备注"
  note: String
  "父类型"
  parent: ID
}

input UpdateProcessAppLocationInput {
  description: String
  key: String
  modelId: ID!
  name: String
}

input UpdateProcessInput {
  appDefinitionInput: AppDefinitionInput
  model: ID!
}

input UrgeInput {
  "申请人"
  empId: String
  "意见"
  opinion: String
  "流程id"
  processDefinitionId: String
  "流程id"
  taskId: String
}

input UserCreateInput {
  "管理人员"
  employee: ID
  "授予权限"
  grants: [GrantPermissionByUserInput]
  "名称"
  nickName: String
  "登录密码"
  password: String
  "角色"
  roles: [String]
  "联系电话"
  tel: String
  "登录名"
  username: String
}

input UserMessageFilter {
  employeeId: ID
}

input UserRequestInput {
  "组织id"
  orgId: String
  "下一办理人范围:$184$$197$$567$"
  range: String!
  "当前用户账户"
  userKey: String!
}

input UserUpdateInput {
  "管理人员"
  employee: ID
  "是否启用"
  enabled: Boolean
  "授予权限"
  grants: [GrantPermissionByUserInput]
  "名称"
  nickName: String
  "密码"
  password: String
  "角色"
  roles: [String]
  "联系电话"
  tel: String
  "登录名"
  username: String
}

input VersionDatabaseCreateInput {
  "描述"
  description: String
  "对应的业务"
  displayName: String!
  "名称"
  name: String!
  "分类集"
  types: [TypeCreateInput]
}

input VersionDatabaseUpdateInput {
  "描述"
  description: String
  "对应的业务"
  displayName: String
  "分类集"
  types: [TypeUpdateInput]
}

input ViewRecordFilter {
  "过滤"
  filter: IDAndTypeFilter
  "可看来源"
  source: IDAndTypeFilter
}

input ViewRecordInput {
  "实体ID"
  entityId: ID!
  "实体类型"
  entityType: String!
  "观察者"
  viewer: ID!
}

input VoteoptionInput {
  add_time: DateTime
  entity_id: String
  entity_type: String
  meetingvotedetail: ID
  name: String
}

input WorkflowFilter {
  "根据标题筛选"
  title_like: String
  userId: String!
  "待办文件0待阅文件2"
  workStatus_eq: String!
}

input WorkflowRequestInput {
  "用户账号"
  account: String!
  "业务主键id"
  businessKey: String
  "表单类型:form(老表单)、ezform（新表单）"
  formType: String
  "表单id"
  pageId: String
  "流程id"
  processId: String!
}

input WorkflowTransitionInput {
  "操作id"
  action: ID!
  "会议id"
  meeting: ID!
  "阶段id"
  stage: ID!
  "步骤id"
  step: ID!
  "字段值集"
  values: [MeetingFieldValueInput]
  "流程id"
  workflow: ID!
}

input YsDocumentFilter {
  "文章标题模糊查询"
  title_like: String
}

input YsDocumentInput {
  "字段属性"
  files: [FileObject]
  "字段名"
  title: String
}

input createActivityInput {
  data: ActivityInput
}

input createEntityuserInput {
  data: EntityuserInput
}

input createExamInput {
  data: ExamInput
}

input createExamandpaperInput {
  data: ExamandpaperInput
}

input createExamconditionInput {
  data: ExamconditionInput
}

input createExaminationpaperInput {
  data: ExaminationpaperInput
}

input createExampapertitleInput {
  data: ExampapertitleInput
}

input createExamreportInput {
  data: ExamreportInput
}

input createExamtopicInput {
  data: ExamtopicInput
}

input createJoinconditionInput {
  data: JoinconditionInput
}

input createMeetingInput {
  data: MeetingInput
}

input createMeetingnoticeInput {
  data: MeetingnoticeInput
}

input createMeetingreserveInput {
  data: MeetingreserveInput
}

input createMeetingroomInput {
  data: MeetingroomInput
}

input createMeetingtypeInput {
  data: MeetingtypeInput
}

input createMeetingvoteInput {
  data: MeetingvoteInput
}

input createMeetingvotedetailInput {
  data: MeetingvotedetailInput
}

input createPartybillInput {
  data: PartybillInput
}

input createPartyexpensesInput {
  data: PartyexpensesInput
}

input createPayscaleInput {
  data: PayscaleInput
}

input createPaystandardInput {
  data: PaystandardInput
}

input createQuestionbankInput {
  data: QuestionbankInput
}

input createQuestiontopicInput {
  data: QuestiontopicInput
}

input createRelatedaccessoryInput {
  data: RelatedaccessoryInput
}

input createSheetInput {
  data: SheetInput
}

input createSheetchildInput {
  data: SheetchildInput
}

input createSummarybriefInput {
  data: SummarybriefInput
}

input createTestsInput {
  data: TestsInput
}

input createTopiccollectInput {
  data: TopiccollectInput
}

input createVoteoptionInput {
  data: VoteoptionInput
}

input deleteActivityInput {
  where: InputID
}

input deleteEntityuserInput {
  where: InputID
}

input deleteExamInput {
  where: InputID
}

input deleteExamandpaperInput {
  where: InputID
}

input deleteExamconditionInput {
  where: InputID
}

input deleteExaminationpaperInput {
  where: InputID
}

input deleteExampapertitleInput {
  where: InputID
}

input deleteExamreportInput {
  where: InputID
}

input deleteExamtopicInput {
  where: InputID
}

input deleteJoinconditionInput {
  where: InputID
}

input deleteMeetingInput {
  where: InputID
}

input deleteMeetingnoticeInput {
  where: InputID
}

input deleteMeetingreserveInput {
  where: InputID
}

input deleteMeetingroomInput {
  where: InputID
}

input deleteMeetingtypeInput {
  where: InputID
}

input deleteMeetingvoteInput {
  where: InputID
}

input deleteMeetingvotedetailInput {
  where: InputID
}

input deletePartybillInput {
  where: InputID
}

input deletePartyexpensesInput {
  where: InputID
}

input deletePayscaleInput {
  where: InputID
}

input deletePaystandardInput {
  where: InputID
}

input deleteQuestionbankInput {
  where: InputID
}

input deleteQuestiontopicInput {
  where: InputID
}

input deleteRelatedaccessoryInput {
  where: InputID
}

input deleteSheetInput {
  where: InputID
}

input deleteSheetchildInput {
  where: InputID
}

input deleteSummarybriefInput {
  where: InputID
}

input deleteTestsInput {
  where: InputID
}

input deleteTopiccollectInput {
  where: InputID
}

input deleteVoteoptionInput {
  where: InputID
}

input editActivityInput {
  activity_instruction: String
  activity_place: String
  apply: Boolean
  apply_number_limit: Int
  attendActivitys: [EntityuserInput]
  budget_amount: Int
  checkInPersons: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  end_time: DateTime
  icon: String
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  mssage_push: String
  name: String
  orgid: String
  presenters: [EntityuserInput]
  relateAccessorys: [RelatedaccessoryInput]
  remind: String
  sign_time_require: String
  sign_way: String
  start_time: DateTime
}

input editEntityuserInput {
  entity_id: String
  entity_type: String
  recipientId: String
  user: String
  user_role: ENUM_ENTITYUSER_USER_ROLE
  user_type: String
}

input editExamInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  examPersons: [EntityuserInput]
  examType: ENUM_EXAM_EXAMTYPE
  exam_end_time: DateTime
  exam_length: Int
  exam_name: String
  exam_start_time: DateTime
  examandpapers: [ID]
  examinationpapers: [ID]
  icon: String
  interactive_control: String
  is_delete: Boolean
  is_sys: String
  messagePush: [String]
  message_push: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass_mark: String
  releaseState: String
  sheets: [ID]
}

input editExamandpaperInput {
  exam: ID
  examinationpaper: ID
}

input editExamconditionInput {
  code: String
  create_time: DateTime
  creator: String
  describe: String
  exam_state: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  pass: Boolean
  reate_departid: String
  score: String
  user: String
}

input editExaminationpaperInput {
  examandpapers: [ID]
  exampapertitles: [ID]
  examtopics: [ID]
  name: String
  paperType: ENUM_EXAMINATIONPAPER_PAPERTYPE
  sheets: [ID]
  totalScore: String
}

input editExampapertitleInput {
  examinationpaper: ID
  questionbank: ID
  questiontopic: ID
}

input editExamreportInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exam_number: Int
  finished: Boolean
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  user: String
}

input editExamtopicInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  each_question_score: String
  examinationpaper: ID
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  remind_type: ENUM_EXAMTOPIC_REMIND_TYPE
}

input editJoinconditionInput {
  attend_state: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  note: String
  orgid: String
  referred_person: String
  sign_state: ENUM_JOINCONDITION_SIGN_STATE
  sign_time: String
  transfer_person: String
  user: String
}

input editMeetingInput {
  apply: Boolean
  apply_number_limit: Int
  attendMeetings: [EntityuserInput]
  budget_amount: Int
  cancel_reason: String
  checkInPersons: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  createdepartment: String
  creator: String
  cycle_meeting: Boolean
  describe: String
  end_date: DateTime
  focus: String
  icon: String
  instruction: String
  interactive_control: JSON
  is_delete: Boolean
  is_sys: String
  issuer: String
  meetingTypes: [String]
  meeting_end_time: DateTime
  meeting_place: String
  meeting_start_time: DateTime
  meetingnotices: [ID]
  meetingreserves: [ID]
  meetingtypes: [ID]
  messagePush: [String]
  message_push: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  need_meeting: Boolean
  orgid: String
  presenters: [EntityuserInput]
  qr_code: String
  relateAccessorys: [RelatedaccessoryInput]
  remark: String
  remind: String
  remindSpecificTime: DateTime
  repeat_period: String
  repeat_type: String
  replace_participant: Boolean
  service: String
  signSpecificEndTime: DateTime
  signSpecificStartTime: DateTime
  sign_time_require: String
  sign_way: String
  summaryPersons: [EntityuserInput]
}

input editMeetingnoticeInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  dispose_way: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meeting: ID
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  notice_create_time: DateTime
  orgid: String
  user: String
}

input editMeetingreserveInput {
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meeting: ID
  meetingroom: ID
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  reserve_time: DateTime
  reserve_type: String
}

input editMeetingroomInput {
  applicants: [EntityuserInput]
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  device_configuration: JSON
  head_portrait: String
  icon: String
  is_delete: Boolean
  is_sys: String
  max_seat_number: Int
  meetingreserves: [ID]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  open_end_time: DateTime
  open_start_time: DateTime
  orgid: String
  place: String
  seat_number: Int
  state: String
  type: String
}

input editMeetingtypeInput {
  meeting: ID
  meetingIsType: String
}

input editMeetingvoteInput {
  anonymity: Boolean
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  end_time: DateTime
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  meetingvotedetails: [ID]
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  optionNumber: JSON
  options: [VoteoptionInput]
  orgid: String
  pollIssuer: String
  start_time: DateTime
  vote: String
  vote_account: String
  vote_type: String
  waiver: Boolean
}

input editMeetingvotedetailInput {
  meetingvote: ID
  user: String
  user_type: String
  vote_state: ENUM_MEETINGVOTEDETAIL_VOTE_STATE
  voteoptions: [ID]
}

input editPartybillInput {
  amount: Float
  departmentId: String
  month: Int
  payOrder: String
  payState: ENUM_PARTYBILL_PAYSTATE
  payTime: DateTime
  payWay: ENUM_PARTYBILL_PAYWAY
  userId: String
  year: Int
}

input editPartyexpensesInput {
  departmentId: String
  month: Int
  payAmount: Float
  year: Int
}

input editPayscaleInput {
  partyMemberType: ENUM_PAYSCALE_PARTYMEMBERTYPE
  scale: Float
  wage: String
}

input editPaystandardInput {
  departmentId: String
  payAmount: Float
  use: ENUM_PAYSTANDARD_USE
  userId: String
  userName: String
  userNumber: String
  year: Int
}

input editQuestionbankInput {
  code: String
  craete_time: DateTime
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exampapertitles: [ID]
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  question_bank_name: String
  question_number: Int
  questiontopics: [ID]
}

input editQuestiontopicInput {
  answer_key: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  exampapertitles: [ID]
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  options: [VoteoptionInput]
  orgid: String
  question_name: String
  question_type: ENUM_QUESTIONTOPIC_QUESTION_TYPE
  questionbank: ID
  right_answers: String
  sheetchildren: [ID]
  topiccollects: [ID]
}

input editRelatedaccessoryInput {
  accessory_descript: String
  accessory_type: String
  code: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  operator: String
  orgid: String
  upload_file: String
  upload_time: DateTime
}

input editSheetInput {
  create_start_time: DateTime
  exam: ID
  examinationpaper: ID
  hand_examination: Boolean
  pass: Boolean
  remainTime: Int
  score: String
  sheetchildren: [ID]
  user: String
}

input editSheetchildInput {
  answer: String
  questiontopic: ID
  result: Boolean
  sheet: ID
}

input editSummarybriefInput {
  code: String
  content: String
  create_departid: String
  create_time: DateTime
  creator: String
  describe: String
  entity_id: String
  entity_type: String
  icon: String
  is_delete: Boolean
  is_sys: String
  modifier: String
  modify_departid: String
  modify_time: DateTime
  name: String
  orgid: String
  relateAccessorys: [RelatedaccessoryInput]
  title: String
}

input editTestsInput {
  age: String
  name: String
  type: ENUM_TESTS_TYPE
}

input editTopiccollectInput {
  questiontopic: ID
  remove: Boolean
  user: String
}

input editVoteoptionInput {
  add_time: DateTime
  entity_id: String
  entity_type: String
  meetingvotedetail: ID
  name: String
}

input employee {
  empId: String
  type: employeeTypeEnum
}

input getAllChannelRequest {
  "用户组织"
  orgId: String!
  "用户组织串"
  orgIdString: String!
  "栏目名称"
  setChannelName: String
  "用户ID"
  userId: String!
}

input telEmployeeInput {
  "通道"
  pass: Int
  "电话号"
  tel: String
  "用户ID"
  userId: ID
}

input updateActivityInput {
  data: editActivityInput
  where: InputID
}

input updateEntityuserInput {
  data: editEntityuserInput
  where: InputID
}

input updateExamInput {
  data: editExamInput
  where: InputID
}

input updateExamandpaperInput {
  data: editExamandpaperInput
  where: InputID
}

input updateExamconditionInput {
  data: editExamconditionInput
  where: InputID
}

input updateExaminationpaperInput {
  data: editExaminationpaperInput
  where: InputID
}

input updateExampapertitleInput {
  data: editExampapertitleInput
  where: InputID
}

input updateExamreportInput {
  data: editExamreportInput
  where: InputID
}

input updateExamtopicInput {
  data: editExamtopicInput
  where: InputID
}

"updateGhActivityBaseInfo"
input updateGhActivityBaseInfo {
  "活动封面图片"
  coverImages: [FileObject]
  "id"
  id: ID!
  "说明"
  introduction: String
  "名称"
  name: String
}

input updateJoinconditionInput {
  data: editJoinconditionInput
  where: InputID
}

input updateMeetingInput {
  data: editMeetingInput
  where: InputID
}

input updateMeetingnoticeInput {
  data: editMeetingnoticeInput
  where: InputID
}

input updateMeetingreserveInput {
  data: editMeetingreserveInput
  where: InputID
}

input updateMeetingroomInput {
  data: editMeetingroomInput
  where: InputID
}

input updateMeetingtypeInput {
  data: editMeetingtypeInput
  where: InputID
}

input updateMeetingvoteInput {
  data: editMeetingvoteInput
  where: InputID
}

input updateMeetingvotedetailInput {
  data: editMeetingvotedetailInput
  where: InputID
}

input updatePartybillInput {
  data: editPartybillInput
  where: InputID
}

input updatePartyexpensesInput {
  data: editPartyexpensesInput
  where: InputID
}

input updatePayscaleInput {
  data: editPayscaleInput
  where: InputID
}

input updatePaystandardInput {
  data: editPaystandardInput
  where: InputID
}

input updateQuestionbankInput {
  data: editQuestionbankInput
  where: InputID
}

input updateQuestiontopicInput {
  data: editQuestiontopicInput
  where: InputID
}

input updateRelatedaccessoryInput {
  data: editRelatedaccessoryInput
  where: InputID
}

input updateSheetInput {
  data: editSheetInput
  where: InputID
}

input updateSheetchildInput {
  data: editSheetchildInput
  where: InputID
}

input updateSummarybriefInput {
  data: editSummarybriefInput
  where: InputID
}

input updateTestsInput {
  data: editTestsInput
  where: InputID
}

input updateTopiccollectInput {
  data: editTopiccollectInput
  where: InputID
}

input updateVoteoptionInput {
  data: editVoteoptionInput
  where: InputID
}

input urgeFilter {
  empId: String
  timeBet: DateBetween
  time_bet: DateBetween
}

input userFilter {
  "按照授权部门查询"
  department: String
  "按部门ID查询"
  deptid_eq: String
  "按所属部门名称查询，包括其子部门"
  deptname_like: String
  "按群组ID查询"
  groupid_eq: String
  "姓名模糊查询"
  nickname_like: String
  "组织"
  organization_eq: String!
  "登陆账号模糊查询"
  username_like: String
}
