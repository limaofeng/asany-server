input ApplicationFilter {
    id_in: [String]
    # 分类
    enabled: Boolean
}

input RouteFilter {
    id_in: [String]
    # 是否启用
    enabled: Boolean
    # 应用ID
    application: ID
    # 类型
    type: RouteType
}

input RouteCreateInput {
    # 名称
    name: String!
    # 路径
    path: String!
    # 必须登录
    authorized: Boolean
    # 路由类型
    type: RouteType
    # 需要提供的权限
    authority: [String]
    # 在菜单中隐藏
    hideInMenu: Boolean
    # 在菜单中隐藏子节点
    hideChildrenInMenu: Boolean
    # 在面包屑中隐藏菜单
    hideInBreadcrumb: Boolean
    # 重定向的路径
    redirect: String
    # 组件
    component: RouteComponentInput
    # 对应的图标
    icon: String
    # 父路由
    parentRoute: ID
    # 默认位置
    index: Int
}

input RouteUpdateInput {
    # 名称
    name: String
    # 是否启用
    enabled: Boolean
    # 路由类型
    type: RouteType
    # 路径
    path: String
    # 必须登录
    authorized: Boolean
    # 需要提供的权限
    authority: [String]
    # 在菜单中隐藏
    hideInMenu: Boolean
    # 在菜单中隐藏子节点
    hideChildrenInMenu: Boolean
    # 在面包屑中隐藏菜单
    hideInBreadcrumb: Boolean
    # 重定向的路径
    redirect: String
    # 组件
    component: RouteComponentInput
    # 对应的图标
    icon: String
    # 父路由
    parentRoute: ID
}

input RouteComponentInput {
    # 渲染组件
    template: String
    # 组件配置数据
    props: JSON
    # 路由配置
#    routeWrapper: RouteComponentWrapperInput
}

#input RouteComponentWrapperInput {
#    # 渲染组件
#    template: String
#    # 组件配置数据
#    props: JSON
#}

type RouteComponent {
    # 渲染组件
    id: ID
    # 模版
    template: String
    # 组件配置数据
    props: JSON
    # 路由配置
#    routeWrapper: RouteComponentWrapper
}

type RouteComponentWrapper {
    # 渲染组件
    id: ID
    # 模版
    template: String
    # 组件配置数据
    props: JSON
}

type Organization {
    id: String
}

input ApplicationCreateInput {
    # 名称
    name: String!
    # 简介
    description: String
    # 应用 LOGO
    logo: String
    # 封面图
    cover: String
    # 组织
    organization: String
    # 应用根路径
    path: String
    # 是否启用
    enabled: Boolean
    # 集成钉钉
    dingtalkIntegration: Boolean
}

input ApplicationUpdateInput {
    # 名称
    name: String
    # 简介
    description: String
    # 应用 LOGO
    logo: String
    # 组织
    organization: String
    # 应用根路径
    path: String
    # 是否启用
    enabled: Boolean
}

type Routespace {
    id: ID
    name: String
}

type ClientSecret {
    id: ID
    secret: String
}

type Application {
    id: ID
    # 名称
    name: String
    # 简介
    description: String
    # 应用 LOGO
    logo: String
    # 应用访问地址
    url: String
    # 挂载点
    mountPoint: String
    # 组织
    organization: Organization
    # 应用根路径
    path: String
    # 是否启用
    enabled: Boolean
    # 路由
    routes(space: ID!): [Route]
    # 路由命名空间
    routespaces: [Routespace]
    # 路由
    route(path: String!): Route
    # 根路由
    rootRoute(space: ID!): Route
    # 登录路由
    loginRoute(space: ID!): Route
    # 布局路由
    layoutRoute(space: ID!): Route
    # 集成钉钉
    dingtalkIntegration: Boolean
    # 客户端 ID
    clientId: String
    # 客户端密钥
    clientSecrets: [ClientSecret]
    #钉钉
#    dingtalk: DingtalkDataSource
}

#type DingtalkDataSource {
#    id: ID
#}

type ApplicationVariable {
    key: String
    value: String
}

enum RouteType {
    # 菜单
    MENU
    # 标题
    HEADER
    # 分割符
    DIVIDER
    # 路由
    ROUTE
}

type Route {
    id: ID
    # 菜单名称
    name: String
    # 是否启用
    enabled: Boolean
    # 路由类型
    type: RouteType
    # 树路径
    path: String
    # 必须登录
    authorized: Boolean
    # 需要提供的权限
    authority: [String]
    # 在菜单中隐藏
    hideInMenu: Boolean
    # 在菜单中隐藏子节点
    hideChildrenInMenu: Boolean
    # 在面包屑中隐藏菜单
    hideInBreadcrumb: Boolean
    # 重定向
    redirect: String
    # 组件
    component: RouteComponent
    # 对应的图标
    icon: String
    # 序号
    index: Int
    # 子路由
    routes: [Route]
    # 父路由
    parent: Route
    # 路由层级
    level: Int
    # 路由对应的应用
    application: Application
}

union StarValue = Application


extend type Query {
    # 所有的应用
    applications(filter: ApplicationFilter = {}): [Application]
    # 查询单个应用的信息
    application(id: ID!, space: ID): Application
}

extend type Mutation {
    # 创建一个应用
    createApplication(input: ApplicationCreateInput!): Application
    # 更新应用信息
    updateApplication(id: ID!, input: ApplicationUpdateInput!, merge: Boolean = true): Application
    # 删除应用
    removeApplication(id: ID!): Boolean
    # 创建路由
    createRoute(input: RouteCreateInput!): Route
    # 更新路由信息
    updateRoute(id: ID!, input: RouteUpdateInput!, merge: Boolean = true): Route
    # 删除路由
    removeRoute(id: ID!): Boolean
    # 移动路由
    moveRoute(id: ID!, parentRoute: ID, location: Int!): Route
}
